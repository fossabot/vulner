% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/minionWorker.R
\name{minionWorker}
\alias{minionWorker}
\title{A function that watches a message queue and starts working a job when one is available.}
\usage{
minionWorker(host, port = 6379, jobsQueue = "jobsQueue",
  logLevel = "DEBUG", logFileDir = "stdout", useJSON = F,
  whitelist = NULL)
}
\arguments{
\item{host}{The name or ip address of the redis server.}

\item{port}{The port the redis server is running on. Defaults to 6379.}

\item{jobsQueue}{A string giving the name of the queue where jobs will be placed.
Defaults to \code{jobsQueue}.}

\item{logLevel}{A string, required. 'TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL'.
Level threshold required to trigger log write. You can change the level on an
existing log.}

\item{logFileDir}{A string giving the directory to store worker log files if logging is
enabled. Defaults to \code{stdout} which outputs logs to standard out. Specify directory
if you want logs to be written to a file. If a directory is specified, then logs will be
saved in that directory to a file with name \code{<host>-worker-<pid>.log}.}

\item{useJSON}{Flag specifying whether jobs and results will be sent in JSON format. Defaults to false
so R-specific objects are preserved in transit. If sending jobs from languages other than R, set useJSON
to true and make sure jobs are defined in the JSON format and the function being executed does not require
any R-specific objects.}

\item{whitelist}{String of list. If a list, it defines the whitelist using the same format as
the blacklist. If a string, then it gives the path to a JSON file that defines the whitelist. If a
whitelist is defined, then a function will only be allowed if it is in the specified list. Note that
the whitelist takes precedent over the blacklist.}
}
\description{
\code{minionWorker} is a blocking function that will completely block the R instance
running it. It immediately performs some housekeeping by gathering logging information
and connecting to the message queue. Once connected, it performs a blocking pop on the
\code{jobsQueue} and waits until it receives a bundled job message. Once a message is
received, it pulls the specified function for the specified package and runs it with
the bundled parameters and stores any returned results in the bundled response key.
}
\details{
\code{minionWorker} is the core of the \code{rminions} package and multiple R
processes running this function should be spawned. The goal is to spawn just enough
workers that the full cpu resources of the system running them are maxed out when under
full jobs load. A good rule of thumb is that you should have \code{number of cores + 2}
workers running on a system.

The minion worker is constructed to work with nearly all tasks. In order to accomplish
this, job messages need to be of a specific format. Job message must be lists with the
following keys: \code{package}, \code{func}, \code{parameters}, \code{resultsQueue},
and optionally, \code{errorQueue}.

\code{package} is the name of the package containing the function that will be executed.

\code{func} is the name of the function, contained in the specified package, that you
wish to execute with this request. If \code{useJSON} is false, \code{func} can take any
type of parameter. If \code{useJSON} is true, then \code{func} should only take R data
as parameters that can be converted to and from JSON, i.e. strings, numbers, simple vectors,
etc.

\code{parameters} is a named list of all the parameters to be passed to \code{func}. The
names must match those of the parameters \code{func} expects.

\code{resultsQueue} is required and will be a string with the name of the redis queue to
store any returned results in. If not provided, an error will be returned in the queue
"missingResultsQueueErrors".

\code{errorQueue} will be a string with the name of the redis queue to store any errors
thrown while running the job. If not specified, it will default to \code{resultsQueue}.
}
