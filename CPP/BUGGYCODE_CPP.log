MySection.h:22:66: error: syntax error: ^) [syntaxError]
   ListsElementCollection^ get() { return (ListsElementCollection^)this[_lists]; }
                                                                 ^
AssignmentAddressToInteger\bad.c:3:11: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
    int a = p;
          ^
C\src\20200813192600\fix\leak_02.c:19:18: style: The scope of the variable 'xs' can be reduced. [variableScope]
    int          xs[] = { 1, 2, 3 };
                 ^
C\src\20200813192600\fix\leak_02.c:19:18: style: Variable 'xs' can be declared with const [constVariable]
    int          xs[] = { 1, 2, 3 };
                 ^
C\src\20200813192600\fix\leak_02.c:35:18: error: Uninitialized variable: ys [uninitvar]
    if (rand()) *ys = (xx && yy) || xs[0];  // ys is not initialized yet.
                 ^
C\src\20200813192600\fix\leak_02.c:35:18: error: Uninitialized variable: ys [uninitvar]
    if (rand()) *ys = (xx && yy) || xs[0];  // ys is not initialized yet.
                 ^
C\src\20200813192600\fix\leak_02.c:29:43: note: Assuming condition is false
    if ((t = malloc(sizeof(struct test))) == NULL) {
                                          ^
C\src\20200813192600\fix\leak_02.c:35:18: note: Uninitialized variable: ys
    if (rand()) *ys = (xx && yy) || xs[0];  // ys is not initialized yet.
                 ^
C\src\20200813192600\fix\ret_stack.c:6:9: style: The scope of the variable 'x' can be reduced. [variableScope]
    int x = 5;
        ^
C\src\20200813192600\fix\ret_stack.c:17:9: style: The scope of the variable 'x' can be reduced. [variableScope]
    int x = 5;
        ^
C\src\20200813192600\fix\struct.c:39:5: error: Found a exit path from function with non-void return type that has missing return statement [missingReturn]
    printf("s.n\t%d\n", global_s.n);      // global_s.n = 0
    ^
C\src\20200813192600\orig\leak_01.c:20:7: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
    p = aux_malloc(sizeof(int));
      ^
C\src\20200813192600\orig\leak_02.c:19:18: style: The scope of the variable 'xs' can be reduced. [variableScope]
    int          xs[] = { 1, 2, 3 };
                 ^
C\src\20200813192600\orig\leak_02.c:19:18: style: Variable 'xs' can be declared with const [constVariable]
    int          xs[] = { 1, 2, 3 };
                 ^
C\src\20200813192600\orig\leak_02.c:35:18: error: Uninitialized variable: ys [uninitvar]
    if (rand()) *ys = (xx && yy) || xs[0];  // ys is not initialized yet.
                 ^
C\src\20200813192600\orig\leak_02.c:35:18: error: Uninitialized variable: ys [uninitvar]
    if (rand()) *ys = (xx && yy) || xs[0];  // ys is not initialized yet.
                 ^
C\src\20200813192600\orig\leak_02.c:29:43: note: Assuming condition is false
    if ((t = malloc(sizeof(struct test))) == NULL) {
                                          ^
C\src\20200813192600\orig\leak_02.c:35:18: note: Uninitialized variable: ys
    if (rand()) *ys = (xx && yy) || xs[0];  // ys is not initialized yet.
                 ^
C\src\20200813192600\orig\ret_stack.c:8:12: error: Returning pointer to local variable 'x' that will be invalid when returning. [returnDanglingLifetime]
    return &x;
           ^
C\src\20200813192600\orig\ret_stack.c:8:12: note: Address of variable taken here.
    return &x;
           ^
C\src\20200813192600\orig\ret_stack.c:6:9: note: Variable created here.
    int x = 5;
        ^
C\src\20200813192600\orig\ret_stack.c:8:12: note: Returning pointer to local variable 'x' that will be invalid when returning.
    return &x;
           ^
C\src\20200813192600\orig\ret_stack.c:16:12: error: Returning pointer to local variable 'x' that will be invalid when returning. [returnDanglingLifetime]
    return p;
           ^
C\src\20200813192600\orig\ret_stack.c:14:14: note: Address of variable taken here.
    int *p = &x;
             ^
C\src\20200813192600\orig\ret_stack.c:13:9: note: Variable created here.
    int x = 5;
        ^
C\src\20200813192600\orig\ret_stack.c:16:12: note: Returning pointer to local variable 'x' that will be invalid when returning.
    return p;
           ^
C\src\20200813192600\orig\struct.c:35:5: error: Found a exit path from function with non-void return type that has missing return statement [missingReturn]
    printf("s.n\t%d\n", global_s.n);      // global_s.n = 0
    ^
C\src\20200813192600\orig\struct.c:20:30: error: Uninitialized struct member: s1.n [uninitStructMember]
        printf("s1.n\t%d\n", s1.n);      // uninitialized field
                             ^
C\src\20200813192600\orig\struct.c:21:32: error: Uninitialized struct member: s1.str [uninitStructMember]
        printf("s1.str\t%s\n", s1.str);  // uninitialized pointer
                               ^
C\src\20200813192600\orig\struct.c:20:33: error: Uninitialized variable: s1.n [uninitvar]
        printf("s1.n\t%d\n", s1.n);      // uninitialized field
                                ^
GetPrivateProfileString.cpp:7:5: warning: Class 'CINIReader' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    m_pSectionList = new CStringList();
    ^
GetPrivateProfileString.cpp:7:5: warning: Class 'CINIReader' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    m_pSectionList = new CStringList();
    ^
GetPrivateProfileString.cpp:45:11: style: Variable 'pwd' is assigned a value that is never used. [unreadVariable]
DWORD pwd = getProfileString(IniPath, Section, "password");  // CWE 256
          ^
_src\GTT\Prefix\avltree.c:347:36: style: Obsolete function 'strdup' called. It is recommended to use '_strdup' instead. [strdupCalled]
    if (! (root->an_key  = (DSKEY) strdup((char*)key)) )
                                   ^
_src\GTT\Prefix\avltree.c:1084:9: style: Condition 'node' is always true [knownConditionTrueFalse]
    if (node)
        ^
_src\GTT\Prefix\avltree.c:72:11: style: struct member 'avltree::at_nodes' is never used. [unusedStructMember]
    int   at_nodes; /* number of nodes in the tree */
          ^
_src\GTT\Prefix\avltree.c:73:11: style: struct member 'avltree::at_copy_keys' is never used. [unusedStructMember]
    int   at_copy_keys; /* should we copy each key ? */
          ^
_src\GTT\Prefix\avltree.c:74:11: style: struct member 'avltree::at_key_size' is never used. [unusedStructMember]
    int   at_key_size; /* if yes, what is the key size */
          ^
_src\GTT\Prefix\avltree.c:76:22: style: struct member 'avltree::root' is never used. [unusedStructMember]
    struct avlnode * root;
                     ^
_src\GTT\Prefix\avltree.c:77:22: style: struct member 'avltree::current' is never used. [unusedStructMember]
    struct avlnode * current; /* to keep track of currencies  */
                     ^
_src\GTT\Prefix\avltree.c:706:3: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
  BIND(AVLNULL);
  ^
_src\GTT\Prefix\avltree.c:714:3: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
  BIND(  LEFT(node));
  ^
_src\GTT\Prefix\avltree.c:721:3: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
  BIND(  RIGHT(node));
  ^
_src\GTT\Prefix\gttlib.c:645:15: style: Variable 'dd_status' is reassigned a value before the old one has been used. [redundantAssignment]
    dd_status = MBE_READX( filenumber,
              ^
_src\GTT\Prefix\gttlib.c:638:15: note: dd_status is assigned
    dd_status = MBE_FILE_SETKEY_( filenumber,
              ^
_src\GTT\Prefix\gttlib.c:645:15: note: dd_status is overwritten
    dd_status = MBE_READX( filenumber,
              ^
_src\GTT\Prefix\gttlib.c:398:30: style: The scope of the variable 'RecCount' can be reduced. [variableScope]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                             ^
_src\GTT\Prefix\gttlib.c:398:39: style: The scope of the variable 'i' can be reduced. [variableScope]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                                      ^
_src\GTT\Prefix\gttlib.c:398:41: style: The scope of the variable 'err_close' can be reduced. [variableScope]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                                        ^
_src\GTT\Prefix\gttlib.c:399:12: style: The scope of the variable 'tmpgt' can be reduced. [variableScope]
   char    tmpgt[GTLEN+1];
           ^
_src\GTT\Prefix\gttlib.c:172:51: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                                                  ^
_src\GTT\Prefix\gttlib.c:237:17: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
      err_close = (short) MBE_FILE_CLOSE_(FGTT_Tree);
                ^
_src\GTT\Prefix\gttlib.c:398:51: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                                                  ^
_src\GTT\Prefix\gttlib.c:469:14: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
   err_close = (short) MBE_FILE_CLOSE_(FGTT_List);
             ^
_src\GTT\Prefix\gttlib.c:497:15: style: Variable 'elemtosort' is assigned a value that is never used. [unreadVariable]
   elemtosort = currelem = 0;
              ^
_src\GTT\Prefix\gttlib.c:497:26: style: Variable 'currelem' is assigned a value that is never used. [unreadVariable]
   elemtosort = currelem = 0;
                         ^
_src\GTT\Prefix\gttlib.c:523:15: style: Variable 'elemtosort' is assigned a value that is never used. [unreadVariable]
   elemtosort = currelem = 0;
              ^
_src\GTT\Prefix\gttlib.c:523:26: style: Variable 'currelem' is assigned a value that is never used. [unreadVariable]
   elemtosort = currelem = 0;
                         ^
_src\GTT\Prefix\gttlib.c:618:13: style: Variable 'errg' is assigned a value that is never used. [unreadVariable]
 if( ( errg = MBE_FILE_OPEN_( (char *) filename.text,
            ^
_src\GTT\Prefix\gttlib.c:680:21: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
    if( ( err_close = MBE_FILE_CLOSE_(filenumber) ) == 0)
                    ^
_src\GTT\Prefix\gttlib.c:342:12: style: Variable 'keylen' is reassigned a value before the old one has been used. [redundantAssignment]
    keylen = strlen(mgt);
           ^
_src\GTT\Prefix\gttlib.c:336:9: note: keylen is assigned
 keylen = -1;
        ^
_src\GTT\Prefix\gttlib.c:342:12: note: keylen is overwritten
    keylen = strlen(mgt);
           ^
_src\GTT\Prefix\gttlib.c:329:9: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  i,j,tmplen,found,keylen;
        ^
_src\GTT\Prefix\gttlib.c:329:11: style: The scope of the variable 'j' can be reduced. [variableScope]
 short  i,j,tmplen,found,keylen;
          ^
_src\GTT\Prefix\gttlib.c:355:15: style: Variable 'iEnd' is assigned a value that is never used. [unreadVariable]
         iEnd = iFirst = i;   /* riga beccata in pieno! */
              ^
_src\GTT\Prefix\gttlib.c:329:13: style: Unused variable: tmplen [unusedVariable]
 short  i,j,tmplen,found,keylen;
            ^
_src\GTT\Prefix\gttlib.c:70:41: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
   short    i,sCount, err = 0,err_close = 0,RecCount;
                                        ^
_src\GTT\Prefix\gttlib.c:150:17: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
      err_close = (short) MBE_FILE_CLOSE_(FGTT_Tree);
                ^
_src\GTT\Prefix\gttserv.c:253:20: error: syntax error [syntaxError]
          &i_maxlen, );
                   ^
_src\GTT\Range\avltree.c:347:36: style: Obsolete function 'strdup' called. It is recommended to use '_strdup' instead. [strdupCalled]
    if (! (root->an_key  = (DSKEY) strdup((char*)key)) )
                                   ^
_src\GTT\Range\avltree.c:1049:9: style: Condition 'node' is always true [knownConditionTrueFalse]
    if (node)
        ^
_src\GTT\Range\avltree.c:72:11: style: struct member 'avltree::at_nodes' is never used. [unusedStructMember]
    int   at_nodes; /* number of nodes in the tree */
          ^
_src\GTT\Range\avltree.c:73:11: style: struct member 'avltree::at_copy_keys' is never used. [unusedStructMember]
    int   at_copy_keys; /* should we copy each key ? */
          ^
_src\GTT\Range\avltree.c:74:11: style: struct member 'avltree::at_key_size' is never used. [unusedStructMember]
    int   at_key_size; /* if yes, what is the key size */
          ^
_src\GTT\Range\avltree.c:76:22: style: struct member 'avltree::root' is never used. [unusedStructMember]
    struct avlnode * root;
                     ^
_src\GTT\Range\avltree.c:77:22: style: struct member 'avltree::current' is never used. [unusedStructMember]
    struct avlnode * current; /* to keep track of currencies  */
                     ^
_src\GTT\Range\avltree.c:700:3: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
  BIND(AVLNULL);
  ^
_src\GTT\Range\avltree.c:708:3: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
  BIND(  LEFT(node));
  ^
_src\GTT\Range\avltree.c:715:3: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
  BIND(  RIGHT(node));
  ^
_src\GTT\Range\gttlib.c:651:15: style: Variable 'dd_status' is reassigned a value before the old one has been used. [redundantAssignment]
    dd_status = MBE_READX( filenumber,
              ^
_src\GTT\Range\gttlib.c:644:15: note: dd_status is assigned
    dd_status = MBE_FILE_SETKEY_( filenumber,
              ^
_src\GTT\Range\gttlib.c:651:15: note: dd_status is overwritten
    dd_status = MBE_READX( filenumber,
              ^
_src\GTT\Range\gttlib.c:400:30: style: The scope of the variable 'RecCount' can be reduced. [variableScope]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                             ^
_src\GTT\Range\gttlib.c:400:39: style: The scope of the variable 'i' can be reduced. [variableScope]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                                      ^
_src\GTT\Range\gttlib.c:400:41: style: The scope of the variable 'err_close' can be reduced. [variableScope]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                                        ^
_src\GTT\Range\gttlib.c:401:12: style: The scope of the variable 'tmpgt' can be reduced. [variableScope]
   char    tmpgt[GTLEN+1];
           ^
_src\GTT\Range\gttlib.c:175:49: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
 short    sCount, err = 0, RecCount,i,err_close = 0;
                                                ^
_src\GTT\Range\gttlib.c:240:13: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
  err_close = (short) MBE_FILE_CLOSE_(FGTT_Tree);
            ^
_src\GTT\Range\gttlib.c:400:51: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
   short    sCount, err = 0, RecCount,i,err_close = 0;
                                                  ^
_src\GTT\Range\gttlib.c:474:14: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
   err_close = (short) MBE_FILE_CLOSE_(FGTT_List);
             ^
_src\GTT\Range\gttlib.c:501:13: style: Variable 'elemtosort' is assigned a value that is never used. [unreadVariable]
 elemtosort = currelem = 0;
            ^
_src\GTT\Range\gttlib.c:501:24: style: Variable 'currelem' is assigned a value that is never used. [unreadVariable]
 elemtosort = currelem = 0;
                       ^
_src\GTT\Range\gttlib.c:527:13: style: Variable 'elemtosort' is assigned a value that is never used. [unreadVariable]
 elemtosort = currelem = 0;
            ^
_src\GTT\Range\gttlib.c:527:24: style: Variable 'currelem' is assigned a value that is never used. [unreadVariable]
 elemtosort = currelem = 0;
                       ^
_src\GTT\Range\gttlib.c:623:16: style: Variable 'errg' is assigned a value that is never used. [unreadVariable]
    if( ( errg = MBE_FILE_OPEN_( (char *) filename.text,
               ^
_src\GTT\Range\gttlib.c:684:18: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
 if( ( err_close = MBE_FILE_CLOSE_(filenumber) ) == 0)
                 ^
_src\GTT\Range\gttlib.c:345:11: style: Variable 'keylen' is reassigned a value before the old one has been used. [redundantAssignment]
   keylen = (short)strlen(mgt);
          ^
_src\GTT\Range\gttlib.c:339:9: note: keylen is assigned
 keylen = -1;
        ^
_src\GTT\Range\gttlib.c:345:11: note: keylen is overwritten
   keylen = (short)strlen(mgt);
          ^
_src\GTT\Range\gttlib.c:332:9: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  i,j,found,keylen;
        ^
_src\GTT\Range\gttlib.c:332:11: style: The scope of the variable 'j' can be reduced. [variableScope]
 short  i,j,found,keylen;
          ^
_src\GTT\Range\gttlib.c:359:11: style: Variable 'iEnd' is assigned a value that is never used. [unreadVariable]
     iEnd = iFirst = i;   /* riga beccata in pieno! */
          ^
_src\GTT\Range\gttlib.c:70:41: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
   short    i,sCount, err = 0,err_close = 0,RecCount;
                                        ^
_src\GTT\Range\gttlib.c:154:17: style: Variable 'err_close' is assigned a value that is never used. [unreadVariable]
      err_close = (short) MBE_FILE_CLOSE_(FGTT_Tree);
                ^
_src\GTT\Range\gttserv.c:252:20: error: syntax error [syntaxError]
          &i_maxlen, );
                   ^
_src\LTE\ctxl.c:45:11: style: The scope of the variable 'i_err' can be reduced. [variableScope]
    short i_err = 0;
          ^
_src\LTE\ctxl.c:125:11: style: The scope of the variable 'i_err' can be reduced. [variableScope]
    short i_err  = 0;
          ^
_src\LTE\ctxl.c:45:17: style: Variable 'i_err' is assigned a value that is never used. [unreadVariable]
    short i_err = 0;
                ^
_src\LTE\ctxl.c:125:18: style: Variable 'i_err' is assigned a value that is never used. [unreadVariable]
    short i_err  = 0;
                 ^
_src\LTE\meid_to_esn.c:40:15: error: Array 'suffix[5]' accessed at index 5, which is out of bounds. [arrayIndexOutOfBounds]
        suffix[i] = returnDigit(suffix[i]);
              ^
_src\LTE\meid_to_esn.c:39:16: note: Assuming that condition 'i<6' is not redundant
    for (i=0; i<6; i++)
               ^
_src\LTE\meid_to_esn.c:40:15: note: Array index out of bounds
        suffix[i] = returnDigit(suffix[i]);
              ^
_src\LTE\meid_to_esn.c:47:29: error: Array 'suffix[5]' accessed at index 5, which is out of bounds. [arrayIndexOutOfBounds]
    convertedSuffix = suffix[5];
                            ^
_src\LTE\s6aevt.c:59:12: style: The scope of the variable 'i_idx' can be reduced. [variableScope]
    short  i_idx;
           ^
_src\LTE\s6aevt.c:60:11: style: The scope of the variable 'i_write_ems' can be reduced. [variableScope]
    short i_write_ems = 0;
          ^
_src\LTE\s6aevt.c:61:11: style: The scope of the variable 'ac_out' can be reduced. [variableScope]
    char  ac_out[256];
          ^
_src\LTE\s6aevt.c:62:13: style: The scope of the variable 'ap' can be reduced. [variableScope]
    va_list ap;
            ^
_src\LTE\s6aevt.c:124:19: style: Variable 'i_write_ems' is assigned a value that is never used. [unreadVariable]
      i_write_ems = 0;
                  ^
_src\LTE\s6afunc.c:294:19: style: Expression is always true because 'else if' condition is opposite to previous condition at line 292. [multiCondition]
  else if( i_diff > 3000000L ) // > 3"
                  ^
_src\LTE\s6afunc.c:292:19: note: first condition
  else if( i_diff <= 3000000L ) // <= 3"
                  ^
_src\LTE\s6afunc.c:294:19: note: else if condition is opposite to first condition
  else if( i_diff > 3000000L ) // > 3"
                  ^
_src\LTE\s6afunc.c:137:4: error: Common realloc mistake: 'ext_string' nulled but not freed upon failure [memleakOnRealloc]
   ext_string = (unsigned char *) realloc (ext_string, ++mem * sizeof (unsigned char));
   ^
_src\LTE\s6afunc.c:143:3: error: Common realloc mistake: 'ext_string' nulled but not freed upon failure [memleakOnRealloc]
  ext_string = (unsigned char *) realloc (ext_string, ++mem * sizeof (unsigned char));
  ^
_src\LTE\s6afunc.c:55:10: style: The scope of the variable 'i' can be reduced. [variableScope]
 short   i;
         ^
_src\LTE\s6afunc.c:86:7: style: The scope of the variable 'ac_wrk_str' can be reduced. [variableScope]
 char ac_wrk_str[64];
      ^
_src\LTE\s6afunc.c:87:8: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char *wrk_str;
       ^
_src\LTE\s6afunc.c:172:29: style: The scope of the variable 'i_err' can be reduced. [variableScope]
    short                   i_err;
                            ^
_src\LTE\s_diam_tfs.c:2961:45: error: syntax error [syntaxError]
                                   &i_maxlen, );
                                            ^
_src\MAP\arpdb.c:208:11: style: Variable 'i_err' is assigned a value that is never used. [unreadVariable]
    i_err = 0;
          ^
_src\MAP\des.c:230:32: style: The scope of the variable 'NumDeBits' can be reduced. [variableScope]
 int i, j, LngEnOcts, NextOct, NumDeBits;
                               ^
_src\MAP\des.c:267:7: style: The scope of the variable 'Aux' can be reduced. [variableScope]
 BYTE Aux, Aux1, Aux2;
      ^
_src\MAP\des.c:267:12: style: The scope of the variable 'Aux1' can be reduced. [variableScope]
 BYTE Aux, Aux1, Aux2;
           ^
_src\MAP\des.c:267:18: style: The scope of the variable 'Aux2' can be reduced. [variableScope]
 BYTE Aux, Aux1, Aux2;
                 ^
_src\MAP\des.c:392:7: style: The scope of the variable 'Aux1' can be reduced. [variableScope]
 BYTE Aux1, Aux2;
      ^
_src\MAP\des.c:392:13: style: The scope of the variable 'Aux2' can be reduced. [variableScope]
 BYTE Aux1, Aux2;
            ^
_src\MAP\des.c:314:31: style: Parameter 'M' can be declared with const [constParameter]
void Matrice (BYTE *Mr, BYTE *M, BYTE *Mat, int LngEnBits)
                              ^
_src\MAP\des.c:204:31: style: Parameter 'M' can be declared with const [constParameter]
void Dilate ( BYTE *Md, BYTE *M, int LngEnBits)
                              ^
_src\MAP\des.c:371:37: style: Parameter 'Source' can be declared with const [constParameter]
BYTE *OuExclusif (BYTE *Dest, BYTE *Source, int LngEnBits)
                                    ^
_src\MAP\des.c:314:40: style: Parameter 'Mat' can be declared with const [constParameter]
void Matrice (BYTE *Mr, BYTE *M, BYTE *Mat, int LngEnBits)
                                       ^
_src\MAP\funcipc.c:70:29: style: The scope of the variable 'i_err' can be reduced. [variableScope]
    short                   i_err;
                            ^
_src\MAP\funcipc.c:131:29: style: The scope of the variable 'i_err' can be reduced. [variableScope]
    short                   i_err;
                            ^
_src\MAP\lu.c:142:45: warning: Logical disjunction always evaluates to true: EXPR >= 3 || EXPR <= 8. [incorrectLogicOperator]
    ( cmpnt->SEL_Entry[offset + 1].len >= 3 || cmpnt->SEL_Entry[offset + 1].len <= 8 ) ) )
                                            ^
_src\MAP\lu.c:134:10: style: The scope of the variable 'offset' can be reduced. [variableScope]
    int  offset = 0;
         ^
_src\MAP\lu.c:172:18: style: The scope of the variable 'origin_level' can be reduced. [variableScope]
 unsigned char   origin_level = 3;
                 ^
_src\MAP\tfsdb.c:211:15: style: Variable 'i_ret' is reassigned a value before the old one has been used. [redundantAssignment]
        i_ret = 1;
              ^
_src\MAP\tfsdb.c:99:13: note: i_ret is assigned
    i_ret   = 1;
            ^
_src\MAP\tfsdb.c:211:15: note: i_ret is overwritten
        i_ret = 1;
              ^
_src\MAP\tfsdb.c:211:15: style: Variable 'i_ret' is reassigned a value before the old one has been used. [redundantAssignment]
        i_ret = 1;
              ^
_src\MAP\tfsdb.c:166:13: note: i_ret is assigned
      i_ret = 1;
            ^
_src\MAP\tfsdb.c:211:15: note: i_ret is overwritten
        i_ret = 1;
              ^
_src\MAP\tfsdb.c:94:11: style: The scope of the variable 'i_cnt' can be reduced. [variableScope]
    int   i_cnt;
          ^
_src\MAP\tfsdb.c:95:11: style: The scope of the variable 'ac_line' can be reduced. [variableScope]
    char  ac_line[255];
          ^
_src\MAP\tfsevt.c:65:12: style: The scope of the variable 'i_idx' can be reduced. [variableScope]
    short  i_idx;
           ^
_src\MAP\tfsevt.c:66:11: style: The scope of the variable 'i_write_ems' can be reduced. [variableScope]
    short i_write_ems = 0;
          ^
_src\MAP\tfsevt.c:67:11: style: The scope of the variable 'ac_out' can be reduced. [variableScope]
    char  ac_out[256];
          ^
_src\MAP\tfsevt.c:68:13: style: The scope of the variable 'ap' can be reduced. [variableScope]
    va_list ap;
            ^
_src\MAP\tfsevt.c:132:19: style: Variable 'i_write_ems' is assigned a value that is never used. [unreadVariable]
      i_write_ems = 0;
                  ^
_src\MAP\tfsfunc.c:2486:34: error: syntax error [syntaxError]
        i_err = L_SS7_PC_STATUS( ,
                                 ^
_src\MAP\tfsin.c:2367:45: error: syntax error [syntaxError]
                                   &i_maxlen, );
                                            ^
_src\MAP\tfsout.c:1630:45: error: syntax error [syntaxError]
                                   &i_maxlen, );
                                            ^
_src\MAP\tfsrl.c:1103:45: error: syntax error [syntaxError]
                                   &i_maxlen, );
                                            ^
_src\MAP\tfsstat.c:65:33: style: Expression is always true because 'else if' condition is opposite to previous condition at line 63. [multiCondition]
                else if( i_diff > 3000000 ) // > 3"
                                ^
_src\MAP\tfsstat.c:63:33: note: first condition
                else if( i_diff <= 3000000 ) // <= 3"
                                ^
_src\MAP\tfsstat.c:65:33: note: else if condition is opposite to first condition
                else if( i_diff > 3000000 ) // > 3"
                                ^
_src\MAP\tfsstat.c:97:33: style: Expression is always true because 'else if' condition is opposite to previous condition at line 95. [multiCondition]
                else if( i_diff > 3000000 ) // > 3"
                                ^
_src\MAP\tfsstat.c:95:33: note: first condition
                else if( i_diff <= 3000000 ) // <= 3"
                                ^
_src\MAP\tfsstat.c:97:33: note: else if condition is opposite to first condition
                else if( i_diff > 3000000 ) // > 3"
                                ^
_src\MAP\tfsstat.c:129:33: style: Expression is always true because 'else if' condition is opposite to previous condition at line 127. [multiCondition]
                else if( i_diff > 3000000 ) // > 3"
                                ^
_src\MAP\tfsstat.c:127:33: note: first condition
                else if( i_diff <= 3000000 ) // <= 3"
                                ^
_src\MAP\tfsstat.c:129:33: note: else if condition is opposite to first condition
                else if( i_diff > 3000000 ) // > 3"
                                ^
_src\avltree-new.c:1042:9: style: Condition 'node' is always true [knownConditionTrueFalse]
    if (node)  n++;
        ^
_src\avltree-new.c:72:11: style: struct member 'avltree::at_nodes' is never used. [unusedStructMember]
    int   at_nodes; /* number of nodes in the tree */
          ^
_src\avltree-new.c:73:11: style: struct member 'avltree::at_copy_keys' is never used. [unusedStructMember]
    int   at_copy_keys; /* should we copy each key ? */
          ^
_src\avltree-new.c:74:11: style: struct member 'avltree::at_key_size' is never used. [unusedStructMember]
    int   at_key_size; /* if yes, what is the key size */
          ^
_src\avltree-new.c:76:22: style: struct member 'avltree::root' is never used. [unusedStructMember]
    struct avlnode * root;
                     ^
_src\avltree-new.c:77:22: style: struct member 'avltree::current' is never used. [unusedStructMember]
    struct avlnode * current; /* to keep track of currencies  */
                     ^
_src\avltree-new.c:697:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(AVLNULL);
 ^
_src\avltree-new.c:705:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(  LEFT(node));
 ^
_src\avltree-new.c:712:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(  RIGHT(node));
 ^
_src\avltree-new.c:1736:19: style: Variable 'DUMMY42' is assigned a value that is never used. [unreadVariable]
    short DUMMY42 = 42;
                  ^
_src\avltree-ori.c:1042:9: style: Condition 'node' is always true [knownConditionTrueFalse]
    if (node)  n++;
        ^
_src\avltree-ori.c:72:11: style: struct member 'avltree::at_nodes' is never used. [unusedStructMember]
    int   at_nodes; /* number of nodes in the tree */
          ^
_src\avltree-ori.c:73:11: style: struct member 'avltree::at_copy_keys' is never used. [unusedStructMember]
    int   at_copy_keys; /* should we copy each key ? */
          ^
_src\avltree-ori.c:74:11: style: struct member 'avltree::at_key_size' is never used. [unusedStructMember]
    int   at_key_size; /* if yes, what is the key size */
          ^
_src\avltree-ori.c:76:22: style: struct member 'avltree::root' is never used. [unusedStructMember]
    struct avlnode * root;
                     ^
_src\avltree-ori.c:77:22: style: struct member 'avltree::current' is never used. [unusedStructMember]
    struct avlnode * current; /* to keep track of currencies  */
                     ^
_src\avltree-ori.c:697:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(AVLNULL);
 ^
_src\avltree-ori.c:705:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(  LEFT(node));
 ^
_src\avltree-ori.c:712:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(  RIGHT(node));
 ^
_src\avltree.c:1042:9: style: Condition 'node' is always true [knownConditionTrueFalse]
    if (node)  n++;
        ^
_src\avltree.c:72:11: style: struct member 'avltree::at_nodes' is never used. [unusedStructMember]
    int   at_nodes; /* number of nodes in the tree */
          ^
_src\avltree.c:73:11: style: struct member 'avltree::at_copy_keys' is never used. [unusedStructMember]
    int   at_copy_keys; /* should we copy each key ? */
          ^
_src\avltree.c:74:11: style: struct member 'avltree::at_key_size' is never used. [unusedStructMember]
    int   at_key_size; /* if yes, what is the key size */
          ^
_src\avltree.c:76:22: style: struct member 'avltree::root' is never used. [unusedStructMember]
    struct avlnode * root;
                     ^
_src\avltree.c:77:22: style: struct member 'avltree::current' is never used. [unusedStructMember]
    struct avlnode * current; /* to keep track of currencies  */
                     ^
_src\avltree.c:697:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(AVLNULL);
 ^
_src\avltree.c:705:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(  LEFT(node));
 ^
_src\avltree.c:712:2: style: Variable 'parent' is assigned a value that is never used. [unreadVariable]
 BIND(  RIGHT(node));
 ^
_src\avltree.c:1736:19: style: Variable 'DUMMY42' is assigned a value that is never used. [unreadVariable]
    short DUMMY42 = 42;
                  ^
_src\gtt_lte_hssdb.c:153:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[128];
      ^
_src\gtt_lte_hssdb.c:154:7: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char stringa[64];
      ^
_src\gtt_lte_hssdb.c:157:10: style: The scope of the variable 'conta' can be reduced. [variableScope]
 short   conta = 0;
         ^
_src\gtt_lte_hssdb.c:159:10: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int     cc;
         ^
_src\gtt_lte_hssdb.c:160:12: style: The scope of the variable 'LOCAL_TS' can be reduced. [variableScope]
 long long LOCAL_TS;
           ^
_src\gtt_lte_hssdb.c:304:9: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char   sTmp[180];
        ^
_src\gtt_lte_hssdb.c:305:7: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char stringa[64];
      ^
_src\gtt_lte_hssdb.c:309:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\gtt_lte_hssdb.c:310:12: style: The scope of the variable 'LOCAL_TS' can be reduced. [variableScope]
 long long LOCAL_TS;
           ^
_src\gtt_lte_hssdb.c:467:9: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char   sTmp[128];
        ^
_src\gtt_lte_hssdb.c:469:17: style: The scope of the variable 'usConta' can be reduced. [variableScope]
 unsigned short usConta = 0;
                ^
_src\gtt_lte_hssdb.c:471:9: style: The scope of the variable 'tuttoOK' can be reduced. [variableScope]
 short  tuttoOK = 1;
        ^
_src\gtt_lte_hssdb.c:473:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\gtt_lte_hssdb.c:474:14: style: The scope of the variable 'llAdesso' can be reduced. [variableScope]
 long long   llAdesso;
             ^
_src\gtt_lte_hssdb.c:656:10: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int     cc;
         ^
_src\gtt_lte_hssdb.c:745:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[128];
       ^
_src\gtt_lte_imsidb.c:161:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[128];
      ^
_src\gtt_lte_imsidb.c:162:7: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char stringa[64];
      ^
_src\gtt_lte_imsidb.c:167:10: style: The scope of the variable 'conta' can be reduced. [variableScope]
 short   conta = 0;
         ^
_src\gtt_lte_imsidb.c:168:8: style: The scope of the variable 'MAX_PER_PAGE' can be reduced. [variableScope]
 short MAX_PER_PAGE = 50;
       ^
_src\gtt_lte_imsidb.c:170:10: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int     cc;
         ^
_src\gtt_lte_imsidb.c:171:12: style: The scope of the variable 'LOCAL_TS' can be reduced. [variableScope]
 long long LOCAL_TS;
           ^
_src\gtt_lte_imsidb.c:382:9: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char   sTmp[180];
        ^
_src\gtt_lte_imsidb.c:384:7: style: The scope of the variable 'acLunghezze' can be reduced. [variableScope]
 char acLunghezze[20];
      ^
_src\gtt_lte_imsidb.c:385:10: style: The scope of the variable 'trovato' can be reduced. [variableScope]
 short   trovato=0, i;
         ^
_src\gtt_lte_imsidb.c:385:21: style: The scope of the variable 'i' can be reduced. [variableScope]
 short   trovato=0, i;
                    ^
_src\gtt_lte_imsidb.c:389:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\gtt_lte_imsidb.c:524:9: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char   sTmp[180];
        ^
_src\gtt_lte_imsidb.c:527:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\gtt_lte_imsidb.c:638:9: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char   sTmp[128];
        ^
_src\gtt_lte_imsidb.c:640:9: style: The scope of the variable 'tuttoOK' can be reduced. [variableScope]
 short  tuttoOK = 1;
        ^
_src\gtt_lte_imsidb.c:642:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\gtt_lte_imsidb.c:643:13: style: The scope of the variable 'llAdesso' can be reduced. [variableScope]
 long long  llAdesso;
            ^
_src\gtt_lte_imsidb.c:797:9: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char   sTmp[128];
        ^
_src\gtt_lte_imsidb.c:802:22: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  tuttoOK = 1, i;
                     ^
_src\gtt_lte_imsidb.c:804:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\gtt_lte_imsidb.c:982:9: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char   sTmp[128];
        ^
_src\gtt_lte_imsidb.c:989:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\gtt_lte_imsidb.c:1111:8: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char  stringa[64];
       ^
_src\gtt_lte_imsidb.c:1112:12: style: The scope of the variable 'LOCAL_TS' can be reduced. [variableScope]
 long long LOCAL_TS;
           ^
_src\gtt_lte_imsidb.c:1369:9: style: The scope of the variable 'errO' can be reduced. [variableScope]
 int    errO;
        ^
_src\gtt_lte_imsidb.c:1439:8: style: The scope of the variable 'trovato' can be reduced. [variableScope]
 short trovato = 0;
       ^
_src\gtt_lte_imsidb.c:1440:17: style: The scope of the variable 'conta' can be reduced. [variableScope]
 unsigned short conta=0;
                ^
_src\gtt_lte_imsidb.c:1524:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[128];
       ^
_src\gtt_lte_imsidb.c:821:37: error: Uninitialized variable: range_end [uninitvar]
 range_len = (unsigned short)strlen(range_end);
                                    ^
_src\gtt_lte_imsidb.c:1006:37: error: Uninitialized variable: range_end [uninitvar]
 range_len = (unsigned short)strlen(range_end);
                                    ^
_src\gtt_lte_imsidb.c:1297:9: style: Variable 'cc' is assigned a value that is never used. [unreadVariable]
     cc = MBE_WRITEUPDATEX( handle, (char *)&dbrec, (short)sizeof(IMSI_HEAD_RECORD) );
        ^
_src\gtt_lte_imsidb.c:1345:8: style: Variable 'cc' is assigned a value that is never used. [unreadVariable]
    cc = MBE_WRITEUPDATEX( handle, (char *)&dbrec, (short)sizeof(IMSI_HEAD_RECORD) );
       ^
_src\gtt_lte_imsidb.c:1357:7: style: Variable 'cc' is assigned a value that is never used. [unreadVariable]
   cc = MBE_WRITEX( handle, (char *)&dbrec, (short)sizeof(IMSI_HEAD_RECORD) );
      ^
_src\gtt_lte_utility.c:190:2: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'short'. [invalidPrintfArgType_uint]
 sprintf( stringa,"%04u/%02u/%02u %02u:%02u:%02u",
 ^
_src\gtt_lte_utility.c:190:2: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'short'. [invalidPrintfArgType_uint]
 sprintf( stringa,"%04u/%02u/%02u %02u:%02u:%02u",
 ^
_src\gtt_lte_utility.c:190:2: warning: %u in format string (no. 3) requires 'unsigned int' but the argument type is 'short'. [invalidPrintfArgType_uint]
 sprintf( stringa,"%04u/%02u/%02u %02u:%02u:%02u",
 ^
_src\gtt_lte_utility.c:190:2: warning: %u in format string (no. 4) requires 'unsigned int' but the argument type is 'short'. [invalidPrintfArgType_uint]
 sprintf( stringa,"%04u/%02u/%02u %02u:%02u:%02u",
 ^
_src\gtt_lte_utility.c:190:2: warning: %u in format string (no. 5) requires 'unsigned int' but the argument type is 'short'. [invalidPrintfArgType_uint]
 sprintf( stringa,"%04u/%02u/%02u %02u:%02u:%02u",
 ^
_src\gtt_lte_utility.c:190:2: warning: %u in format string (no. 6) requires 'unsigned int' but the argument type is 'short'. [invalidPrintfArgType_uint]
 sprintf( stringa,"%04u/%02u/%02u %02u:%02u:%02u",
 ^
_src\gtt_lte_utility.c:36:6: warning: Either the condition 'found' is redundant or there is possible null pointer dereference: found. [nullPointerRedundantCheck]
    *found = SSP_FALSE;
     ^
_src\gtt_lte_utility.c:114:14: note: Assuming that condition 'found' is not redundant
        if ( found )
             ^
_src\gtt_lte_utility.c:36:6: note: Null pointer dereference
    *found = SSP_FALSE;
     ^
_src\gtt_lte_utility.c:28:13: style: The scope of the variable 'section_name_with_brackets' can be reduced. [variableScope]
    char    section_name_with_brackets[SSP_BUFFER_LEN];
            ^
_src\gtt_lte_utility.c:29:13: style: The scope of the variable 'entry_name_with_equal' can be reduced. [variableScope]
    char    entry_name_with_equal[SSP_BUFFER_LEN];
            ^
_src\gtt_lte_utility.c:30:13: style: The scope of the variable 'line' can be reduced. [variableScope]
    char    line[SSP_BUFFER_LEN];
            ^
_src\test_mts_send.c:246:91: error: syntax error [syntaxError]
    PROCESSHANDLE_DECOMPOSE_( i_proch,&i_my_cpu,,,,,,ac_my_process_name,i_maxlen,&i_maxlen,);
                                                                                          ^
_src\trsclean.c:238:78: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch,,,,,,,ac_my_process_name,i_maxlen,&i_maxlen,);
                                                                             ^
_src\trscpy.c:551:78: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch,,,,,,,ac_my_process_name,i_maxlen,&i_maxlen,);
                                                                             ^
_src\trseur.c:338:78: style: Redundant condition: t_if4_record.c_retry. '!A || (A && B)' is equivalent to '!A || B' [redundantCondition]
  if(memcmp(t_if4_record.imsi,&ac_range[3],2) <= 0 && (!t_if4_record.c_retry ||
                                                                             ^
_src\trseur.c:93:8: style: The scope of the variable 'err' can be reduced. [variableScope]
 short err = 0,i;
       ^
_src\trseur.c:131:8: style: The scope of the variable 'buf' can be reduced. [variableScope]
 char *buf="";
       ^
_src\trseur.c:173:29: style: The scope of the variable 'ret' can be reduced. [variableScope]
 short   i_len_rec_update=0,ret;
                            ^
_src\trseur.c:174:10: style: The scope of the variable 'ac_text' can be reduced. [variableScope]
 char   *ac_text = "";
         ^
_src\trseur.c:436:19: style: The scope of the variable 's_https' can be reduced. [variableScope]
 t_psend_http_if *s_https;
                  ^
_src\trseur.c:551:26: style: The scope of the variable 'rate' can be reduced. [variableScope]
 short ret = SSP_SUCCESS,rate = 0;
                         ^
_src\trseur.c:554:7: style: The scope of the variable 'ac_pref_log' can be reduced. [variableScope]
 char ac_pref_log[10];    //prefisso file stat
      ^
_src\trseur.c:468:40: style: Parameter 'signal_p' can be declared with const [constParameter]
short HandleTimeout(IO_SYSMSG_TIMEOUT *signal_p)
                                       ^
_src\trseur.c:214:27: style: Parameter 'fdes' can be declared with const [constParameter]
short RxMsgPathmon(short *fdes,short rcv_cnt,long l_tag)
                          ^
_src\trseur.c:282:30: style: Parameter 'fdes' can be declared with const [constParameter]
short CheckErrPathmon(short *fdes,short rc,long l_tag)
                             ^
_src\trseur.c:93:12: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
 short err = 0,i;
           ^
_src\trseur.c:551:31: style: Variable 'rate' is assigned a value that is never used. [unreadVariable]
 short ret = SSP_SUCCESS,rate = 0;
                              ^
_src\trsflt.c:703:91: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch, &i_my_cpu,,,,,, ac_my_process_name, i_maxlen, &i_maxlen,);
                                                                                          ^
_src\trslog.c:220:78: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch,,,,,,,ac_my_process_name,i_maxlen,&i_maxlen,);
                                                                             ^
_src\trsmfd_sql.c:786:78: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch,,,,,,,ac_my_process_name,i_maxlen,&i_maxlen,);
                                                                             ^
_src\trsmgr-ori.c:3494:44: error: syntax error [syntaxError]
   exec sql declare usr_type_cursor cursor for usr_type_statement;
                                           ^
_src\trsmgr.c:3496:44: error: syntax error [syntaxError]
   exec sql declare usr_type_cursor cursor for usr_type_statement;
                                           ^
_src\trsnotifier.c:243:4: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
 if((retJ = jsmn_parseV(data,strlen(data)) > 0)){
   ^
_src\trsnotifier.c:394:92: style: Redundant condition: t_cc_change_record.i_retry. '!A || (A && B)' is equivalent to '!A || B' [redundantCondition]
  if(memcmp(t_cc_change_record.msisdn,&ac_range[3],2) <= 0 && (!t_cc_change_record.i_retry ||
                                                                                           ^
_src\trsnotifier.c:80:8: style: The scope of the variable 'err' can be reduced. [variableScope]
 short err = 0,i;
       ^
_src\trsnotifier.c:190:29: style: The scope of the variable 'ret' can be reduced. [variableScope]
 short   i_len_rec_update=0,ret;
                            ^
_src\trsnotifier.c:191:10: style: The scope of the variable 'ac_text' can be reduced. [variableScope]
 char   *ac_text = "";
         ^
_src\trsnotifier.c:514:19: style: The scope of the variable 's_https' can be reduced. [variableScope]
 t_psend_http_if *s_https;
                  ^
_src\trsnotifier.c:277:27: style: Parameter 'fdes' can be declared with const [constParameter]
short RxMsgPathmon(short *fdes,short rcv_cnt,long l_tag)
                          ^
_src\trsnotifier.c:330:30: style: Parameter 'fdes' can be declared with const [constParameter]
short CheckErrPathmon(short *fdes,short rc,long l_tag)
                             ^
_src\trsnotifier.c:546:40: style: Parameter 'signal_p' can be declared with const [constParameter]
short HandleTimeout(IO_SYSMSG_TIMEOUT *signal_p)
                                       ^
_src\trsnotifier.c:80:12: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
 short err = 0,i;
           ^
_src\trsnotifier.c:191:18: style: Variable 'ac_text' is assigned a value that is never used. [unreadVariable]
 char   *ac_text = "";
                 ^
_src\trsnotifier.c:698:31: style: Variable 'rate' is assigned a value that is never used. [unreadVariable]
 short ret = SSP_SUCCESS,rate = 0;
                              ^
_src\trsplmn.c:135:78: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch,,,,,,,ac_my_process_name,i_maxlen,&i_maxlen,);
                                                                             ^
_src\trssincs.c:375:78: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch,,,,,,,ac_my_process_name,i_maxlen,&i_maxlen,);
                                                                             ^
_src\trstrg.c:339:91: error: syntax error [syntaxError]
 PROCESSHANDLE_DECOMPOSE_(i_proch, &i_my_cpu,,,,,, ac_my_process_name, i_maxlen, &i_maxlen,);
                                                                                          ^
_src\web_apply.c:281:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</font></td>", acData_PS_Apply+6,
  ^
_src\web_apply.c:301:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</td>", gDataApply_PS+6,
  ^
_src\web_apply.c:317:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</td>", acData_Soglie_Apply+6,
  ^
_src\web_apply.c:337:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</font></td>", gDataApply_ST+6,
  ^
_src\web_apply.c:363:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</td>", acData_OP+6,
  ^
_src\web_apply.c:401:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</td>", acData_PS+6,
  ^
_src\web_apply.c:420:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</td>", acData_Soglie+6,
  ^
_src\web_apply.c:439:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</td>", acData_Device+6,
  ^
_src\web_apply.c:458:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("%.2s/%.2s/%.4s %.2s:%.2s</td>", acData_HomeNet+6,
  ^
_src\web_apply.c:503:3: warning: printf format string requires 5 parameters but 6 are given. [wrongPrintfScanfArgNum]
  printf("<TD align='center' id='fontblue'>Apply Steering already done: %.2s/%.2s/%.4s %.2s:%.2s</td>", acData_Soglie_Apply+6,
  ^
_src\web_apply.c:67:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_apply.c:539:12: style: The scope of the variable 'lJTSLoc' can be reduced. [variableScope]
 long long lJTSLoc = 0;
           ^
_src\web_apply.c:641:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_apply.c:642:12: style: The scope of the variable 'lJTS' can be reduced. [variableScope]
 long long lJTS = 0;
           ^
_src\web_apply.c:772:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_apply.c:838:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_apply.c:839:12: style: The scope of the variable 'lJTS' can be reduced. [variableScope]
 long long lJTS = 0;
           ^
_src\web_apply.c:899:9: style: The scope of the variable 'nLenKey' can be reduced. [variableScope]
 short  nLenKey = 4;
        ^
_src\web_apply.c:900:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_apply.c:686:12: warning: Size of pointer 'acData' used instead of size of its data. [pointerSize]
    memset(acData, 0, sizeof(acData));
           ^
_src\web_apply.c:883:12: warning: Size of pointer 'acData' used instead of size of its data. [pointerSize]
    memset(acData, 0, sizeof(acData));
           ^
_src\web_apply.c:950:12: warning: Size of pointer 'acData' used instead of size of its data. [pointerSize]
    memset(acData, 0, sizeof(acData));
           ^
_src\web_apply.c:539:20: style: Variable 'lJTSLoc' is assigned a value that is never used. [unreadVariable]
 long long lJTSLoc = 0;
                   ^
_src\web_apply.c:642:17: style: Variable 'lJTS' is assigned a value that is never used. [unreadVariable]
 long long lJTS = 0;
                ^
_src\web_apply.c:839:17: style: Variable 'lJTS' is assigned a value that is never used. [unreadVariable]
 long long lJTS = 0;
                ^
_src\web_apply.c:901:17: style: Variable 'lJTS' is assigned a value that is never used. [unreadVariable]
 long long lJTS = 0;
                ^
_src\web_check_len_UTF8.c:88:6: style: The scope of the variable 'msgtotal' can be reduced. [variableScope]
 int msgtotal = 0;
     ^
_src\web_check_len_UTF8.c:91:17: style: The scope of the variable 'sourceEnd' can be reduced. [variableScope]
 unsigned char *sourceEnd;
                ^
_src\web_check_len_UTF8.c:93:17: style: The scope of the variable 'targetEnd' can be reduced. [variableScope]
 unsigned char *targetEnd;
                ^
_src\web_check_len_UTF8.c:405:17: style: The scope of the variable 'ci' can be reduced. [variableScope]
 unsigned short ci, co;
                ^
_src\web_check_len_UTF8.c:161:63: style: Parameter 'sourceEnd' can be declared with const [constParameter]
ConversionResult ConvertUTF8toUTF16(UTF8** sourceStart, UTF8* sourceEnd,
                                                              ^
_src\web_check_len_UTF8.c:83:13: style: Variable 'msglen' is assigned a value that is never used. [unreadVariable]
 int msglen = 0;
            ^
_src\web_check_len_UTF8.c:85:18: style: Variable 'i_bitoffset' is assigned a value that is never used. [unreadVariable]
 int i_bitoffset = 0;
                 ^
_src\web_check_len_UTF8.c:86:20: style: Variable 'i_udhl_septet' is assigned a value that is never used. [unreadVariable]
 int i_udhl_septet = 0;
                   ^
_src\web_check_len_UTF8.c:88:15: style: Variable 'msgtotal' is assigned a value that is never used. [unreadVariable]
 int msgtotal = 0;
              ^
_src\web_check_len_UTF8.c:454:7: style: Variable 'uret' is assigned a value that is never used. [unreadVariable]
 uret = Encode_UTF8_No_SMS(msg_txt,  &STATUS);
      ^
_src\web_check_len_UTF8.c:449:7: style: Unused variable: sTmp [unusedVariable]
 char sTmp[40];
      ^
_src\web_country.c:62:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_country.c:192:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_country.c:194:8: style: The scope of the variable 'lRecord' can be reduced. [variableScope]
 long  lRecord = 0;
       ^
_src\web_country.c:345:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
 short  rc = 0;
        ^
_src\web_country.c:813:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_country.c:824:20: warning: Size of pointer 'acPaese' used instead of size of its data. [pointerSize]
 memcpy(ac_Chiave, acPaese, sizeof(acPaese));
                   ^
_src\web_country.c:345:12: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 short  rc = 0;
           ^
_src\web_country_group.c:1044:8: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
    rc = MBE_READLOCKX( handleOP_rem, (char *) &record_operatori_tmp, (short) sizeof(t_ts_oper_record) );
       ^
_src\web_country_group.c:1042:8: note: rc is assigned
    rc = MBE_FILE_SETKEY_( handleOP_rem, record_operatori.paese,
       ^
_src\web_country_group.c:1044:8: note: rc is overwritten
    rc = MBE_READLOCKX( handleOP_rem, (char *) &record_operatori_tmp, (short) sizeof(t_ts_oper_record) );
       ^
_src\web_country_group.c:67:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_country_group.c:189:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_country_group.c:194:8: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char  stringa[200];
       ^
_src\web_country_group.c:195:8: style: The scope of the variable 'cColore' can be reduced. [variableScope]
 char  cColore = 'b';
       ^
_src\web_country_group.c:196:8: style: The scope of the variable 'acTRClass' can be reduced. [variableScope]
 char  acTRClass[20];
       ^
_src\web_country_group.c:197:8: style: The scope of the variable 'acTDClass' can be reduced. [variableScope]
 char  acTDClass[20];
       ^
_src\web_country_group.c:198:8: style: The scope of the variable 'acGrpdecod' can be reduced. [variableScope]
 char  acGrpdecod[100];
       ^
_src\web_country_group.c:200:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_country_group.c:201:8: style: The scope of the variable 'nCambio' can be reduced. [variableScope]
 long  nCambio = 0;
       ^
_src\web_country_group.c:392:9: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char  *wrk_str;
        ^
_src\web_country_group.c:541:9: style: The scope of the variable 'pTmp' can be reduced. [variableScope]
 char  *pTmp;
        ^
_src\web_country_group.c:551:8: style: The scope of the variable 'nRec' can be reduced. [variableScope]
 long  nRec = 0;
       ^
_src\web_country_group.c:751:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_country_group.c:1112:8: style: The scope of the variable 'sTmp2' can be reduced. [variableScope]
 char  sTmp2[100];
       ^
_src\web_country_group.c:1114:8: style: The scope of the variable 'lRecord' can be reduced. [variableScope]
 long  lRecord = 0;
       ^
_src\web_country_group.c:1417:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta = 0;
        ^
_src\web_country_group.c:1419:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_country_group.c:1420:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_country_group.c:1499:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta = 0;
        ^
_src\web_country_group.c:1500:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_country_group.c:1502:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_country_group.c:1574:7: style: The scope of the variable 'sTmp2' can be reduced. [variableScope]
 char sTmp2[100];
      ^
_src\web_country_group.c:201:16: style: Variable 'nCambio' is assigned a value that is never used. [unreadVariable]
 long  nCambio = 0;
               ^
_src\web_country_group.c:202:9: style: Unused variable: wrk_str [unusedVariable]
 char  *wrk_str;
        ^
_src\web_country_group.c:550:19: style: Variable 'lentocopy' is assigned a value that is never used. [unreadVariable]
 short  lentocopy = 0;
                  ^
_src\web_country_group.c:551:13: style: Variable 'nRec' is assigned a value that is never used. [unreadVariable]
 long  nRec = 0;
            ^
_src\web_country_import.c:45:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_country_operator_group_upd.c:619:11: style: Condition 'rc' is always true [knownConditionTrueFalse]
       if(rc)
          ^
_src\web_country_operator_group_upd.c:571:9: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
     rc = MBE_READLOCKX( handleOP_rem, (char *) &record_operatori_tmp, (short) sizeof(t_ts_oper_record) );
        ^
_src\web_country_operator_group_upd.c:568:9: note: rc is assigned
     rc = MBE_FILE_SETKEY_( handleOP_rem, record_operatori.paese,
        ^
_src\web_country_operator_group_upd.c:571:9: note: rc is overwritten
     rc = MBE_READLOCKX( handleOP_rem, (char *) &record_operatori_tmp, (short) sizeof(t_ts_oper_record) );
        ^
_src\web_country_operator_group_upd.c:65:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_country_operator_group_upd.c:215:9: style: The scope of the variable 'pChiave' can be reduced. [variableScope]
 char  *pChiave;
        ^
_src\web_country_operator_group_upd.c:226:9: style: The scope of the variable 'nMaxTs' can be reduced. [variableScope]
 short  nMaxTs = 0;
        ^
_src\web_country_operator_group_upd.c:356:7: style: The scope of the variable 'ac_GRP_Pa' can be reduced. [variableScope]
 char ac_GRP_Pa[70];
      ^
_src\web_country_operator_group_upd.c:359:8: style: The scope of the variable 'nAgg' can be reduced. [variableScope]
 short nAgg;
       ^
_src\web_country_operator_group_upd.c:226:16: style: Variable 'nMaxTs' is assigned a value that is never used. [unreadVariable]
 short  nMaxTs = 0;
               ^
_src\web_country_operator_group_upd.c:483:20: style: Variable 'nMaxTs_Old' is assigned a value that is never used. [unreadVariable]
 short  nMaxTs_Old = 0;
                   ^
_src\web_func.c:1159:46: error: syntax error [syntaxError]
                                    &i_maxlen,);
                                             ^
_src\web_gtt_cmd.c:238:79: error: syntax error [syntaxError]
  if( ( FILE_OPEN_( proc_name, (short) strlen(proc_name), filenumber, 0, 0, , , ) ) == 0)
                                                                              ^
_src\web_gtt_import.c:269:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
   printf("<BR>Imported <B>%d</B> record(s) from input file [%s]", RecAgg, FileInput);
   ^
_src\web_gtt_import.c:68:7: style: The scope of the variable 'sRiga' can be reduced. [variableScope]
 char sRiga[2048];
      ^
_src\web_gtt_import.c:69:8: style: The scope of the variable 'hIn' can be reduced. [variableScope]
 FILE *hIn;
       ^
_src\web_gtt_import.c:70:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_gtt_mgt.c:956:52: error: Array 'pcf_elementi[20]' accessed at index 20, which is out of bounds. [arrayIndexOutOfBounds]
     printf("[%d] %s - %d</option>\n", pcf_elementi[i].value, pcf_elementi[i].description, impianti.primarykey.pc );
                                                   ^
_src\web_gtt_mgt.c:942:6: note: After for loop, i has value 20
     for (i = 0; i < 20; i++ )
     ^
_src\web_gtt_mgt.c:956:52: note: Array index out of bounds
     printf("[%d] %s - %d</option>\n", pcf_elementi[i].value, pcf_elementi[i].description, impianti.primarykey.pc );
                                                   ^
_src\web_gtt_mgt.c:71:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_gtt_mgt.c:198:9: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  i, rc = 0;
        ^
_src\web_gtt_mgt.c:199:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_gtt_mgt.c:200:8: style: The scope of the variable 'acPCFDesc' can be reduced. [variableScope]
 char  acPCFDesc[50];
       ^
_src\web_gtt_mgt.c:341:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
 short  rc = 0;
        ^
_src\web_gtt_mgt.c:734:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 short i = 0;
       ^
_src\web_gtt_mgt.c:737:7: style: The scope of the variable 'sDati' can be reduced. [variableScope]
 char sDati[100];
      ^
_src\web_gtt_mgt.c:738:8: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char *pVal;
       ^
_src\web_gtt_mgt.c:771:8: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char *pVal;
       ^
_src\web_gtt_mgt.c:887:9: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  i, rc = 0;
        ^
_src\web_gtt_mgt.c:888:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_gtt_mgt.c:889:8: style: The scope of the variable 'acPCFDesc' can be reduced. [variableScope]
 char  acPCFDesc[50];
       ^
_src\web_gtt_mgt.c:341:12: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 short  rc = 0;
           ^
_src\web_gtt_mgt_range.c:988:52: error: Array 'pcf_elementi[20]' accessed at index 20, which is out of bounds. [arrayIndexOutOfBounds]
     printf("[%d] %s - %d</option>\n", pcf_elementi[i].value, pcf_elementi[i].description, impianti.primarykey.pc );
                                                   ^
_src\web_gtt_mgt_range.c:974:6: note: After for loop, i has value 20
     for (i = 0; i < 20; i++ )
     ^
_src\web_gtt_mgt_range.c:988:52: note: Array index out of bounds
     printf("[%d] %s - %d</option>\n", pcf_elementi[i].value, pcf_elementi[i].description, impianti.primarykey.pc );
                                                   ^
_src\web_gtt_mgt_range.c:74:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_gtt_mgt_range.c:211:9: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  i, rc = 0;
        ^
_src\web_gtt_mgt_range.c:212:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_gtt_mgt_range.c:213:8: style: The scope of the variable 'acPCFDesc' can be reduced. [variableScope]
 char  acPCFDesc[50];
       ^
_src\web_gtt_mgt_range.c:359:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
 short  rc = 0;
        ^
_src\web_gtt_mgt_range.c:762:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 short i = 0;
       ^
_src\web_gtt_mgt_range.c:764:8: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char *pVal;
       ^
_src\web_gtt_mgt_range.c:766:7: style: The scope of the variable 'sDati' can be reduced. [variableScope]
 char sDati[100];
      ^
_src\web_gtt_mgt_range.c:799:8: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char *pVal;
       ^
_src\web_gtt_mgt_range.c:919:9: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  i, rc = 0;
        ^
_src\web_gtt_mgt_range.c:920:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_gtt_mgt_range.c:921:8: style: The scope of the variable 'acPCFDesc' can be reduced. [variableScope]
 char  acPCFDesc[50];
       ^
_src\web_gtt_mgt_range.c:1006:10: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char   *pVal;
         ^
_src\web_gtt_mgt_range.c:1008:9: style: The scope of the variable 'sResult' can be reduced. [variableScope]
 char   sResult[4096];
        ^
_src\web_gtt_mgt_range.c:1012:10: style: The scope of the variable 'errore' can be reduced. [variableScope]
 short   errore = 0;
         ^
_src\web_gtt_mgt_range.c:1013:10: style: The scope of the variable 'isAggiorna' can be reduced. [variableScope]
 short   isAggiorna;
         ^
_src\web_gtt_mgt_range.c:1016:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\web_gtt_mgt_range.c:1021:10: style: The scope of the variable 'isINI_Adiacente' can be reduced. [variableScope]
 short   isINI_Adiacente = 0;
         ^
_src\web_gtt_mgt_range.c:1022:10: style: The scope of the variable 'isEND_Adiacente' can be reduced. [variableScope]
 short   isEND_Adiacente = 0;
         ^
_src\web_gtt_mgt_range.c:1029:10: style: The scope of the variable 'RAI_PC' can be reduced. [variableScope]
 short   RAI_PC;
         ^
_src\web_gtt_mgt_range.c:1030:10: style: The scope of the variable 'RAI_PCF' can be reduced. [variableScope]
 short   RAI_PCF;
         ^
_src\web_gtt_mgt_range.c:1031:14: style: The scope of the variable 'RAI_MGT_INI' can be reduced. [variableScope]
 long long   RAI_MGT_INI;
             ^
_src\web_gtt_mgt_range.c:1032:14: style: The scope of the variable 'RAI_MGT_END' can be reduced. [variableScope]
 long long   RAI_MGT_END;
             ^
_src\web_gtt_mgt_range.c:1034:10: style: The scope of the variable 'RAE_PC' can be reduced. [variableScope]
 short   RAE_PC;
         ^
_src\web_gtt_mgt_range.c:1035:10: style: The scope of the variable 'RAE_PCF' can be reduced. [variableScope]
 short   RAE_PCF;
         ^
_src\web_gtt_mgt_range.c:1036:14: style: The scope of the variable 'RAE_MGT_INI' can be reduced. [variableScope]
 long long   RAE_MGT_INI;
             ^
_src\web_gtt_mgt_range.c:1037:14: style: The scope of the variable 'RAE_MGT_END' can be reduced. [variableScope]
 long long   RAE_MGT_END;
             ^
_src\web_gtt_mgt_range.c:1302:10: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char   *pVal;
         ^
_src\web_gtt_mgt_range.c:1304:9: style: The scope of the variable 'sResult' can be reduced. [variableScope]
 char   sResult[4096];
        ^
_src\web_gtt_mgt_range.c:1305:9: style: The scope of the variable 'sDelete' can be reduced. [variableScope]
 char   sDelete[400000];
        ^
_src\web_gtt_mgt_range.c:1309:10: style: The scope of the variable 'errore' can be reduced. [variableScope]
 short   errore = 0;
         ^
_src\web_gtt_mgt_range.c:1310:10: style: The scope of the variable 'isAggiungi' can be reduced. [variableScope]
 short   isAggiungi;
         ^
_src\web_gtt_mgt_range.c:1313:9: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int    cc;
        ^
_src\web_gtt_mgt_range.c:1318:10: style: The scope of the variable 'isINI_Adiacente' can be reduced. [variableScope]
 short   isINI_Adiacente = 0;
         ^
_src\web_gtt_mgt_range.c:1319:10: style: The scope of the variable 'isEND_Adiacente' can be reduced. [variableScope]
 short   isEND_Adiacente = 0;
         ^
_src\web_gtt_mgt_range.c:1320:10: style: The scope of the variable 'isINI_Compreso' can be reduced. [variableScope]
 short   isINI_Compreso = 0;
         ^
_src\web_gtt_mgt_range.c:1321:10: style: The scope of the variable 'isEND_Compreso' can be reduced. [variableScope]
 short   isEND_Compreso = 0;
         ^
_src\web_gtt_mgt_range.c:1328:10: style: The scope of the variable 'RAI_PC' can be reduced. [variableScope]
 short   RAI_PC;
         ^
_src\web_gtt_mgt_range.c:1329:10: style: The scope of the variable 'RAI_PCF' can be reduced. [variableScope]
 short   RAI_PCF;
         ^
_src\web_gtt_mgt_range.c:1330:14: style: The scope of the variable 'RAI_MGT_INI' can be reduced. [variableScope]
 long long   RAI_MGT_INI;
             ^
_src\web_gtt_mgt_range.c:1331:14: style: The scope of the variable 'RAI_MGT_END' can be reduced. [variableScope]
 long long   RAI_MGT_END;
             ^
_src\web_gtt_mgt_range.c:1333:10: style: The scope of the variable 'RAE_PC' can be reduced. [variableScope]
 short   RAE_PC;
         ^
_src\web_gtt_mgt_range.c:1334:10: style: The scope of the variable 'RAE_PCF' can be reduced. [variableScope]
 short   RAE_PCF;
         ^
_src\web_gtt_mgt_range.c:1335:14: style: The scope of the variable 'RAE_MGT_INI' can be reduced. [variableScope]
 long long   RAE_MGT_INI;
             ^
_src\web_gtt_mgt_range.c:1336:14: style: The scope of the variable 'RAE_MGT_END' can be reduced. [variableScope]
 long long   RAE_MGT_END;
             ^
_src\web_gtt_mgt_range.c:1338:10: style: The scope of the variable 'RCI_PC' can be reduced. [variableScope]
 short   RCI_PC;
         ^
_src\web_gtt_mgt_range.c:1339:10: style: The scope of the variable 'RCI_PCF' can be reduced. [variableScope]
 short   RCI_PCF;
         ^
_src\web_gtt_mgt_range.c:1340:14: style: The scope of the variable 'RCI_MGT_INI' can be reduced. [variableScope]
 long long   RCI_MGT_INI;
             ^
_src\web_gtt_mgt_range.c:1341:14: style: The scope of the variable 'RCI_MGT_END' can be reduced. [variableScope]
 long long   RCI_MGT_END;
             ^
_src\web_gtt_mgt_range.c:1343:10: style: The scope of the variable 'RCE_PC' can be reduced. [variableScope]
 short   RCE_PC;
         ^
_src\web_gtt_mgt_range.c:1344:10: style: The scope of the variable 'RCE_PCF' can be reduced. [variableScope]
 short   RCE_PCF;
         ^
_src\web_gtt_mgt_range.c:1345:14: style: The scope of the variable 'RCE_MGT_INI' can be reduced. [variableScope]
 long long   RCE_MGT_INI;
             ^
_src\web_gtt_mgt_range.c:1346:14: style: The scope of the variable 'RCE_MGT_END' can be reduced. [variableScope]
 long long   RCE_MGT_END;
             ^
_src\web_gtt_mgt_range.c:1350:10: style: The scope of the variable 'delindex' can be reduced. [variableScope]
 short   delindex = 0;
         ^
_src\web_gtt_mgt_range.c:1507:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
_src\web_gtt_mgt_range.c:359:12: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 short  rc = 0;
           ^
_src\web_gtt_net_nodes.c:1008:5: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
 rc = Apri_File(acFileMGT_Rem, &handleMGT_rem, 1, 1);
    ^
_src\web_gtt_net_nodes.c:1007:5: note: rc is assigned
 rc = Apri_File(acFileMGT, &handleMGT, 1, 1);
    ^
_src\web_gtt_net_nodes.c:1008:5: note: rc is overwritten
 rc = Apri_File(acFileMGT_Rem, &handleMGT_rem, 1, 1);
    ^
_src\web_gtt_net_nodes.c:1255:5: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
 rc = Apri_File(acFileMGT_Rem, &handleMGT_rem, 1, 1);
    ^
_src\web_gtt_net_nodes.c:1254:5: note: rc is assigned
 rc = Apri_File(acFileMGT, &handleMGT, 1, 1);
    ^
_src\web_gtt_net_nodes.c:1255:5: note: rc is overwritten
 rc = Apri_File(acFileMGT_Rem, &handleMGT_rem, 1, 1);
    ^
_src\web_gtt_net_nodes.c:89:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_gtt_net_nodes.c:215:9: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  i, rc = 0;
        ^
_src\web_gtt_net_nodes.c:216:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_gtt_net_nodes.c:217:8: style: The scope of the variable 'acPCFDesc' can be reduced. [variableScope]
 char  acPCFDesc[50];
       ^
_src\web_gtt_net_nodes.c:218:8: style: The scope of the variable 'acSSNDesc' can be reduced. [variableScope]
 char  acSSNDesc[50];
       ^
_src\web_gtt_net_nodes.c:622:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta = 0;
        ^
_src\web_gtt_net_nodes.c:623:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_gtt_net_nodes.c:624:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_gtt_net_nodes.c:625:8: style: The scope of the variable 'acKey' can be reduced. [variableScope]
 char  acKey[18];
       ^
_src\web_gtt_net_nodes.c:996:8: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char *wrk_str;
       ^
_src\web_gtt_net_nodes.c:997:8: style: The scope of the variable 'pTmp' can be reduced. [variableScope]
 char *pTmp;
       ^
_src\web_gtt_net_nodes.c:998:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_gtt_net_nodes.c:1107:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_gtt_net_nodes.c:1245:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_gtt_net_nodes.c:1246:9: style: The scope of the variable 'pTmp' can be reduced. [variableScope]
 char  *pTmp;
        ^
_src\web_gtt_net_nodes.c:1247:9: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char  *wrk_str;
        ^
_src\web_gtt_net_nodes.c:1371:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 short i = 0;
       ^
_src\web_gtt_net_nodes.c:1374:7: style: The scope of the variable 'sDati' can be reduced. [variableScope]
 char sDati[100];
      ^
_src\web_gtt_net_nodes.c:1375:8: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char *pVal;
       ^
_src\web_gtt_net_nodes.c:1405:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 short i = 0;
       ^
_src\web_gtt_net_nodes.c:1408:7: style: The scope of the variable 'sDati' can be reduced. [variableScope]
 char sDati[100];
      ^
_src\web_gtt_net_nodes.c:1409:8: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char *pVal;
       ^
_src\web_gtt_net_nodes.c:372:12: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 short  rc = 0, i;
           ^
_src\web_home_network.c:55:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_home_network.c:183:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_home_network.c:314:8: style: The scope of the variable 'strdata' can be reduced. [variableScope]
 char  strdata[25];
       ^
_src\web_home_network.c:316:9: style: The scope of the variable 'rc' can be reduced. [variableScope]
 short  rc = 0;
        ^
_src\web_home_network.c:702:9: style: The scope of the variable 'nTypeAgg' can be reduced. [variableScope]
 short  nTypeAgg;
        ^
_src\web_home_network.c:59:15: style: Variable 'found' is assigned a value that is never used. [unreadVariable]
    int  found=1;
              ^
_src\web_home_network.c:316:12: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 short  rc = 0;
           ^
_src\web_imsi.c:1234:28: error: syntax error [syntaxError]
   declare cursore1 cursor for
                           ^
_src\web_imsi_WL.c:518:5: warning: printf format string requires 1 parameter but 2 are given. [wrongPrintfScanfArgNum]
    printf("<BR>\nIMSI [%s] ATTENTION! - MBE and Enscribe are not aligned",ac_ImsiDritto ,acFileImsiDat);
    ^
_src\web_imsi_WL.c:63:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_imsi_WL.c:197:9: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char  *wrk_str;
        ^
_src\web_imsi_WL.c:199:8: style: The scope of the variable 'acImsi' can be reduced. [variableScope]
 char  acImsi[20];
       ^
_src\web_imsi_WL.c:294:7: style: The scope of the variable 'acImsi_dritto' can be reduced. [variableScope]
 char acImsi_dritto[20];
      ^
_src\web_imsi_WL.c:295:7: style: The scope of the variable 'strdata' can be reduced. [variableScope]
 char strdata[20];
      ^
_src\web_imsi_WL.c:569:10: style: The scope of the variable 'rc_E' can be reduced. [variableScope]
 short   rc_E = 0;
         ^
_src\web_imsi_WL.c:570:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_imsi_WL.c:687:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_imsi_WL.c:858:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_imsi_WL.c:840:6: error: Uninitialized variable: rc [uninitvar]
 if (rc != 0 )
     ^
_src\web_imsi_WL.c:801:15: error: Uninitialized variable: acTipoFile [uninitvar]
 if ( !memcmp(acTipoFile, "IMSI GSM", 8) )
              ^
_src\web_imsi_WL.c:569:15: style: Variable 'rc_E' is assigned a value that is never used. [unreadVariable]
 short   rc_E = 0;
              ^
_src\web_imsi_export_WL.c:236:8: style: The scope of the variable 'ac_ImsiDritto' can be reduced. [variableScope]
 char  ac_ImsiDritto[50];
       ^
_src\web_imsi_export_WL.c:237:8: style: The scope of the variable 'ac_ImsiGirato' can be reduced. [variableScope]
 char  ac_ImsiGirato[50];
       ^
_src\web_imsi_export_WL.c:55:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
 short ret=0;
          ^
_src\web_imsi_import_WL.c:431:6: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
     printf("<pre><font color=red>Imsi discarded: %d (length different from 15)</font></pre>\n",GSM_RecScartato );
     ^
_src\web_imsi_import_WL.c:87:10: style: The scope of the variable 'sLetti' can be reduced. [variableScope]
    char sLetti[301];
         ^
_src\web_imsi_import_WL.c:88:8: style: The scope of the variable 'hIn' can be reduced. [variableScope]
 FILE *hIn;
       ^
_src\web_imsi_import_WL.c:89:8: style: The scope of the variable 'pTmp' can be reduced. [variableScope]
 char *pTmp;
       ^
_src\web_nostdtac.c:62:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_nostdtac.c:183:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_nostdtac.c:304:9: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char  *wrk_str;
        ^
_src\web_nostdtac.c:309:8: style: The scope of the variable 'sTipo' can be reduced. [variableScope]
 char  sTipo[20];
       ^
_src\web_nostdtac.c:310:8: style: The scope of the variable 'sTxt' can be reduced. [variableScope]
 char  sTxt[400];
       ^
_src\web_operator.c:889:95: error: No pair for character ("). Can't process file. File is either invalid or unicode, which is currently not supported. [syntaxError]
// printf("<td width='5%%' align='center' rowspan='1'><nobr>\n\
                                                                                              ^
_src\web_operator_export.c:132:9: style: The comparison 'ret == 0' is always true. [knownConditionTrueFalse]
 if(ret == 0)
        ^
_src\web_operator_export.c:56:12: note: 'ret' is assigned value '0' here.
 short ret=0;
           ^
_src\web_operator_export.c:132:9: note: The comparison 'ret == 0' is always true.
 if(ret == 0)
        ^
_src\web_operator_export.c:58:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[50];
      ^
_src\web_operator_export.c:211:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[100];
       ^
_src\web_operator_export.c:212:8: style: The scope of the variable 'sTmp_GT' can be reduced. [variableScope]
 char  sTmp_GT[100];
       ^
_src\web_operator_export.c:213:8: style: The scope of the variable 'sTmp_Imsi' can be reduced. [variableScope]
 char  sTmp_Imsi[100];
       ^
_src\web_operator_export.c:214:8: style: The scope of the variable 'acCaratt' can be reduced. [variableScope]
 char  acCaratt[20];
       ^
_src\web_operator_export.c:216:9: style: The scope of the variable 'No_GT' can be reduced. [variableScope]
 short  No_GT = 0;
        ^
_src\web_operator_export.c:217:9: style: The scope of the variable 'ncountGT' can be reduced. [variableScope]
 short  ncountGT = 0;
        ^
_src\web_operator_export.c:218:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 int   i = 0;
       ^
_src\web_operator_export.c:216:15: style: Variable 'No_GT' is assigned a value that is never used. [unreadVariable]
 short  No_GT = 0;
              ^
_src\web_operator_export.c:217:18: style: Variable 'ncountGT' is assigned a value that is never used. [unreadVariable]
 short  ncountGT = 0;
                 ^
_src\web_operator_export.c:218:10: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
 int   i = 0;
         ^
_src\web_operator_group.c:444:3: error: printf format string requires 1 parameter but only 0 are given. [wrongPrintfScanfArgNum]
  printf("<INPUT TYPE='hidden' name='RECDISPLAY' value='%d' >\n");
  ^
_src\web_operator_group.c:1150:11: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
       rc = MBE_READX( handle_rem, (char *) &record_soglie_rem, (short) sizeof(t_ts_soglie_record) );
          ^
_src\web_operator_group.c:1148:11: note: rc is assigned
       rc = MBE_FILE_SETKEY_( handle_rem, newKey, sizeof(newKey), 0, EXACT);
          ^
_src\web_operator_group.c:1150:11: note: rc is overwritten
       rc = MBE_READX( handle_rem, (char *) &record_soglie_rem, (short) sizeof(t_ts_soglie_record) );
          ^
_src\web_operator_group.c:77:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_operator_group.c:214:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_operator_group.c:217:8: style: The scope of the variable 'acTRClass' can be reduced. [variableScope]
 char  acTRClass[20];
       ^
_src\web_operator_group.c:218:8: style: The scope of the variable 'acTDClass' can be reduced. [variableScope]
 char  acTDClass[20];
       ^
_src\web_operator_group.c:219:8: style: The scope of the variable 'acGrpdecod' can be reduced. [variableScope]
 char  acGrpdecod[100];
       ^
_src\web_operator_group.c:221:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_operator_group.c:222:8: style: The scope of the variable 'cColore' can be reduced. [variableScope]
 char  cColore = 'b';
       ^
_src\web_operator_group.c:223:8: style: The scope of the variable 'nCambio' can be reduced. [variableScope]
 long  nCambio = 0;
       ^
_src\web_operator_group.c:392:9: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char  *wrk_str;
        ^
_src\web_operator_group.c:552:8: style: The scope of the variable 'sDati' can be reduced. [variableScope]
 char  sDati[100];
       ^
_src\web_operator_group.c:554:9: style: The scope of the variable 'pVal' can be reduced. [variableScope]
 char  *pVal;
        ^
_src\web_operator_group.c:557:8: style: The scope of the variable 'acCC' can be reduced. [variableScope]
 char  acCC[20];
       ^
_src\web_operator_group.c:807:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_operator_group.c:813:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_operator_group.c:975:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_operator_group.c:976:8: style: The scope of the variable 'sTmp2' can be reduced. [variableScope]
 char  sTmp2[200];
       ^
_src\web_operator_group.c:981:8: style: The scope of the variable 'lRecord' can be reduced. [variableScope]
 long  lRecord = 0;
       ^
_src\web_operator_group.c:1289:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_operator_group.c:1291:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta= 0;
        ^
_src\web_operator_group.c:1292:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_operator_group.c:1293:8: style: The scope of the variable 'acPA' can be reduced. [variableScope]
 char  acPA[20];
       ^
_src\web_operator_group.c:1294:9: style: The scope of the variable 'ptrPaese' can be reduced. [variableScope]
 char  *ptrPaese;
        ^
_src\web_operator_group.c:1401:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_operator_group.c:1402:8: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char  stringa[200];
       ^
_src\web_operator_group.c:1403:8: style: The scope of the variable 'chiave' can be reduced. [variableScope]
 char  chiave[200];
       ^
_src\web_operator_group.c:1404:9: style: The scope of the variable 'ptrChiave' can be reduced. [variableScope]
 char  *ptrChiave;
        ^
_src\web_operator_group.c:1405:8: style: The scope of the variable 'acDati' can be reduced. [variableScope]
 char  acDati[200];
       ^
_src\web_operator_group.c:1406:8: style: The scope of the variable 'key_PA' can be reduced. [variableScope]
 char  key_PA[100];
       ^
_src\web_operator_group.c:1408:8: style: The scope of the variable 'acPaese' can be reduced. [variableScope]
 char  acPaese[10];
       ^
_src\web_operator_group.c:1410:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta = 0;
        ^
_src\web_operator_group.c:1411:9: style: The scope of the variable 'ptr_OP' can be reduced. [variableScope]
 char  *ptr_OP;
        ^
_src\web_operator_group.c:1412:9: style: The scope of the variable 'ptr_PA' can be reduced. [variableScope]
 char  *ptr_PA;
        ^
_src\web_operator_group.c:1413:9: style: The scope of the variable 'ptr_Dati' can be reduced. [variableScope]
 char  *ptr_Dati;
        ^
_src\web_operator_group.c:1414:9: style: The scope of the variable 'ptr_CC' can be reduced. [variableScope]
 char  *ptr_CC;
        ^
_src\web_operator_group.c:1415:8: style: The scope of the variable 'acCodPA' can be reduced. [variableScope]
 char  acCodPA[15];
       ^
_src\web_operator_group.c:1416:8: style: The scope of the variable 'acCaricato' can be reduced. [variableScope]
 char  acCaricato[10];
       ^
_src\web_operator_group.c:1847:8: style: The scope of the variable 'KeyLista' can be reduced. [variableScope]
 char  KeyLista[200];
       ^
_src\web_operator_group.c:1848:9: style: The scope of the variable 'ptr_PA' can be reduced. [variableScope]
 char  *ptr_PA;
        ^
_src\web_operator_group.c:223:16: style: Variable 'nCambio' is assigned a value that is never used. [unreadVariable]
 long  nCambio = 0;
               ^
_src\web_operator_group.c:750:7: style: Unused variable: ac_Chiave [unusedVariable]
 char ac_Chiave[82];
      ^
_src\web_operator_group.c:1410:16: style: Variable 'nConta' is assigned a value that is never used. [unreadVariable]
 short  nConta = 0;
               ^
_src\web_operator_import.c:946:6: portability: %d in format string (no. 4) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
     sprintf(sTmp, "(%.18s) Operator Name is different: DB=%.64s - Input File=%.64s(%d)\n",
     ^
_src\web_operator_import.c:1533:1: error: Resource leak: hIn [resourceLeak]
}
^
_src\web_operator_import.c:641:8: style: Variable 'pTmp' is reassigned a value before the old one has been used. [redundantAssignment]
   pTmp= GetToken((char *)NULL, ";|");
       ^
_src\web_operator_import.c:638:8: note: pTmp is assigned
   pTmp= GetToken((char *)NULL, ";|");
       ^
_src\web_operator_import.c:641:8: note: pTmp is overwritten
   pTmp= GetToken((char *)NULL, ";|");
       ^
_src\web_operator_import.c:506:11: style: The scope of the variable 'sLetti' can be reduced. [variableScope]
    char  sLetti[301];
          ^
_src\web_operator_import.c:509:9: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char  *wrk_str;
        ^
_src\web_operator_import.c:510:8: style: The scope of the variable 'chiave' can be reduced. [variableScope]
 char  chiave[50];
       ^
_src\web_operator_import.c:511:8: style: The scope of the variable 'chiave_ap' can be reduced. [variableScope]
 char  chiave_ap[50];
       ^
_src\web_operator_import.c:512:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_operator_import.c:513:8: style: The scope of the variable 'sTmp2' can be reduced. [variableScope]
 char  sTmp2[100];
       ^
_src\web_operator_import.c:514:8: style: The scope of the variable 'sTmp3' can be reduced. [variableScope]
 char  sTmp3[100];
       ^
_src\web_operator_import.c:516:9: style: The scope of the variable 'pTmp1' can be reduced. [variableScope]
 char  *pTmp1;
        ^
_src\web_operator_import.c:517:9: style: The scope of the variable 'pTmp2' can be reduced. [variableScope]
 char  *pTmp2;
        ^
_src\web_operator_import.c:518:8: style: The scope of the variable 'ac_Key' can be reduced. [variableScope]
 char  ac_Key[24];
       ^
_src\web_operator_import.c:519:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 int   i =0;
       ^
_src\web_operator_import.c:793:9: style: The scope of the variable 'aggiorna' can be reduced. [variableScope]
 short  aggiorna = 0;
        ^
_src\web_operator_import.c:1427:7: style: The scope of the variable 'sLetti' can be reduced. [variableScope]
 char sLetti[3000];
      ^
_src\web_operator_import.c:1428:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_operator_import.c:1546:9: style: The scope of the variable 'Agg_Soglie' can be reduced. [variableScope]
 short  Agg_Soglie = 0;
        ^
_src\web_operator_import.c:1695:8: style: The scope of the variable 'ac_Key2_GT' can be reduced. [variableScope]
 char  ac_Key2_GT[18];
       ^
_src\web_operator_import.c:1698:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_operator_import.c:1426:8: style: Local variable 'hIn' shadows outer variable [shadowVariable]
 FILE *hIn;
       ^
_src\web_operator_import.c:55:8: note: Shadowed declaration
FILE  *hIn;
       ^
_src\web_operator_import.c:1426:8: note: Shadow variable
 FILE *hIn;
       ^
_src\web_operator_import.c:453:5: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
 rc = MBE_FILE_SETKEY_( handlePa, (char *) &Key, (short)sizeof(Key), 0, APPROXIMATE);
    ^
_src\web_operator_import.c:793:18: style: Variable 'aggiorna' is assigned a value that is never used. [unreadVariable]
 short  aggiorna = 0;
                 ^
_src\web_rules_pre_steering.c:1265:16: style: Condition 'oraOK==0' is always true [knownConditionTrueFalse]
     if( oraOK == 0 &&  ggOK == 0 )
               ^
_src\web_rules_pre_steering.c:1238:13: note: Assignment 'oraOK=0', assigned value is 0
    oraOK = 0;
            ^
_src\web_rules_pre_steering.c:1265:16: note: Condition 'oraOK==0' is always true
     if( oraOK == 0 &&  ggOK == 0 )
               ^
_src\web_rules_pre_steering.c:2232:9: style: Condition 'rc==0' is always true [knownConditionTrueFalse]
 if (rc == 0)
        ^
_src\web_rules_pre_steering.c:2224:9: note: Assuming that condition 'rc!=0' is not redundant
 if (rc != 0)
        ^
_src\web_rules_pre_steering.c:2232:9: note: Condition 'rc==0' is always true
 if (rc == 0)
        ^
_src\web_rules_pre_steering.c:2313:21: style: Condition 'ptrPaese!=NULL' is always true [knownConditionTrueFalse]
          (ptrPaese != NULL) ? ptrPaese : " ",
                    ^
_src\web_rules_pre_steering.c:1834:9: portability: %d in format string (no. 4) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
        sprintf(sTmp, "Error (%d) in reading file [%s]: struct BRA (read:%d; stru:%d)",
        ^
_src\web_rules_pre_steering.c:80:7: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char sTmp[500];
      ^
_src\web_rules_pre_steering.c:215:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_rules_pre_steering.c:216:8: style: The scope of the variable 'acCC' can be reduced. [variableScope]
 char  acCC[10];
       ^
_src\web_rules_pre_steering.c:217:9: style: The scope of the variable 'ptrPaese' can be reduced. [variableScope]
 char  *ptrPaese;
        ^
_src\web_rules_pre_steering.c:220:9: style: The scope of the variable 'lenKey' can be reduced. [variableScope]
 short  lenKey = 0;  //primo campo numerico
        ^
_src\web_rules_pre_steering.c:439:9: style: The scope of the variable 'lenKey' can be reduced. [variableScope]
 short  lenKey = 79;
        ^
_src\web_rules_pre_steering.c:440:8: style: The scope of the variable 'sTipo' can be reduced. [variableScope]
 char  sTipo[20];
       ^
_src\web_rules_pre_steering.c:441:8: style: The scope of the variable 'acCC' can be reduced. [variableScope]
 char  acCC[10];
       ^
_src\web_rules_pre_steering.c:442:9: style: The scope of the variable 'ptrPaese' can be reduced. [variableScope]
 char  *ptrPaese;
        ^
_src\web_rules_pre_steering.c:977:9: style: The scope of the variable 'lenKey' can be reduced. [variableScope]
 short  lenKey = 79;
        ^
_src\web_rules_pre_steering.c:1109:9: style: The scope of the variable 'pTmp' can be reduced. [variableScope]
 char  *pTmp;
        ^
_src\web_rules_pre_steering.c:1191:9: style: The scope of the variable 'ggOK' can be reduced. [variableScope]
 short  ggOK, i;
        ^
_src\web_rules_pre_steering.c:1191:15: style: The scope of the variable 'i' can be reduced. [variableScope]
 short  ggOK, i;
              ^
_src\web_rules_pre_steering.c:1192:9: style: The scope of the variable 'oraOK' can be reduced. [variableScope]
 short  oraOK;
        ^
_src\web_rules_pre_steering.c:1457:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_rules_pre_steering.c:1458:8: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char  stringa[200];
       ^
_src\web_rules_pre_steering.c:1459:8: style: The scope of the variable 'chiave' can be reduced. [variableScope]
 char  chiave[200];
       ^
_src\web_rules_pre_steering.c:1460:9: style: The scope of the variable 'ptrChiave' can be reduced. [variableScope]
 char  *ptrChiave;
        ^
_src\web_rules_pre_steering.c:1461:8: style: The scope of the variable 'acDati' can be reduced. [variableScope]
 char  acDati[300];
       ^
_src\web_rules_pre_steering.c:1462:8: style: The scope of the variable 'key_PA' can be reduced. [variableScope]
 char  key_PA[100];
       ^
_src\web_rules_pre_steering.c:1464:8: style: The scope of the variable 'acCC_COd' can be reduced. [variableScope]
 char  acCC_COd[20];
       ^
_src\web_rules_pre_steering.c:1466:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta = 0;
        ^
_src\web_rules_pre_steering.c:1467:9: style: The scope of the variable 'ptr_OP' can be reduced. [variableScope]
 char  *ptr_OP;
        ^
_src\web_rules_pre_steering.c:1468:9: style: The scope of the variable 'ptr_PA' can be reduced. [variableScope]
 char  *ptr_PA;
        ^
_src\web_rules_pre_steering.c:1469:9: style: The scope of the variable 'ptr_Dati' can be reduced. [variableScope]
 char  *ptr_Dati;
        ^
_src\web_rules_pre_steering.c:1727:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta = 0;
        ^
_src\web_rules_pre_steering.c:1729:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_rules_pre_steering.c:1730:8: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char  stringa[1024];
       ^
_src\web_rules_pre_steering.c:1731:9: style: The scope of the variable 'is_AltKey' can be reduced. [variableScope]
 short  is_AltKey;
        ^
_src\web_rules_pre_steering.c:1921:9: style: The scope of the variable 'nConta' can be reduced. [variableScope]
 short  nConta = 0;
        ^
_src\web_rules_pre_steering.c:1925:8: style: The scope of the variable 'stringa' can be reduced. [variableScope]
 char  stringa[1024];
       ^
_src\web_rules_pre_steering.c:2023:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_rules_pre_steering.c:2024:8: style: The scope of the variable 'acDenPa' can be reduced. [variableScope]
 char  acDenPa[100];
       ^
_src\web_rules_pre_steering.c:2025:9: style: The scope of the variable 'ptr_PA' can be reduced. [variableScope]
 char  *ptr_PA;
        ^
_src\web_rules_pre_steering.c:2026:9: style: The scope of the variable 'ptr_CC' can be reduced. [variableScope]
 char  *ptr_CC;
        ^
_src\web_rules_pre_steering.c:2027:8: style: The scope of the variable 'acCC' can be reduced. [variableScope]
 char  acCC[10];
       ^
_src\web_rules_pre_steering.c:2115:8: style: The scope of the variable 'lenKey' can be reduced. [variableScope]
 short lenKey = 79;
       ^
_src\web_rules_pre_steering.c:2205:8: style: The scope of the variable 'acGiorni' can be reduced. [variableScope]
 char  acGiorni[10];
       ^
_src\web_rules_pre_steering.c:2206:8: style: The scope of the variable 'acCC' can be reduced. [variableScope]
 char  acCC[10];
       ^
_src\web_rules_pre_steering.c:2208:9: style: The scope of the variable 'lenKey' can be reduced. [variableScope]
 short  lenKey = 0;  //primo campo numerico
        ^
_src\web_rules_pre_steering.c:2209:9: style: The scope of the variable 'ptrPaese' can be reduced. [variableScope]
 char  *ptrPaese;
        ^
_src\web_rules_pre_steering.c:1250:12: style: Variable 'oraOK' is assigned a value that is never used. [unreadVariable]
     oraOK = 1;
           ^
_src\web_rules_pre_steering.c:1466:16: style: Variable 'nConta' is assigned a value that is never used. [unreadVariable]
 short  nConta = 0;
               ^
_src\web_rules_pre_steering.c:1727:16: style: Variable 'nConta' is assigned a value that is never used. [unreadVariable]
 short  nConta = 0;
               ^
_src\web_rules_pre_steering.c:1749:13: style: Variable 'buffer_size' is assigned a value that is never used. [unreadVariable]
 buffer_size++;
            ^
_src\web_rules_pre_steering.c:1748:30: style: Variable 'mgt_buffer' is allocated memory that is never used. [unusedAllocatedMemory]
 mgt_buffer = (char *)calloc(16384, 1);
                             ^
_src\web_rules_pre_steering.c:1921:16: style: Variable 'nConta' is assigned a value that is never used. [unreadVariable]
 short  nConta = 0;
               ^
_src\web_rules_steering.c:2642:28: error: syntax error [syntaxError]
   declare cursore1 cursor for
                           ^
_src\web_tfs2_func.c:682:2: error: Resource leak: hIn [resourceLeak]
 return(rc);
 ^
_src\web_tfs2_func.c:827:9: warning: Possible null pointer dereference: arrivato_a [nullPointer]
   if ((arrivato_a[0] == '\n') || (arrivato_a[0] == '\0'))
        ^
_src\web_tfs2_func.c:817:29: note: Assignment 'arrivato_a=NULL', assigned value is 0
 static char  *arrivato_a = NULL;
                            ^
_src\web_tfs2_func.c:827:9: note: Null pointer dereference
   if ((arrivato_a[0] == '\n') || (arrivato_a[0] == '\0'))
        ^
_src\web_tfs2_func.c:551:9: style: The scope of the variable 'hApp_ST' can be reduced. [variableScope]
 FILE  *hApp_ST;
        ^
_src\web_tfs2_func.c:554:12: style: The scope of the variable 'lJTS' can be reduced. [variableScope]
 long long lJTS = 0;
           ^
_src\web_tfs2_func.c:615:11: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
    char  sTmp[500];
          ^
_src\web_tfs2_func.c:616:11: style: The scope of the variable 'sLetti' can be reduced. [variableScope]
    char  sLetti[301];
          ^
_src\web_tfs2_func.c:617:8: style: The scope of the variable 'acDati' can be reduced. [variableScope]
 char  acDati[300];
       ^
_src\web_tfs2_func.c:619:8: style: The scope of the variable 'nPosByte' can be reduced. [variableScope]
 int   nPosByte = 0;
       ^
_src\web_tfs2_func.c:620:8: style: The scope of the variable 'cValue_input' can be reduced. [variableScope]
 char  cValue_input;
       ^
_src\web_tfs2_func.c:818:23: style: The scope of the variable 'cn2' can be reduced. [variableScope]
 short        cn = 0, cn2;
                      ^
_src\web_tfs2_func.c:815:34: style: Parameter 'sep' can be declared with const [constParameter]
char  *str_tok(char *riga, char *sep, char elemento[], short *stop)
                                 ^
_src\web_tfs2_func.c:554:17: style: Variable 'lJTS' is assigned a value that is never used. [unreadVariable]
 long long lJTS = 0;
                ^
_src\web_xml_rules.c:2809:24: error: Buffer is accessed out of bounds: record_soglie.gr_pa [bufferAccessOutOfBounds]
   memcpy(record_soglie.gr_pa, ac_Chiave, LEN_KEY_SOGLIE);
                       ^
_src\web_xml_rules.c:2862:29: error: Buffer is accessed out of bounds: record_soglie_rem.gr_pa [bufferAccessOutOfBounds]
    memcpy(record_soglie_rem.gr_pa, ac_Chiave, LEN_KEY_SOGLIE);
                            ^
_src\web_xml_rules.c:2566:15: style: Condition 'oraOK==0' is always true [knownConditionTrueFalse]
    if( oraOK == 0 &&  ggOK == 0 )
              ^
_src\web_xml_rules.c:2539:12: note: Assignment 'oraOK=0', assigned value is 0
   oraOK = 0;
           ^
_src\web_xml_rules.c:2566:15: note: Condition 'oraOK==0' is always true
    if( oraOK == 0 &&  ggOK == 0 )
              ^
_src\web_xml_rules.c:932:6: warning: %X in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'. [invalidScanfArgType_int]
     sscanf(acP_hexdefuser, "%X", record_soglie.user_type );
     ^
_src\web_xml_rules.c:1279:6: warning: %X in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'. [invalidScanfArgType_int]
     sscanf(acP_hexdefuser, "%X", record_soglie.user_type );
     ^
_src\web_xml_rules.c:1737:6: warning: %X in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'. [invalidScanfArgType_int]
     sscanf(acP_hexdefuser, "%X", record_soglie.user_type );
     ^
_src\web_xml_rules.c:1739:6: warning: %X in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'. [invalidScanfArgType_int]
     sscanf(ac_def_hexdefuser, "%X", record_soglie.user_type ); //  acP_hexdefuser letto da file ini
     ^
_src\web_xml_rules.c:2114:6: warning: %X in format string (no. 1) requires 'unsigned int *' but the argument type is 'const char *'. [invalidScanfArgType_int]
     sscanf(acP_hexdefuser, "%X", record_soglie.user_type );
     ^
_src\web_xml_rules.c:2801:5: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
 rc = MBE_FILE_SETKEY_( handle_rem, ac_Chiave, (short)sizeof(ac_Chiave), 0, EXACT);
    ^
_src\web_xml_rules.c:2800:5: note: rc is assigned
 rc = MBE_FILE_SETKEY_( handle, ac_Chiave, (short)sizeof(ac_Chiave), 0, EXACT);
    ^
_src\web_xml_rules.c:2801:5: note: rc is overwritten
 rc = MBE_FILE_SETKEY_( handle_rem, ac_Chiave, (short)sizeof(ac_Chiave), 0, EXACT);
    ^
_src\web_xml_rules.c:2804:5: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
 rc = MbeFileReadL_nw( handle, (char *) &record_soglie, (short) sizeof(t_ts_soglie_record) );
    ^
_src\web_xml_rules.c:2801:5: note: rc is assigned
 rc = MBE_FILE_SETKEY_( handle_rem, ac_Chiave, (short)sizeof(ac_Chiave), 0, EXACT);
    ^
_src\web_xml_rules.c:2804:5: note: rc is overwritten
 rc = MbeFileReadL_nw( handle, (char *) &record_soglie, (short) sizeof(t_ts_soglie_record) );
    ^
_src\web_xml_rules.c:185:7: style: The scope of the variable 'ac_user_auth_trace' can be reduced. [variableScope]
 char ac_user_auth_trace[200];
      ^
_src\web_xml_rules.c:294:8: style: The scope of the variable 'wrk_str' can be reduced. [variableScope]
 char *wrk_str;
       ^
_src\web_xml_rules.c:2430:24: style: The scope of the variable 'format_presence' can be reduced. [variableScope]
 char   *format_type, *format_presence;
                       ^
_src\web_xml_rules.c:2592:8: style: The scope of the variable 'sTmp' can be reduced. [variableScope]
 char  sTmp[500];
       ^
_src\web_xml_rules.c:786:6: error: Uninitialized variable: rc [uninitvar]
 if (rc == 0)
     ^
_src\web_xml_rules.c:1127:6: error: Uninitialized variable: rc [uninitvar]
 if (rc == 0)
     ^
_src\web_xml_rules.c:1534:6: error: Uninitialized variable: rc [uninitvar]
 if (rc == 0)
     ^
_src\web_xml_rules.c:1534:6: error: Uninitialized variable: rc [uninitvar]
 if (rc == 0)
     ^
_src\web_xml_rules.c:1337:6: note: Assuming condition is false
 if (!*error)
     ^
_src\web_xml_rules.c:1534:6: note: Uninitialized variable: rc
 if (rc == 0)
     ^
_src\web_xml_rules.c:1572:12: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
 short   i = 0;
           ^
_src\web_xml_rules.c:1573:22: style: Variable 'nHH' is assigned a value that is never used. [unreadVariable]
 unsigned short  nHH = 0;
                     ^
_src\web_xml_rules.c:1574:22: style: Variable 'nMM' is assigned a value that is never used. [unreadVariable]
 unsigned short  nMM = 0;
                     ^
_src\web_xml_rules.c:1637:25: style: Variable 'p_request_header' is assigned a value that is never used. [unreadVariable]
  if ((p_request_header = get_element(root, "Header", 1, error, message)) &&
                        ^
_src\web_xml_rules.c:1971:13: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
 short    i = 0;
            ^
_src\web_xml_rules.c:2035:25: style: Variable 'p_request_header' is assigned a value that is never used. [unreadVariable]
  if ((p_request_header = get_element(root, "Header", 1, error, message)) &&
                        ^
_src\web_xml_rules.c:2551:11: style: Variable 'oraOK' is assigned a value that is never used. [unreadVariable]
    oraOK = 1;
          ^
arrayIndexOutOfBounds\bad.c:7:6: error: Array 'a[2]' accessed at index 2, which is out of bounds. [arrayIndexOutOfBounds]
    a[2] = 0;
     ^
autoVariables\bad.c:4:5: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
    *a = &b;
    ^
beSOURCE-CPP\src\20200719142400\04.Command_Injection\C04001.cpp:18:3: error: Memory leak: command [memleak]
  return (0);
  ^
beSOURCE-CPP\src\20200719142400\05.Unrestricted_Upload_of_File_with_Dangerous_Type\C05001.cpp:37:27: portability: Undefined behaviour, pointer arithmetic 'name+t' is out of bounds. [pointerOutOfBounds]
        tmpStr=strstr(name+t+1,"\\");
                          ^
beSOURCE-CPP\src\20200719142400\05.Unrestricted_Upload_of_File_with_Dangerous_Type\C05001.cpp:34:8: note: Assignment 't=-1', assigned value is -1
    t=-1;
       ^
beSOURCE-CPP\src\20200719142400\05.Unrestricted_Upload_of_File_with_Dangerous_Type\C05001.cpp:37:27: note: Pointer arithmetic overflow
        tmpStr=strstr(name+t+1,"\\");
                          ^
beSOURCE-CPP\src\20200719142400\09.LDAP_Injection\C09001.cpp:19:3: error: Found a exit path from function with non-void return type that has missing return statement [missingReturn]
  rc = ldap_search_ext_s( ld, FIND_DN, LDAP_SCOPE_BASE, filter, NULL, 0, NULL, NULL, LDAP_NO_LIMIT, LDAP_NO_LIMIT, &result);
  ^
beSOURCE-CPP\src\20200719142400\09.LDAP_Injection\C09001.cpp:19:6: style: Variable 'rc' is assigned a value that is never used. [unreadVariable]
  rc = ldap_search_ext_s( ld, FIND_DN, LDAP_SCOPE_BASE, filter, NULL, 0, NULL, NULL, LDAP_NO_LIMIT, LDAP_NO_LIMIT, &result);
     ^
beSOURCE-CPP\src\20200719142400\14.Reliance_on_Untrusted_Inputs_in_a_Security_Decision\CWE247_Reliance_on_DNS_Lookups_in_Security_Decision__w32_01.cpp:37:25: style: The scope of the variable 'hostInfo' can be reduced. [variableScope]
        struct hostent *hostInfo;
                        ^
beSOURCE-CPP\src\20200719142400\14.Reliance_on_Untrusted_Inputs_in_a_Security_Decision\CWE247_Reliance_on_DNS_Lookups_in_Security_Decision__w32_01.cpp:119:25: style: The scope of the variable 'hostInfo' can be reduced. [variableScope]
        struct hostent *hostInfo;
                        ^
beSOURCE-CPP\src\20200719142400\14.Reliance_on_Untrusted_Inputs_in_a_Security_Decision\CWE247_Reliance_on_DNS_Lookups_in_Security_Decision__w32_01.cpp:120:16: style: The scope of the variable 'pFile' can be reduced. [variableScope]
        FILE * pFile;
               ^
beSOURCE-CPP\src\20200719142400\16.Improper_Authorization\C16001.cpp:29:9: error: Uninitialized variable: rc [uninitvar]
    if (rc != LDAP_SUCCESS)
        ^
beSOURCE-CPP\src\20200719142400\16.Improper_Authorization\C16001.cpp:26:19: style: Variable 'rc' is not assigned a value. [unassignedVariable]
    unsigned long rc;
                  ^
beSOURCE-CPP\src\20200719142400\19.Plaintext_Tx_Sensitive_Info\CWE319_Cleartext_Tx_Sensitive_Info__w32_char_connect_socket_01.cpp:42:13: style: The scope of the variable 'recvResult' can be reduced. [variableScope]
        int recvResult;
            ^
beSOURCE-CPP\src\20200719142400\19.Plaintext_Tx_Sensitive_Info\CWE319_Cleartext_Tx_Sensitive_Info__w32_char_connect_socket_01.cpp:44:15: style: The scope of the variable 'replace' can be reduced. [variableScope]
        char *replace;
              ^
beSOURCE-CPP\src\20200719142400\19.Plaintext_Tx_Sensitive_Info\CWE319_Cleartext_Tx_Sensitive_Info__w32_char_connect_socket_01.cpp:169:13: style: The scope of the variable 'recvResult' can be reduced. [variableScope]
        int recvResult;
            ^
beSOURCE-CPP\src\20200719142400\19.Plaintext_Tx_Sensitive_Info\CWE319_Cleartext_Tx_Sensitive_Info__w32_char_connect_socket_01.cpp:171:15: style: The scope of the variable 'replace' can be reduced. [variableScope]
        char *replace;
              ^
beSOURCE-CPP\src\20200719142400\22.Insufficiently_Random_Values\C22001.cpp:9:9: style: The scope of the variable 'temp' can be reduced. [variableScope]
    int temp;
        ^
beSOURCE-CPP\src\20200719142400\25.Weak_Password_Requirements\C25001.cpp:71:22: style: Variable 'sz_id' is assigned a value that is never used. [unreadVariable]
        char * sz_id = "hello";
                     ^
beSOURCE-CPP\src\20200719142400\28.Info_Leak_By_Comment\C28001.cpp:39:5: portability: Returning an address value in a function with integer return type is not portable. [CastAddressToIntegerAtReturn]
    return admin;
    ^
beSOURCE-CPP\src\20200719142400\28.Info_Leak_By_Comment\C28001.cpp:36:17: warning: Size of pointer 'ipasswd' used instead of size of its data. [pointerSize]
    if (strncmp(ipasswd, passwd, sizeof(ipasswd)) != 0) {
                ^
beSOURCE-CPP\src\20200719142400\31.TOC_TOU\C31001.cpp:22:9: style: The scope of the variable 'f' can be reduced. [variableScope]
  FILE* f;
        ^
beSOURCE-CPP\src\20200719142400\34.Error_Without_Action\CWE390_Error_Without_Action__fopen_01.cpp:30:16: warning: Either the condition 'fileDesc==NULL' is redundant or there is possible null pointer dereference: fileDesc. [nullPointerRedundantCheck]
        fclose(fileDesc);
               ^
beSOURCE-CPP\src\20200719142400\34.Error_Without_Action\CWE390_Error_Without_Action__fopen_01.cpp:26:22: note: Assuming that condition 'fileDesc==NULL' is not redundant
        if (fileDesc == NULL)
                     ^
beSOURCE-CPP\src\20200719142400\34.Error_Without_Action\CWE390_Error_Without_Action__fopen_01.cpp:30:16: note: Null pointer dereference
        fclose(fileDesc);
               ^
beSOURCE-CPP\src\20200719142400\34.Error_Without_Action\CWE390_Error_Without_Action__sqrt_01.cpp:28:37: error: Invalid sqrt() argument nr 1. The value is -1 but the valid values are '0.0:'. [invalidFunctionArg]
        doubleNumber = (double)sqrt((double)-1);
                                    ^
beSOURCE-CPP\src\20200719142400\34.Error_Without_Action\CWE390_Error_Without_Action__sqrt_01.cpp:47:37: error: Invalid sqrt() argument nr 1. The value is -1 but the valid values are '0.0:'. [invalidFunctionArg]
        doubleNumber = (double)sqrt((double)-1);
                                    ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\C36001.cpp:14:4: error: Null pointer dereference: p [nullPointer]
  *p = '1';
   ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\C36001.cpp:13:7: note: Assignment 'p=(char*)0', assigned value is 0
  p = (char *)0;
      ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\C36001.cpp:14:4: note: Null pointer dereference
  *p = '1';
   ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__char_01.cpp:56:14: style: Condition 'data!=NULL' is always false [knownConditionTrueFalse]
    if (data != NULL)
             ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__char_01.cpp:54:12: note: Assignment 'data=NULL', assigned value is 0
    data = NULL;
           ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__char_01.cpp:56:14: note: Condition 'data!=NULL' is always false
    if (data != NULL)
             ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__char_01.cpp:31:22: error: Null pointer dereference: data [nullPointer]
    printHexCharLine(data[0]);
                     ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__char_01.cpp:28:12: note: Assignment 'data=NULL', assigned value is 0
    data = NULL;
           ^
beSOURCE-CPP\src\20200719142400\36.NULL_Pointer_Dereference\CWE476_NULL_Pointer_Dereference__char_01.cpp:31:22: note: Null pointer dereference
    printHexCharLine(data[0]);
                     ^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37001.cpp:37:2: error: Memory leak: p [memleak]
 return 0;
 ^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37001.cpp:33:4: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
 p = (int *)malloc(sizeof(int));  /*  */
   ^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37001.cpp:33:20: style: Variable 'p' is allocated memory that is never used. [unusedAllocatedMemory]
 p = (int *)malloc(sizeof(int));  /*  */
                   ^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37001.cpp:44:23: style: Variable 'p' is allocated memory that is never used. [unusedAllocatedMemory]
    p = (int *)calloc(10, sizeof(int));  /*  */
                      ^
beSOURCE-CPP\src\20200719142400\43.Reliance_on_DNS_Lookups_in_a_Security_Decision\C43001.cpp:21:36: warning: Size of pointer 'tHost' used instead of size of its data. [pointerSize]
    if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost)))
                                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:144:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:138:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:144:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:138:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:135:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:138:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:106:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:107:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:140:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:141:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:223:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.cpp:224:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:81:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:75:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:81:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:75:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:72:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:75:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:43:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:44:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:77:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:78:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:117:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.cpp:118:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:68:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:62:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:68:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:62:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:59:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:62:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:30:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:31:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:64:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:65:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:93:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.cpp:94:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:36:19: error: Array 'buffer[10]' accessed at index 10, which is out of bounds. [arrayIndexOutOfBounds]
            buffer[data] = 1;
                  ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:28:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:36:19: note: Array index out of bounds
            buffer[data] = 1;
                  ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:34:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:28:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:34:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:68:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:62:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:68:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:96:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0 && data < (10))
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:91:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:96:18: note: Condition 'data>=0' is always true
        if (data >= 0 && data < (10))
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:96:31: style: Condition 'data<10' is always false [knownConditionTrueFalse]
        if (data >= 0 && data < (10))
                              ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:91:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:96:31: note: Condition 'data<10' is always false
        if (data >= 0 && data < (10))
                              ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:28:10: note: data is overwritten
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:62:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:59:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:62:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:91:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:89:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:91:10: note: data is overwritten
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:30:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:31:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:64:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:65:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:93:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.cpp:94:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:157:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:151:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:157:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:151:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:148:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:151:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:119:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:120:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:153:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:154:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:249:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.cpp:250:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:68:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:62:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:68:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:28:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:62:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:59:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:62:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:91:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:89:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:91:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:30:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:31:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:64:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:65:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:93:13: style: The scope of the variable 'i' can be reduced. [variableScope]
        int i;
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.cpp:94:13: style: The scope of the variable 'buffer' can be reduced. [variableScope]
        int buffer[10] = { 0 };
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01.cpp:28:13: style: Variable 'source' can be declared with const [constVariable]
        int source[10] = {0};
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01.cpp:51:13: style: Variable 'source' can be declared with const [constVariable]
        int source[10] = {0};
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01.cpp:32:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA((10+1)*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01.cpp:53:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA((10)*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.cpp:32:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA((10+1)*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.cpp:59:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA((10)*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_01.cpp:32:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA((10+1)*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_01.cpp:54:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA((10)*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_01.cpp:32:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA((10+1)*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_01.cpp:54:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA((10)*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_01.cpp:32:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA((10+1)*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_01.cpp:54:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA((10)*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_01.cpp:32:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[10+1];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_01.cpp:53:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[10];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_01.cpp:32:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[10+1];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_01.cpp:59:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[10];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_01.cpp:32:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[10+1];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_01.cpp:54:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[10];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01.cpp:32:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[10+1];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01.cpp:54:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[10];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_01.cpp:32:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[10+1];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_01.cpp:54:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[10];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_01.cpp:32:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA((10+1)*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_01.cpp:53:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA((10)*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_01.cpp:32:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA((10+1)*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_01.cpp:59:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA((10)*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_01.cpp:32:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA((10+1)*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_01.cpp:54:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA((10)*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_01.cpp:32:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA((10+1)*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_01.cpp:54:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA((10)*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_01.cpp:32:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA((10+1)*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_01.cpp:54:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA((10)*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_01.cpp:32:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[10+1];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_01.cpp:53:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[10];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_01.cpp:32:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[10+1];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_01.cpp:59:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[10];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_01.cpp:32:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[10+1];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_01.cpp:54:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[10];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_01.cpp:32:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[10+1];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_01.cpp:54:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[10];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_01.cpp:32:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[10+1];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_01.cpp:54:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[10];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_01.cpp:27:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_01.cpp:55:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_01.cpp:27:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_01.cpp:51:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_01.cpp:27:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_01.cpp:51:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_01.cpp:27:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_01.cpp:51:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_01.cpp:33:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_01.cpp:56:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_01.cpp:27:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_01.cpp:55:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_01.cpp:27:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_01.cpp:51:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_01.cpp:27:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_01.cpp:51:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_01.cpp:27:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_01.cpp:50:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_01.cpp:27:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_01.cpp:51:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_01.cpp:33:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_01.cpp:56:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_01.cpp:25:26: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    int * dataGoodBuffer = (int *)ALLOCA(100*sizeof(int));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_01.cpp:51:25: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    int * dataBadBuffer = (int *)ALLOCA(50*sizeof(int));
                        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_01.cpp:25:26: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    int * dataGoodBuffer = (int *)ALLOCA(100*sizeof(int));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_01.cpp:45:25: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    int * dataBadBuffer = (int *)ALLOCA(50*sizeof(int));
                        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_01.cpp:25:26: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    int * dataGoodBuffer = (int *)ALLOCA(100*sizeof(int));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_01.cpp:45:25: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    int * dataBadBuffer = (int *)ALLOCA(50*sizeof(int));
                        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_01.cpp:25:9: style: Unused variable: dataGoodBuffer [unusedVariable]
    int dataGoodBuffer[100];
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_01.cpp:51:9: style: Unused variable: dataBadBuffer [unusedVariable]
    int dataBadBuffer[50];
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_01.cpp:25:9: style: Unused variable: dataGoodBuffer [unusedVariable]
    int dataGoodBuffer[100];
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_01.cpp:45:9: style: Unused variable: dataBadBuffer [unusedVariable]
    int dataBadBuffer[50];
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_01.cpp:25:9: style: Unused variable: dataGoodBuffer [unusedVariable]
    int dataGoodBuffer[100];
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_01.cpp:45:9: style: Unused variable: dataBadBuffer [unusedVariable]
    int dataBadBuffer[50];
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.cpp:25:36: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    twoIntsStruct * dataGoodBuffer = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
                                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.cpp:60:35: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    twoIntsStruct * dataBadBuffer = (twoIntsStruct *)ALLOCA(50*sizeof(twoIntsStruct));
                                  ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_01.cpp:27:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_01.cpp:55:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_01.cpp:27:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_01.cpp:51:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_01.cpp:27:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_01.cpp:51:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_01.cpp:27:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_01.cpp:51:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_01.cpp:33:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_01.cpp:56:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.cpp:27:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[100];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.cpp:55:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[50];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_01.cpp:27:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[100];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_01.cpp:51:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[50];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_01.cpp:27:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[100];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_01.cpp:51:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[50];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_01.cpp:27:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[100];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_01.cpp:51:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[50];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_01.cpp:33:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[100];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_01.cpp:56:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[50];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_01.cpp:40:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_01.cpp:67:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01.cpp:40:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01.cpp:67:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_01.cpp:40:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_01.cpp:67:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:29:12: style: struct member '_charVoid::voidThird' is never used. [unusedStructMember]
    void * voidThird;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01.cpp:29:12: style: struct member '_charVoid::voidThird' is never used. [unusedStructMember]
    void * voidThird;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_01.cpp:27:27: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataGoodBuffer = (char *)ALLOCA(100*sizeof(char));
                          ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_01.cpp:50:26: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    char * dataBadBuffer = (char *)ALLOCA(50*sizeof(char));
                         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_01.cpp:27:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_01.cpp:50:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_01.cpp:27:10: style: Unused variable: dataGoodBuffer [unusedVariable]
    char dataGoodBuffer[100];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_01.cpp:50:10: style: Unused variable: dataBadBuffer [unusedVariable]
    char dataBadBuffer[50];
         ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01.cpp:27:30: style: Variable 'dataGoodBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataGoodBuffer = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
                             ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01.cpp:50:29: style: Variable 'dataBadBuffer' is assigned a value that is never used. [unreadVariable]
    wchar_t * dataBadBuffer = (wchar_t *)ALLOCA(50*sizeof(wchar_t));
                            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_01.cpp:27:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[100];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_01.cpp:50:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[50];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_01.cpp:27:13: style: Unused variable: dataGoodBuffer [unusedVariable]
    wchar_t dataGoodBuffer[100];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_01.cpp:50:13: style: Unused variable: dataBadBuffer [unusedVariable]
    wchar_t dataBadBuffer[50];
            ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_01.cpp:29:12: style: struct member '_charVoid::voidThird' is never used. [unusedStructMember]
    void * voidThird;
           ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_01.cpp:29:12: style: struct member '_charVoid::voidThird' is never used. [unusedStructMember]
    void * voidThird;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.cpp:33:17: error: Array 'data[2]' accessed at index 9, which is out of bounds. [arrayIndexOutOfBounds]
            data[i] = source[i];
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.cpp:31:23: note: Assuming that condition 'i<10' is not redundant
        for (i = 0; i < 10; i++)
                      ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.cpp:33:17: note: Array index out of bounds
            data[i] = source[i];
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.cpp:28:13: style: Variable 'source' can be declared with const [constVariable]
        int source[10] = {0};
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.cpp:52:13: style: Variable 'source' can be declared with const [constVariable]
        int source[10] = {0};
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.cpp:30:16: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memcpy(data, source, 10*sizeof(int));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.cpp:26:10: note: Assign data, buffer with size 10
    data = (int *)malloc(10);
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.cpp:30:16: note: Buffer overrun
        memcpy(data, source, 10*sizeof(int));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01.cpp:30:17: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memmove(data, source, 10*sizeof(int));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01.cpp:26:10: note: Assign data, buffer with size 10
    data = (int *)malloc(10);
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01.cpp:30:17: note: Buffer overrun
        memmove(data, source, 10*sizeof(int));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.cpp:155:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.cpp:144:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.cpp:155:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.cpp:144:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.cpp:141:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.cpp:144:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.cpp:92:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.cpp:81:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.cpp:92:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.cpp:81:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.cpp:78:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.cpp:81:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.cpp:79:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.cpp:68:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.cpp:79:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.cpp:68:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.cpp:65:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.cpp:68:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:41:19: error: Array 'buffer[10]' accessed at index 10, which is out of bounds. [arrayIndexOutOfBounds]
            buffer[data] = 1;
                  ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:28:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:41:19: note: Array index out of bounds
            buffer[data] = 1;
                  ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:39:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:28:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:39:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:79:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:68:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:79:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:113:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0 && data < (10))
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:103:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:113:18: note: Condition 'data>=0' is always true
        if (data >= 0 && data < (10))
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:113:31: style: Condition 'data<10' is always false [knownConditionTrueFalse]
        if (data >= 0 && data < (10))
                              ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:103:12: note: Assignment 'data=10', assigned value is 10
    data = 10;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:113:31: note: Condition 'data<10' is always false
        if (data >= 0 && data < (10))
                              ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:28:10: note: data is overwritten
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:68:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:65:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:68:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:103:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:101:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.cpp:103:10: note: data is overwritten
    data = 10;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.cpp:168:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.cpp:157:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.cpp:168:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.cpp:157:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.cpp:154:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.cpp:157:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:79:18: style: Condition 'data>=0' is always true [knownConditionTrueFalse]
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:68:12: note: Assignment 'data=7', assigned value is 7
    data = 7;
           ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:79:18: note: Condition 'data>=0' is always true
        if (data >= 0)
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:28:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:68:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:65:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:68:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:103:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:101:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.cpp:103:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01.cpp:38:17: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
            data[i] = source[i];
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01.cpp:36:23: note: Assuming that condition 'i<100' is not redundant
        for (i = 0; i < 100; i++)
                      ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01.cpp:38:17: note: Array index out of bounds
            data[i] = source[i];
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01.cpp:40:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01.cpp:36:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01.cpp:35:16: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memcpy(data, source, 100*sizeof(char));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01.cpp:28:10: note: Assign data, buffer with size 50
    data = (char *)malloc(50*sizeof(char));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01.cpp:35:16: note: Buffer overrun
        memcpy(data, source, 100*sizeof(char));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.cpp:36:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.cpp:35:17: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memmove(data, source, 100*sizeof(char));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.cpp:28:10: note: Assign data, buffer with size 50
    data = (char *)malloc(50*sizeof(char));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.cpp:35:17: note: Buffer overrun
        memmove(data, source, 100*sizeof(char));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01.cpp:36:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01.cpp:35:17: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        strncpy(data, source, 100-1);
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01.cpp:28:10: note: Assign data, buffer with size 50
    data = (char *)malloc(50*sizeof(char));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01.cpp:35:17: note: Buffer overrun
        strncpy(data, source, 100-1);
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_01.cpp:41:18: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        SNPRINTF(data, 100, "%s", source);
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_01.cpp:34:10: note: Assign data, buffer with size 50
    data = (char *)malloc(50*sizeof(char));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_01.cpp:41:18: note: Buffer overrun
        SNPRINTF(data, 100, "%s", source);
                 ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_01.cpp:34:21: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
                data[i] = source[i];
                    ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.cpp:34:21: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
                data[i] = source[i];
                    ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01.cpp:30:16: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memcpy(data, source, 100*sizeof(int));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01.cpp:26:10: note: Assign data, buffer with size 200
    data = (int *)malloc(50*sizeof(int));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01.cpp:30:16: note: Buffer overrun
        memcpy(data, source, 100*sizeof(int));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01.cpp:30:17: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memmove(data, source, 100*sizeof(int));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01.cpp:26:10: note: Assign data, buffer with size 200
    data = (int *)malloc(50*sizeof(int));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01.cpp:30:17: note: Buffer overrun
        memmove(data, source, 100*sizeof(int));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_01.cpp:38:17: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
            data[i] = source[i];
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_01.cpp:36:23: note: Assuming that condition 'i<100' is not redundant
        for (i = 0; i < 100; i++)
                      ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_01.cpp:38:17: note: Array index out of bounds
            data[i] = source[i];
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_01.cpp:40:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01.cpp:36:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01.cpp:35:16: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memcpy(data, source, 100*sizeof(wchar_t));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01.cpp:28:10: note: Assign data, buffer with size 100
    data = (wchar_t *)malloc(50*sizeof(wchar_t));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01.cpp:35:16: note: Buffer overrun
        memcpy(data, source, 100*sizeof(wchar_t));
               ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01.cpp:36:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01.cpp:35:17: error: Buffer is accessed out of bounds: data [bufferAccessOutOfBounds]
        memmove(data, source, 100*sizeof(wchar_t));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01.cpp:28:10: note: Assign data, buffer with size 100
    data = (wchar_t *)malloc(50*sizeof(wchar_t));
         ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01.cpp:35:17: note: Buffer overrun
        memmove(data, source, 100*sizeof(wchar_t));
                ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_01.cpp:36:13: error: Array 'data[50]' accessed at index 99, which is out of bounds. [arrayIndexOutOfBounds]
        data[100-1] = L'\0'; /* Ensure the destination buffer is null terminated */
            ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_01.cpp:39:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_01.cpp:66:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = '\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_01.cpp:39:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_01.cpp:66:20: style: Variable 'dest[50-1]' is assigned a value that is never used. [unreadVariable]
        dest[50-1] = L'\0'; /* Ensure the destination buffer is null terminated */
                   ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_connect_socket_divide_01.cpp:120:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_connect_socket_divide_01.cpp:118:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_connect_socket_divide_01.cpp:120:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_connect_socket_modulo_01.cpp:120:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_connect_socket_modulo_01.cpp:118:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_connect_socket_modulo_01.cpp:120:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fgets_divide_01.cpp:57:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fgets_divide_01.cpp:55:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fgets_divide_01.cpp:57:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fgets_modulo_01.cpp:57:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fgets_modulo_01.cpp:55:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fgets_modulo_01.cpp:57:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fscanf_divide_01.cpp:44:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fscanf_divide_01.cpp:42:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fscanf_divide_01.cpp:44:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fscanf_modulo_01.cpp:44:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fscanf_modulo_01.cpp:42:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_fscanf_modulo_01.cpp:44:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_listen_socket_divide_01.cpp:133:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_listen_socket_divide_01.cpp:131:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_listen_socket_divide_01.cpp:133:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_listen_socket_modulo_01.cpp:133:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_listen_socket_modulo_01.cpp:131:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_listen_socket_modulo_01.cpp:133:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:28:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:44:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:42:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:44:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:56:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:54:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_divide_01.cpp:56:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:28:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:44:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:42:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:44:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:56:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:54:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_rand_modulo_01.cpp:56:10: note: data is overwritten
    data = RAND32();
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:58:14: style: Condition 'data!=0' is always false [knownConditionTrueFalse]
    if( data != 0 )
             ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:56:12: note: Assignment 'data=0', assigned value is 0
    data = 0;
           ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:58:14: note: Condition 'data!=0' is always false
    if( data != 0 )
             ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:28:10: note: data is overwritten
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:44:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:42:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:44:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:56:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:54:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:56:10: note: data is overwritten
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:30:22: error: Division by zero. [zerodiv]
    printIntLine(100 / data);
                     ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:28:12: note: Assignment 'data=0', assigned value is 0
    data = 0;
           ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_divide_01.cpp:30:22: note: Division by zero
    printIntLine(100 / data);
                     ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:58:14: style: Condition 'data!=0' is always false [knownConditionTrueFalse]
    if( data != 0 )
             ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:56:12: note: Assignment 'data=0', assigned value is 0
    data = 0;
           ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:58:14: note: Condition 'data!=0' is always false
    if( data != 0 )
             ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:28:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:26:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:28:10: note: data is overwritten
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:44:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:42:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:44:10: note: data is overwritten
    data = 7;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:56:10: style: Variable 'data' is reassigned a value before the old one has been used. [redundantAssignment]
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:54:10: note: data is assigned
    data = -1;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:56:10: note: data is overwritten
    data = 0;
         ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:30:22: error: Division by zero. [zerodiv]
    printIntLine(100 % data);
                     ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:28:12: note: Assignment 'data=0', assigned value is 0
    data = 0;
           ^
beSOURCE-CPP\src\20200719142400\E15.CWE369_Divide_by_Zero\CWE369_Divide_by_Zero__int_zero_modulo_01.cpp:30:22: note: Division by zero
    printIntLine(100 % data);
                     ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__malloc_realloc_char_01.cpp:32:9: error: Common realloc mistake: 'data' nulled but not freed upon failure [memleakOnRealloc]
        data = (char *)realloc(data, (130000)*sizeof(char));
        ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__malloc_realloc_int64_t_01.cpp:32:9: error: Common realloc mistake: 'data' nulled but not freed upon failure [memleakOnRealloc]
        data = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
        ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__malloc_realloc_int_01.cpp:32:9: error: Common realloc mistake: 'data' nulled but not freed upon failure [memleakOnRealloc]
        data = (int *)realloc(data, (130000)*sizeof(int));
        ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_01.cpp:33:9: error: Common realloc mistake: 'data' nulled but not freed upon failure [memleakOnRealloc]
        data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
        ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_01.cpp:33:9: error: Common realloc mistake: 'data' nulled but not freed upon failure [memleakOnRealloc]
        data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
        ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__malloc_realloc_wchar_t_01.cpp:32:9: error: Common realloc mistake: 'data' nulled but not freed upon failure [memleakOnRealloc]
        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__strdup_char_01.cpp:31:16: style: Obsolete function 'strdup' called. It is recommended to use '_strdup' instead. [strdupCalled]
        data = strdup(myString);
               ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__strdup_char_01.cpp:67:16: style: Obsolete function 'strdup' called. It is recommended to use '_strdup' instead. [strdupCalled]
        data = strdup(myString);
               ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__strdup_wchar_t_01.cpp:31:16: style: Obsolete function 'wcsdup' called. It is recommended to use '_wcsdup' instead. [wcsdupCalled]
        data = wcsdup(myString);
               ^
beSOURCE-CPP\src\20200719142400\E16.CWE401_Memory_Leak\CWE401_Memory_Leak__strdup_wchar_t_01.cpp:67:16: style: Obsolete function 'wcsdup' called. It is recommended to use '_wcsdup' instead. [wcsdupCalled]
        data = wcsdup(myString);
               ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_char_01.cpp:33:5: error: Memory pointed to by 'data' is freed twice. [doubleFree]
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_char_01.cpp:31:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_char_01.cpp:33:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_int64_t_01.cpp:33:5: error: Memory pointed to by 'data' is freed twice. [doubleFree]
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_int64_t_01.cpp:31:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_int64_t_01.cpp:33:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_int_01.cpp:33:5: error: Memory pointed to by 'data' is freed twice. [doubleFree]
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_int_01.cpp:31:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_int_01.cpp:33:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_long_01.cpp:33:5: error: Memory pointed to by 'data' is freed twice. [doubleFree]
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_long_01.cpp:31:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_long_01.cpp:33:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_struct_01.cpp:33:5: error: Memory pointed to by 'data' is freed twice. [doubleFree]
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_struct_01.cpp:31:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_struct_01.cpp:33:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_wchar_t_01.cpp:33:5: error: Memory pointed to by 'data' is freed twice. [doubleFree]
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_wchar_t_01.cpp:31:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E17.CWE415_Double_Free\CWE415_Double_Free__malloc_free_wchar_t_01.cpp:33:5: note: Memory pointed to by 'data' is freed twice.
    free(data);
    ^
beSOURCE-CPP\src\20200719142400\E18.CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_01.cpp:20:12: style: The scope of the variable 'i' can be reduced. [variableScope]
    size_t i = 0;
           ^
beSOURCE-CPP\src\20200719142400\E18.CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_01.cpp:21:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    size_t j;
           ^
beSOURCE-CPP\src\20200719142400\E18.CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_01.cpp:44:12: style: The scope of the variable 'i' can be reduced. [variableScope]
    size_t i = 0;
           ^
beSOURCE-CPP\src\20200719142400\E18.CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_01.cpp:45:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    size_t j;
           ^
beSOURCE-CPP\src\20200719142400\E18.CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_01.cpp:20:14: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
    size_t i = 0;
             ^
beSOURCE-CPP\src\20200719142400\E18.CWE416_Use_After_Free\CWE416_Use_After_Free__return_freed_ptr_01.cpp:44:14: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
    size_t i = 0;
             ^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:52:5: portability: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
    printf("%ud\n", sizeTNumber);
    ^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:114:9: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        sscanf(&hex[2 * numWritten], "%02x", &byte);
        ^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:136:9: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        swscanf(&hex[2 * numWritten], L"%02x", &byte);
        ^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:19:22: style: struct member '_stdThread::start' is never used. [unusedStructMember]
    stdThreadRoutine start;
                     ^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:20:11: style: struct member '_stdThread::args' is never used. [unusedStructMember]
    void *args;
          ^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:15:15: style: struct member '_stdThread::handle' is never used. [unusedStructMember]
    uintptr_t handle;
              ^
bufferAccessOutOfBounds\bad.c:6:10: error: Array 'a[2]' accessed at index 2, which is out of bounds. [arrayIndexOutOfBounds]
        a[i] = 0;
         ^
bufferAccessOutOfBounds\bad.c:5:19: note: Assuming that condition 'i<3' is not redundant
    for (i = 0; i < 3; i++)
                  ^
bufferAccessOutOfBounds\bad.c:6:10: note: Array index out of bounds
        a[i] = 0;
         ^
chroot.cpp:94:14: style: The scope of the variable 'numread' can be reduced. [variableScope]
    ssize_t  numread;
             ^
erase\bad.cpp:9:32: error: Using iterator to local container 'items' that may be invalid. [invalidContainer]
    for (iter = items.begin(); iter != items.end(); ++iter) {
                               ^
erase\bad.cpp:9:28: note: Iterator to container is created here.
    for (iter = items.begin(); iter != items.end(); ++iter) {
                           ^
erase\bad.cpp:10:19: note: Assuming condition is true.
        if (*iter == 2) {
                  ^
erase\bad.cpp:10:19: note: Assuming condition is true.
        if (*iter == 2) {
                  ^
erase\bad.cpp:9:37: note: Assuming condition is true.
    for (iter = items.begin(); iter != items.end(); ++iter) {
                                    ^
erase\bad.cpp:11:19: note: After calling 'erase', iterators or references to the container's data may be invalid .
            items.erase(iter);
                  ^
erase\bad.cpp:4:22: note: Variable created here.
    std::vector<int> items;
                     ^
erase\bad.cpp:9:32: note: Using iterator to local container 'items' that may be invalid.
    for (iter = items.begin(); iter != items.end(); ++iter) {
                               ^
memleak\bad.c:8:5: error: Memory leak: a [memleak]
    return result;
    ^
outOfBounds\bad.c:5:12: error: Buffer is accessed out of bounds: str [bufferAccessOutOfBounds]
    strcpy(str, "0123456789abcdef");
           ^
resourceLeak\bad.c:8:5: error: Resource leak: a [resourceLeak]
    return 0;
    ^
sethostid.cpp:49:47: error: No pair for character ("). Can't process file. File is either invalid or unicode, which is currently not supported. [syntaxError]
     cout << "Hostid \" " << hex << hostid << "\"
                                              ^
syntaxError\bad.c:2:1: error: Unmatched '{'. Configuration: ''. [syntaxError]
{
^
wcharmalloc.cpp:25:13: style: Variable 'newString' is reassigned a value before the old one has been used. [redundantAssignment]
  newString = (wchar_t *) malloc(wcslen(wideString)); // CWE 135
            ^
wcharmalloc.cpp:24:13: note: newString is assigned
  newString = (wchar_t *) malloc(strlen(wideString));  // CWE 135
            ^
wcharmalloc.cpp:25:13: note: newString is overwritten
  newString = (wchar_t *) malloc(wcslen(wideString)); // CWE 135
            ^
wcharmalloc.cpp:25:13: style: Variable 'newString' is assigned a value that is never used. [unreadVariable]
  newString = (wchar_t *) malloc(wcslen(wideString)); // CWE 135
            ^
wcharmalloc.cpp:25:34: style: Variable 'newString' is allocated memory that is never used. [unusedAllocatedMemory]
  newString = (wchar_t *) malloc(wcslen(wideString)); // CWE 135
                                 ^
C\src\20200813192600\orig\bof_02.c:8:5: error: Array index out of bounds; 'buf' buffer size is 40 and it is accessed at offset 40. [ctuArrayIndex]
    buf[10] = 1;
    ^
C\src\20200813192600\orig\bof_02.c:16:20: note: Calling function test1_aux, 1st argument is uninitialized
    buf = test1_aux(arr);
                   ^
C\src\20200813192600\orig\bof_02.c:8:5: note: Using argument buf
    buf[10] = 1;
    ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: error: The one definition rule is violated, different classes/structs have the same name '_charVoid' [ctuOneDefinitionRuleViolation]
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_01.cpp:25:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: error: The one definition rule is violated, different classes/structs have the same name '_charVoid' [ctuOneDefinitionRuleViolation]
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_01.cpp:25:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: error: The one definition rule is violated, different classes/structs have the same name '_charVoid' [ctuOneDefinitionRuleViolation]
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_01.cpp:24:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: error: The one definition rule is violated, different classes/structs have the same name '_charVoid' [ctuOneDefinitionRuleViolation]
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E05.CWE122_Heap_Based_Buffer_Overflow\CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_01.cpp:24:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
beSOURCE-CPP\src\20200719142400\E04.CWE121_Stack_Based_Buffer_Overflow\CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.cpp:25:9: note: The one definition rule is violated, different classes/structs have the same name '_charVoid'
typedef struct _charVoid
        ^
_src\web_operator_group.c:1636:0: style: The function 'Aggiorna_Paesi' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:286:0: style: The function 'CTXCancelTimeout' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:408:0: style: The function 'CTXCheckContext' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:399:0: style: The function 'CTXExtendLifetimeOfContext' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:339:0: style: The function 'CTXReleaseContext' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:222:0: style: The function 'CTXSignalTimeout' is never used. [unusedFunction]

^
_src\web_operator_group.c:746:0: style: The function 'Cacello_SingoloOPdaGR' is never used. [unusedFunction]

^
_src\web_operator_group.c:1725:0: style: The function 'Cancella_Gruppo_Paesi' is never used. [unusedFunction]

^
sethostname.cpp:3:0: style: The function 'CreateConnections' is never used. [unusedFunction]

^
_src\GTT\Prefix\dblib.c:26:0: style: The function 'DBClose' is never used. [unusedFunction]

^
_src\GTT\Prefix\dblib.c:34:0: style: The function 'DBInsert' is never used. [unusedFunction]

^
_src\GTT\Prefix\dblib.c:15:0: style: The function 'DBOpen' is never used. [unusedFunction]

^
_src\GTT\Prefix\dblib.c:134:0: style: The function 'DBUnlockFile' is never used. [unusedFunction]

^
_src\GTT\Prefix\dblib.c:112:0: style: The function 'DBUnlockRecord' is never used. [unusedFunction]

^
_src\GTT\Prefix\dblib.c:90:0: style: The function 'DBUpdateKeepLock' is never used. [unusedFunction]

^
_src\GTT\Prefix\dblib.c:66:0: style: The function 'DBUpdateUnlock' is never used. [unusedFunction]

^
_src\web_operator_import.c:1690:0: style: The function 'Del_OP_senza_GT' is never used. [unusedFunction]

^
_src\LTE\s6aevt.c:29:0: style: The function 'EVT_manage_init' is never used. [unusedFunction]

^
_src\GTT\Prefix\gttlib.c:676:0: style: The function 'FPDB_Close2' is never used. [unusedFunction]

^
_src\MAP\arpdb.c:149:0: style: The function 'Find_ARP' is never used. [unusedFunction]

^
_src\MAP\tfsdb.c:41:0: style: The function 'Find_Prefix' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:229:0: style: The function 'Func_MTS_SEND_Proc' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:165:0: style: The function 'Func_MTS_SEND_Taskid' is never used. [unusedFunction]

^
_src\MAP\funcipc.c:32:0: style: The function 'Func_SS_SEND' is never used. [unusedFunction]

^
_src\GTT\Prefix\gttlib.c:170:0: style: The function 'GT_MGT_Load' is never used. [unusedFunction]

^
_src\GTT\Prefix\gttlib.c:396:0: style: The function 'GT_PC_GT_Load' is never used. [unusedFunction]

^
GetPrivateProfileString.cpp:33:0: style: The function 'IsValidSection' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:120:0: style: The function 'LoadCTX' is never used. [unusedFunction]

^
_src\MAP\arpdb.c:198:0: style: The function 'Load_ARP_List' is never used. [unusedFunction]

^
_src\MAP\tfsdb.c:88:0: style: The function 'Load_Prefix_List' is never used. [unusedFunction]

^
_src\MAP\lu.c:130:0: style: The function 'MAP_Decode_IMSI_LU_ARGUMENT' is never used. [unusedFunction]

^
_src\MAP\lu.c:92:0: style: The function 'MAP_Encode_GPRS_IMSI_LU_ARGUMENT_Operation' is never used. [unusedFunction]

^
_src\MAP\lu.c:54:0: style: The function 'MAP_Encode_GSM_IMSI_LU_ARGUMENT_Operation' is never used. [unusedFunction]

^
_src\LTE\mbewrapper.c:42:0: style: The function 'MbeFileOpenWrapper' is never used. [unusedFunction]

^
_src\LTE\mbewrapper.c:101:0: style: The function 'MbeFileReadLWrapper' is never used. [unusedFunction]

^
_src\LTE\mbewrapper.c:72:0: style: The function 'MbeFileReadWrapper' is never used. [unusedFunction]

^
_src\LTE\mbewrapper.c:158:0: style: The function 'MbeFileWriteUUWrapper' is never used. [unusedFunction]

^
_src\LTE\mbewrapper.c:130:0: style: The function 'MbeFileWriteWrapper' is never used. [unusedFunction]

^
_src\LTE\mbewrapper.c:214:0: style: The function 'MbeLockRecWrapper' is never used. [unusedFunction]

^
_src\LTE\mbewrapper.c:186:0: style: The function 'MbeUnlockRecWrapper' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\21.Cryptographic_Issues(Key_Length)\C21001.cpp:26:0: style: The function 'RSAKey' is never used. [unusedFunction]

^
_src\gtt_lte_utility.c:135:0: style: The function 'Rovescia' is never used. [unusedFunction]

^
_src\MAP\funcipc.c:127:0: style: The function 'SS7_MTS_SEND_Taskid' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:40:0: style: The function 'SaveCTX' is never used. [unusedFunction]

^
_src\GTT\Prefix\gttlib.c:577:0: style: The function 'SeekGT' is never used. [unusedFunction]

^
_src\GTT\Prefix\gttlib.c:279:0: style: The function 'SeekMGT' is never used. [unusedFunction]

^
_src\GTT\Prefix\gttlib.c:545:0: style: The function 'SeekPC' is never used. [unusedFunction]

^
GetPrivateProfileString.cpp:28:0: style: The function 'SetInfFileName' is never used. [unusedFunction]

^
_src\MAP\tfsstat.c:139:0: style: The function 'SetMSCStat' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:265:0: style: The function 'SetThroughputStat' is never used. [unusedFunction]

^
_src\MAP\tfsstat.c:149:0: style: The function 'SetTimerBump_' is never used. [unusedFunction]

^
_src\web_xml_rules.c:264:0: style: The function 'SetUserId' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:416:0: style: The function 'SetdiscardedTimeout' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:423:0: style: The function 'SetlockTimeout' is never used. [unusedFunction]

^
_src\LTE\ctxl.c:430:0: style: The function 'SetprotectedClass' is never used. [unusedFunction]

^
_src\trsnotifier.c:10:0: style: The function 'T0000H06_07FEB2019_KTSTEADZ' is never used. [unusedFunction]

^
_src\web_imsi_WL.c:19:0: style: The function 'T0000H06_13FEB2019_KTSTEA10_01_AEA' is never used. [unusedFunction]

^
_src\trseur.c:23:0: style: The function 'T0000H06_21JUN2018_KTSTEA10_01' is never used. [unusedFunction]

^
_src\gtt_lte_hssdb.c:2:0: style: The function 'T0000H06_31MAR2017_KTSTEA10' is never used. [unusedFunction]

^
_src\trsnotifier.c:12:0: style: The function 'T0000L16_07FEB2019_KTSTEADZ' is never used. [unusedFunction]

^
_src\web_imsi_WL.c:21:0: style: The function 'T0000L16_13FEB2019_KTSTEA10_01_AEA' is never used. [unusedFunction]

^
_src\trseur.c:25:0: style: The function 'T0000L16_21JUN2018_KTSTEA10_01' is never used. [unusedFunction]

^
_src\gtt_lte_hssdb.c:4:0: style: The function 'T0000L16_31MAR2017_KTSTEA10' is never used. [unusedFunction]

^
_src\MAP\arpdb.c:177:0: style: The function 'Unload_ARP_List' is never used. [unusedFunction]

^
_src\MAP\tfsdb.c:67:0: style: The function 'Unload_Prefix_List' is never used. [unusedFunction]

^
_src\web_xml_rules.c:2427:0: style: The function 'addXMLTag' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\16.Improper_Authorization\C16001.cpp:24:0: style: The function 'anonyLDAP_bind' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1876:0: style: The function 'avlCheck' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1650:0: style: The function 'avlClearCurrent' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1665:0: style: The function 'avlCurrent' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1777:0: style: The function 'avlCut' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1795:0: style: The function 'avlFreeNode' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1529:0: style: The function 'avlGetData' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1261:0: style: The function 'avlHeight' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1272:0: style: The function 'avlInsert' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1813:0: style: The function 'avlLeftNode' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1128:0: style: The function 'avlNewTree' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1754:0: style: The function 'avlNext' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1471:0: style: The function 'avlNextNodeByKey' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1543:0: style: The function 'avlNodeData' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1815:0: style: The function 'avlNodeHeight' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1107:0: style: The function 'avlNodeKey' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1708:0: style: The function 'avlPrev' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1511:0: style: The function 'avlPrevNodeByKey' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1685:0: style: The function 'avlPreviousKey' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1580:0: style: The function 'avlRemoveByKey' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1814:0: style: The function 'avlRightNode' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1812:0: style: The function 'avlRootNode' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1636:0: style: The function 'avlSetCurrent' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1811:0: style: The function 'avlTotalNodes' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1571:0: style: The function 'avlUpdateData' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1224:0: style: The function 'avlWalk' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1232:0: style: The function 'avlWalkAscending' is never used. [unusedFunction]

^
_src\GTT\Prefix\avltree.c:1245:0: style: The function 'avlWalkDescending' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:188:0: style: The function 'bad1' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:189:0: style: The function 'bad2' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:190:0: style: The function 'bad3' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:191:0: style: The function 'bad4' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:192:0: style: The function 'bad5' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:193:0: style: The function 'bad6' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:194:0: style: The function 'bad7' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:195:0: style: The function 'bad8' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:196:0: style: The function 'bad9' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:51:0: style: The function 'checkChgFile' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\33.Information_Leak_Error\CWE209.cpp:5:0: style: The function 'cwe209_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\11.Path_Traversal\C11001.cpp:10:0: style: The function 'cwe23_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\23.Plaintext_Storage_of_Password\C23001.cpp:6:0: style: The function 'cwe256_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\24.Hard_Coded_Cryptographic_Key\C24001.cpp:12:0: style: The function 'cwe321_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\22.Insufficiently_Random_Values\C22001.cpp:6:0: style: The function 'cwe330_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\11.Path_Traversal\C11002.cpp:9:0: style: The function 'cwe36_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\05.Unrestricted_Upload_of_File_with_Dangerous_Type\C05001.cpp:9:0: style: The function 'cwe434' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\40.Information_Leak_of_System_Data\C40001.cpp:4:0: style: The function 'cwe497_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\25.Weak_Password_Requirements\C25001.cpp:23:0: style: The function 'cwe521_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\29.Unsalted_One_Way_Hash\C29001.cpp:26:0: style: The function 'cwe759_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\03.XSS\C03001.cpp:11:0: style: The function 'cwe80_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\09.LDAP_Injection\C09001.cpp:11:0: style: The function 'cwe90_bad' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\20.Hard_Coded_Password\C20001.cpp:6:0: style: The function 'dbaccess' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\43.Reliance_on_DNS_Lookups_in_a_Security_Decision\C43001.cpp:13:0: style: The function 'decision' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:125:0: style: The function 'decodeHexWChars' is never used. [unusedFunction]

^
_src\MAP\3des_esempio.c:36:0: style: The function 'decrypt1' is never used. [unusedFunction]

^
_src\MAP\3des_esempio.c:1:0: style: The function 'encrypt1' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\18.Use_Broken_Crypto\C18001.cpp:25:0: style: The function 'encryption_init' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\31.TOC_TOU\C31001.cpp:21:0: style: The function 'file_operation' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:152:0: style: The function 'getretAddr' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:151:0: style: The function 'globalReturnsFalse' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:146:0: style: The function 'globalReturnsTrue' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:156:0: style: The function 'globalReturnsTrueOrFalse' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:178:0: style: The function 'good2' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:179:0: style: The function 'good3' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:180:0: style: The function 'good4' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:181:0: style: The function 'good5' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:182:0: style: The function 'good6' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:183:0: style: The function 'good7' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:184:0: style: The function 'good8' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:185:0: style: The function 'good9' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\13.Integer_Overflow\C13001.cpp:7:0: style: The function 'intAlloc' is never used. [unusedFunction]

^
_src\string_convert.c:1:0: style: The function 'latin9_to_utf8' is never used. [unusedFunction]

^
C\src\20200813192600\fix\leak_01.c:16:0: style: The function 'leak_test' is never used. [unusedFunction]

^
C\src\20200813192600\fix\leak_02.c:17:0: style: The function 'leak_test_02' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37001.cpp:29:0: style: The function 'no_release' is never used. [unusedFunction]

^
_src\web_check_len_UTF8.c:562:0: style: The function 'num_conc' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37001.cpp:40:0: style: The function 'partially_no_release' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:90:0: style: The function 'printBytesLine' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:35:0: style: The function 'printFloatLine' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:75:0: style: The function 'printHexUnsignedCharLine' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:30:0: style: The function 'printShortLine' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:50:0: style: The function 'printSizeTLine' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:70:0: style: The function 'printUnsignedLine' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\io.cpp:60:0: style: The function 'printWcharLine' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37002.cpp:31:0: style: The function 'serverSock' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:83:0: style: The function 'setChgFile' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:157:0: style: The function 'setretAddr' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\37.Improper_Resource_Shutdown\C37002.cpp:19:0: style: The function 'sqlDB' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:48:0: style: The function 'stdThreadCreate' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:106:0: style: The function 'stdThreadDestroy' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:91:0: style: The function 'stdThreadJoin' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:161:0: style: The function 'stdThreadLockAcquire' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:133:0: style: The function 'stdThreadLockCreate' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:200:0: style: The function 'stdThreadLockDestroy' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\testcasesupport\std_thread.cpp:188:0: style: The function 'stdThreadLockRelease' is never used. [unusedFunction]

^
C\src\20200813192600\fix\bof_02.c:12:0: style: The function 'test1' is never used. [unusedFunction]

^
C\src\20200813192600\fix\div_by_zero.c:24:0: style: The function 'test2' is never used. [unusedFunction]

^
C\src\20200813192600\fix\struct.c:14:0: style: The function 'test_struct_01' is never used. [unusedFunction]

^
C\src\20200813192600\fix\struct.c:36:0: style: The function 'test_struct_02' is never used. [unusedFunction]

^
_src\MAP\des.c:461:0: style: The function 'tripledes_2keys' is never used. [unusedFunction]

^
_src\MAP\des.c:477:0: style: The function 'tripledes_3keys' is never used. [unusedFunction]

^
_src\LTE\s6afunc.c:114:0: style: The function 'utf8_to_extended_ascii' is never used. [unusedFunction]

^
_src\string_convert.c:49:0: style: The function 'utf8_to_latin9' is never used. [unusedFunction]

^
beSOURCE-CPP\src\20200719142400\28.Info_Leak_By_Comment\C28001.cpp:32:0: style: The function 'verifyAuth' is never used. [unusedFunction]

^
nofile:0:0: information: SrCPP cannot find all the include files (use --check-config for details) [missingInclude]

