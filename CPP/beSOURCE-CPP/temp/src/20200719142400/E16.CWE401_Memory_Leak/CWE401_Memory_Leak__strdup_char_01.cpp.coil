{
   ("filename", "C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp");
   ("language", "CPP");
   ("include", "std_testcase.h");
   ("include", "<stdio.h>");
   ("include", "<stdlib.h>");
   ("include", "<stddef.h>");
   ("include", "<time.h>");
   ("include", "<limits.h>");
   ("include", "<string.h>");
   ("include", "<stdint.h>");
   ("include", "<stdint.h>");
   ("include", "<ctype.h>");
   ("include", "<fcntl.h>");
   ("include", "<sys/types.h>");
   ("include", "<sys/stat.h>");
   ("include", "std_testcase_io.h");
   ("include", "std_testcase.h");
   ("include", "<wchar.h>");
}
{
   (!3, "C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/testcasesupport/std_testcase_io.h");
   (!2, "C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/testcasesupport/std_testcase.h");
   (!1, "C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp");
}
[
   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("__asm__(x)",["x"],"")
   ,(1#0,1#0,"<built-in>")}



,   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("__attribute__(x)",["x"],"")
   ,(1#0,1#0,"<built-in>")}



,   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("va_start(list)",["list"],"list = (char *) &va_alist")
   ,(1#0,1#0,"<built-in>")}



,   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("va_end(list)",["list"],"va_end(list)")
   ,(1#0,1#0,"<built-in>")}



,   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("va_arg(list,mode)",["list","mode"],"va_arg(list,(mode)null)")
   ,(1#0,1#0,"<built-in>")}



,   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("offsetof(st,m)",["st","m"],"((size_t)(&((st *)0)->m))")
   ,(1#0,1#0,"<built-in>")}



,   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("RAND32()",[],"((rand()<<30) ^ (rand()<<15) ^ rand())")
   ,(84#0,84#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/testcasesupport/std_testcase.h")}



,   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   MD("RAND64()",[],"(((int64_t)rand()<<60) ^ ((int64_t)rand()<<45) ^ ((int64_t)rand()<<30) ^ ((int64_t)rand()<<15) ^ (int64_t)rand())")
   ,(87#0,87#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/testcasesupport/std_testcase.h")}



,   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,const,extern],int,<"CWE401_Memory_Leak__strdup_char_01">,"GLOBAL_CONST_TRUE")
   ,(103#18,103#34,!2)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,const,extern],int,<"CWE401_Memory_Leak__strdup_char_01">,"GLOBAL_CONST_FALSE")
   ,(104#18,104#35,!2)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,const,extern],int,<"CWE401_Memory_Leak__strdup_char_01">,"GLOBAL_CONST_FIVE")
   ,(105#18,105#34,!2)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,extern],int,<"CWE401_Memory_Leak__strdup_char_01">,"globalTrue")
   ,(110#12,110#21,!2)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,extern],int,<"CWE401_Memory_Leak__strdup_char_01">,"globalFalse")
   ,(111#12,111#22,!2)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,extern],int,<"CWE401_Memory_Leak__strdup_char_01">,"globalFive")
   ,(112#12,112#21,!2)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,extern],int,<"CWE401_Memory_Leak__strdup_char_01">,"globalArgc")
   ,(55#12,55#21,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SF([extern,extern],ref(ref(char)),<"CWE401_Memory_Leak__strdup_char_01">,"globalArgv")
   ,(56#12,56#24,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   SI(<"CWE401_Memory_Leak__strdup_char_01">,
   {[
      {;
      ,(1#1,108#1,!1)};
      {RE0
      ,(?)}
      ]
   ,(1#1,108#1,!1)}
   )
   ,(1#1,108#1,!1)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printLine"):unit,[(mod(ref(char),[const]):"line",(14#16,14#32,!3))],[]
   )
   ,(14#1,14#34,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printWLine"):unit,[(mod(ref(wchar),[const]):"line",(16#17,16#36,!3))],[]
   )
   ,(16#1,16#38,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printIntLine"):unit,[(int:"intNumber",(18#20,18#32,!3))],[]
   )
   ,(18#1,18#34,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printShortLine"):unit,[(short:"shortNumber",(20#22,20#38,!3))],[]
   )
   ,(20#1,20#40,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printFloatLine"):unit,[(float:"floatNumber",(22#22,22#38,!3))],[]
   )
   ,(22#1,22#40,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printLongLine"):unit,[(long:"longNumber",(24#20,24#34,!3))],[]
   )
   ,(24#1,24#36,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printLongLongLine"):unit,[(class((,int64_t)):"longLongIntNumber",(26#24,26#48,!3))],[]
   )
   ,(26#1,26#50,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printSizeTLine"):unit,[(class((,size_t)):"sizeTNumber",(28#21,28#38,!3))],[]
   )
   ,(28#1,28#40,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printHexCharLine"):unit,[(char:"charHex",(30#23,30#34,!3))],[]
   )
   ,(30#1,30#36,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printWcharLine"):unit,[(wchar:"wideChar",(32#21,32#36,!3))],[]
   )
   ,(32#1,32#38,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printUnsignedLine"):unit,[(uint:"unsignedNumber",(34#24,34#46,!3))],[]
   )
   ,(34#1,34#48,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printHexUnsignedCharLine"):unit,[(uchar:"unsignedCharacter",(36#31,36#61,!3))],[]
   )
   ,(36#1,36#63,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printDoubleLine"):unit,[(double:"doubleNumber",(38#22,38#40,!3))],[]
   )
   ,(38#1,38#42,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printStructLine"):unit,[(mod(ref(alias("twoIntsStruct",mod(record((,_twoIntsStruct)),[struct]))),[const]):"structTwoIntsStruct",(40#22,40#62,!3))],[]
   )
   ,(40#1,40#64,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"printBytesLine"):unit,[(mod(ref(uchar),[const]):"bytes",(42#21,42#47,!3)),(class((,size_t)):"numBytes",(42#50,42#64,!3))],[]
   )
   ,(42#1,42#66,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"decodeHexChars"):class((,size_t)),[(ref(uchar):"bytes",(44#23,44#43,!3)),(class((,size_t)):"numBytes",(44#46,44#60,!3)),(mod(ref(char),[const]):"hex",(44#63,44#78,!3))],[]
   )
   ,(44#1,44#80,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"decodeHexWChars"):class((,size_t)),[(ref(uchar):"bytes",(46#24,46#44,!3)),(class((,size_t)):"numBytes",(46#47,46#61,!3)),(mod(ref(wchar),[const]):"hex",(46#64,46#82,!3))],[]
   )
   ,(46#1,46#84,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"globalReturnsTrue"):int,[],[]
   )
   ,(48#1,48#24,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"globalReturnsFalse"):int,[],[]
   )
   ,(50#1,50#25,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   PT([public],(<"CWE401_Memory_Leak__strdup_char_01">,"globalReturnsTrueOrFalse"):int,[],[]
   )
   ,(52#1,52#31,!3)},

   {"CWE401_Memory_Leak__strdup_char_01",
   FN([public],(<"CWE401_Memory_Leak__strdup_char_01">,"CWE401_Memory_Leak__strdup_char_01_bad"):unit,[],[],
   {[
      {VD("data",ref(char))
      ,(26#10,26#15,!1)};
      {{AE({V("data"),ref(char),(27#5,27#8,!1)},{CS(ref(unit),{"0"N,int,(27#12,27#15,!1)}),ref(unit),(27#12,27#15,!1)}),ref(char),(27#5,27#15,!1)}
      ,(27#5,27#15,!1)};
      {[
         {VD("myString",char,([{"0"N,int,(29#27,29#36,!1)}],[{"myString"S,string,(29#27,29#36,!1)}]))
         ,(29#14,29#23,!1)};
         {{AE({V("data"),ref(char),(31#9,31#12,!1)},{SC((<"CWE401_Memory_Leak__strdup_char_01">,"strdup"),[arr(char)],[{V("myString"),arr(char),(31#23,31#30,!1)}]),class((,"%undef")),(31#16,31#31,!1)}),ref(char),(31#9,31#31,!1)}
         ,(31#9,31#31,!1)};
         {PC0((<"CWE401_Memory_Leak__strdup_char_01">,"printLine"),[mod(ref(char),[const])],[{V("data"),ref(char),(33#19,33#22,!1)}])
         ,(33#9,33#23,!1)}
         ]
      ,(28#5,34#5,!1)};
      {RE0
      ,(?)}
      ]
   ,(24#1,38#1,!1)}
   )
   ,(24#1,38#1,!1)},

   {"CWE401_Memory_Leak__strdup_char_01",
   FN([public,static],(<"CWE401_Memory_Leak__strdup_char_01">,"goodG2B"):mod(unit,[static]),[],[],
   {[
      {VD("data",ref(char))
      ,(47#10,47#15,!1)};
      {{AE({V("data"),ref(char),(48#5,48#8,!1)},{CS(ref(unit),{"0"N,int,(48#12,48#15,!1)}),ref(unit),(48#12,48#15,!1)}),ref(char),(48#5,48#15,!1)}
      ,(48#5,48#15,!1)};
      {{AE({V("data"),ref(char),(50#5,50#8,!1)},{CS(ref(char),{SC((<"CWE401_Memory_Leak__strdup_char_01">,"alloca"),[int],[{BO(*,{"100"N,int,(50#27,50#29,!1)},{SO(char),int,(50#31,50#42,!1)}),int,(50#27,50#42,!1)}]),class((,"%undef")),(50#20,50#43,!1)}),ref(char),(50#12,50#43,!1)}),ref(char),(50#5,50#43,!1)}
      ,(50#5,50#43,!1)};
      {PC0((<"CWE401_Memory_Leak__strdup_char_01">,"strcpy"),[ref(char),string],[{V("data"),ref(char),(52#12,52#15,!1)},{"a string"S,string,(52#18,52#27,!1)}])
      ,(52#5,52#28,!1)};
      {PC0((<"CWE401_Memory_Leak__strdup_char_01">,"printLine"),[mod(ref(char),[const])],[{V("data"),ref(char),(53#15,53#18,!1)}])
      ,(53#5,53#19,!1)};
      {RE0
      ,(?)}
      ]
   ,(45#1,57#1,!1)}
   )
   ,(45#1,57#1,!1)},

   {"CWE401_Memory_Leak__strdup_char_01",
   FN([public,static],(<"CWE401_Memory_Leak__strdup_char_01">,"goodB2G"):mod(unit,[static]),[],[],
   {[
      {VD("data",ref(char))
      ,(62#10,62#15,!1)};
      {{AE({V("data"),ref(char),(63#5,63#8,!1)},{CS(ref(unit),{"0"N,int,(63#12,63#15,!1)}),ref(unit),(63#12,63#15,!1)}),ref(char),(63#5,63#15,!1)}
      ,(63#5,63#15,!1)};
      {[
         {VD("myString",char,([{"0"N,int,(65#27,65#36,!1)}],[{"myString"S,string,(65#27,65#36,!1)}]))
         ,(65#14,65#23,!1)};
         {{AE({V("data"),ref(char),(67#9,67#12,!1)},{SC((<"CWE401_Memory_Leak__strdup_char_01">,"strdup"),[arr(char)],[{V("myString"),arr(char),(67#23,67#30,!1)}]),class((,"%undef")),(67#16,67#31,!1)}),ref(char),(67#9,67#31,!1)}
         ,(67#9,67#31,!1)};
         {PC0((<"CWE401_Memory_Leak__strdup_char_01">,"printLine"),[mod(ref(char),[const])],[{V("data"),ref(char),(69#19,69#22,!1)}])
         ,(69#9,69#23,!1)}
         ]
      ,(64#5,70#5,!1)};
      {PC0((<"CWE401_Memory_Leak__strdup_char_01">,"free"),[ref(char)],[{V("data"),ref(char),(72#10,72#13,!1)}])
      ,(72#5,72#14,!1)};
      {RE0
      ,(?)}
      ]
   ,(60#1,73#1,!1)}
   )
   ,(60#1,73#1,!1)},

   {"CWE401_Memory_Leak__strdup_char_01",
   FN([public],(<"CWE401_Memory_Leak__strdup_char_01">,"CWE401_Memory_Leak__strdup_char_01_good"):unit,[],[],
   {[
      {PC0((<"CWE401_Memory_Leak__strdup_char_01">,"goodG2B"),[],[])
      ,(77#5,77#13,!1)};
      {PC0((<"CWE401_Memory_Leak__strdup_char_01">,"goodB2G"),[],[])
      ,(78#5,78#13,!1)};
      {RE0
      ,(?)}
      ]
   ,(75#1,79#1,!1)}
   )
   ,(75#1,79#1,!1)},

   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   CL([struct],(,_twoIntsStruct),[])
   {
      ([public],"intOne":int,(92#9,92#14,!2));
      ([public],"intTwo":int,(93#9,93#14,!2))
   }
   ,(90#1,94#16,!2)}

,


   {"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp",
   [
      M("/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE401_Memory_Leak__strdup_char_01.c\nLabel Definition File: CWE401_Memory_Leak__strdup.label.xml\nTemplate File: sources-sinks-01.tmpl.c\n*/",1,(1#0,1#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/*\n * @description\n * CWE: 401 Memory Leak\n * BadSource:  Allocate data using strdup()\n * GoodSource: Allocate data on the stack\n * Sinks:\n *    GoodSink: call free() on data\n *    BadSink : no deallocation of data\n * Flow Variant: 01 Baseline\n *\n * */",6,(6#0,6#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",30,(30#0,30#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* Use data */",32,(32#0,32#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* POTENTIAL FLAW: No deallocation of memory */",35,(35#0,35#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* no deallocation */",36,(36#0,36#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* empty statement needed for some flow variants */",37,(37#0,37#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* OMITBAD */",40,(40#0,40#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* goodG2B uses the GoodSource with the BadSink */",44,(44#0,44#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* FIX: Use memory allocated on the stack with ALLOCA */",49,(49#0,49#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* Initialize then use data */",51,(51#0,51#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* POTENTIAL FLAW: No deallocation of memory */",54,(54#0,54#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* no deallocation */",55,(55#0,55#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* empty statement needed for some flow variants */",56,(56#0,56#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* goodB2G uses the BadSource with the GoodSink */",59,(59#0,59#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */",66,(66#0,66#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* Use data */",68,(68#0,68#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* FIX: Deallocate memory initialized in the source */",71,(71#0,71#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* OMITGOOD */",81,(81#0,81#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* Below is the main(). It is only used when building this testcase on\n   its own for testing or for building a binary to use in testing binary\n   analysis tools. It is not used when compiling all the testcases as one\n   application, which is how source code analysis tools are tested. */",83,(83#0,83#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* seed randomness */",92,(92#0,92#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* OMITGOOD */",98,(98#0,98#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp")),
      M("/* OMITBAD */",103,(103#0,103#0,"C:/Users/S&SSLAWKS/Desktop/Project/beSOURCE-CPP/src/20200719142400/E16.CWE401_Memory_Leak/CWE401_Memory_Leak__strdup_char_01.cpp"))
   ]
   }
]