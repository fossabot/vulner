{"metadata":{"guid":"509b2067-7aff-4abc-a9a8-dbc5ce10172c","url":"/v2/streaming_pipelines/509b2067-7aff-4abc-a9a8-dbc5ce10172c","created_at":"2018-03-08T16:35:58Z","updated_at":"2018-03-08T21:33:01Z","revision":1520544781044},"entity":{"name":"Time-based-billing_no_DB2_connection","description":"This is a simplified version of the Time based billing example that does not save any data to DB2.","project_guid":"e1f7733f-4898-45c8-8890-cff47001efd1","graph":{"doc_type":"pipeline","version":"1.0","json_schema":"http://www.ibm.com/ibm/wdp/flow-v1.0/pipeline-flow-v1-schema.json","id":"","app_data":{"ui_data":{"name":"Time-based-billing_no_DB2_connection"}},"primary_pipeline":"primary-pipeline","pipelines":[{"id":"primary-pipeline","runtime":"streams","nodes":[{"id":"watsoniot_eal8k1t93yu","type":"binding","op":"ibm.streams.sources.watsoniot","outputs":[{"id":"target","schema_ref":"schema0","links":[{"node_id_ref":"code_1hjin0isokb","port_id_ref":"source"}]}],"parameters":{"device_type":"Smart_Meters","event":"meter_readings","schema_mapping":[{"name":"device_id","type":"string","length":255,"path":"/device_id"},{"name":"firmware_version","type":"string","length":255,"path":"/firmware_version"},{"name":"usage_in_kwH","type":"double","path":"/usage_in_kwH"},{"name":"serial_number","type":"string","length":255,"path":"/serial_number"},{"name":"usage_date","type":"timestamp","path":"/usage_date"}]},"connection":{"ref":"471f2050-602e-408b-8daf-9d930d34990a","project_ref":"e1f7733f-4898-45c8-8890-cff47001efd1"},"app_data":{"ui_data":{"label":"WatsonIoT","x_pos":-1950,"y_pos":-170}}},{"id":"code_1hjin0isokb","type":"execution_node","op":"ibm.streams.operations.code","outputs":[{"id":"target","schema_ref":"schema1","links":[{"node_id_ref":"aggregate_ljzc9agzmd","port_id_ref":"source"}]}],"parameters":{"code":"#\n# YOU MUST EDIT THE SCHEMA and add all attributes that you are returning as output.\n#\n# Supported Python libraries are listed here:\n# https://datascience.ibm.com/docs/content/streaming-pipelines/python_libs.html?context=analytics\n\nimport sys\n  \nPEAK = 0\nMIDDAY = 1\nOFF_PEAK =2 \nMIDDAY_START = 12 #midday is from noon to 2pm\nMIDDAY_END = 14\nPEAK_START = 9 #9AM start for peak hours\nPEAK_END = 17  #5pm end for peak hours\n\nrates = {\n     PEAK : 14.5, MIDDAY : 11.5, OFF_PEAK: 9.5\n}\n    \n# init() function will be called once on pipeline initialization\n# @state a Python dictionary object for keeping state. The state object is passed to the process function\ndef init(state):\n    # do something once on pipeline initialization and save in the state object\n    #for our use case we will initialize the rates based on time of day\n    # this could be modified to retrieve from a database\n    pass\n\ndef get_usage_cost (hour_of_day, usage):\n    usage_code = OFF_PEAK\n\n    if (hour_of_day >= MIDDAY_START and hour_of_day <= MIDDAY_END ):\n       usage_code = MIDDAY\n    elif (hour_of_day >= PEAK_START and hour_of_day < PEAK_END):\n       usage_code = MIDDAY\n    cost =  (usage * rates[usage_code])/100\n    return cost\n    \n# process() function will be invoked on every event tuple\n# @event a Python dictionary object representing the input event tuple as defined by the input schema\n# @state a Python dictionary object for keeping state over subsequent function calls\n# return must be a Python dictionary object. It will be the output of this operator.\n#        Returning None results in not submitting an output tuple for this invocation.\n# You must declare all output attributes in the Edit Schema window.\n\ndef process(event, state):\n    # copy attributes from input to output\n    output = event\n    #next compute the cost of the usage based on the time of day\n    \n    usage = event[\"usage_in_kwH\"]\n    hour_of_day = event[\"usage_date\"].hour\n    \n    cost = get_usage_cost(hour_of_day, usage)\n        \n    # submit results as output: \n    output[\"cost\"] = cost\n    output[\"day\"] = str(event[\"usage_date\"].date())\n    output[\"hour_of_day\"] = hour_of_day \n    \n    return output","schema_mapping":[{"name":"cost","type":"double","length":0,"source_elem_name":"","target_elem_name":""},{"name":"hour_of_day","type":"double","length":0,"source_elem_name":"","target_elem_name":""},{"name":"day","type":"string","length":0,"source_elem_name":"","target_elem_name":""},{"name":"device_id","type":"string","length":255},{"name":"firmware_version","type":"string","length":255},{"name":"usage_in_kwH","type":"double"},{"name":"serial_number","type":"string","length":255},{"name":"usage_date","type":"timestamp"}]},"app_data":{"ui_data":{"label":"Compute usage cost","x_pos":-1750,"y_pos":-170}}},{"id":"aggregate_ljzc9agzmd","type":"execution_node","op":"ibm.streams.operations.aggregate","outputs":[{"id":"target","schema_ref":"schema2","links":[{"node_id_ref":"freeform_filter_dzgl2oye1c6","port_id_ref":"source"}]}],"parameters":{"window_type":"sliding","window_time_unit":"day","window_number_of_time_units":"30","partition_by":"device_id","aggregation_output":[{"name":"running_total_cost","value":{"function":"Sum","type":"double","arguments":["cost"]},"type":""},{"name":"device_id","value":{"function":"Any","type":"varchar","arguments":["device_id"]},"type":""}],"schema_mapping":[{"name":"running_total_cost","type":"double"},{"name":"device_id","type":"string"}]},"app_data":{"ui_data":{"label":"Monthly total usage","x_pos":-1560,"y_pos":-170}}},{"id":"freeform_filter_dzgl2oye1c6","type":"execution_node","op":"ibm.streams.operations.freeform-filter","outputs":[{"id":"target","schema_ref":"schema3","links":[{"node_id_ref":"code_81bp6o73tx7","port_id_ref":"source"}]}],"parameters":{"expression":"running_total_cost > 200"},"app_data":{"ui_data":{"label":"Cost > 200","x_pos":-1370,"y_pos":-170}}},{"id":"code_81bp6o73tx7","type":"execution_node","op":"ibm.streams.operations.code","outputs":[{"id":"target","schema_ref":"schema4","links":[{"node_id_ref":"mail_ars5a1zn438","port_id_ref":"emailPort"},{"node_id_ref":"objectstorage_v2_6zutxremucp","port_id_ref":"source"}]}],"parameters":{"code":"#\n# YOU MUST EDIT THE SCHEMA and add all attributes that you are returning as output.\n#\n# Supported Python libraries are listed here:\n# https://datascience.ibm.com/docs/content/streaming-pipelines/python_libs.html?context=analytics\n\nimport sys\nimport time\nimport ibm_db\nimport random\n# Called once during initialization\n# @state a Python dictionary object for keeping state. \n# The state object is passed to the process function\n\ndef init(state):\n        #use the state dictionary to keep data for lifetime of app\n        state[\"notified\"] = []\n      \n \n# process() function will be invoked on every event tuple\n# retrieve contact info and submit it to the Email operator\n# @event contains the tuple describing the meter incurring high usage and the total cost accrued so far\n# @state contains list of already notified customers.\n# return a dictionary object containing the contact info of the customer\n#        Returning None if the customer has already been notified   \ndef process(event, state):\n    notified_users = state[\"notified\"]\n\n    if event[\"device_id\"] not in notified_users:\n        meter_id = event[\"device_id\"]\n        output = event \n        get_customer_info(event, output, state)\n        state[\"notified\"].append(meter_id)\n        return output\n\n    else:\n        #have already notified this user, do nothing.\n        return None\n\n#Not using a DB2 connection so we are just using dummy info\ndef get_customer_info(event, output, state):        \n    names = [\"Jane Doe\",\"John Doe\",\"Mike Doe\", \"Doe Ray Mi\"]\n    output[\"postalcode\"] = \"M3fa4b\"\n    output[\"name\"] = names[random.randint(0,3)]\n    output[\"customer_id\"]  = random.randint(0,3)\n    output[\"email\"] = \"dummy@dummy.com\"\n    output[\"threshold\"] = \"$200\"\n    output[\"running_total_cost\"] = round(event[\"running_total_cost\"],2)\n    \n\n","schema_mapping":[{"name":"customer_id","type":"string","length":0,"source_elem_name":"","target_elem_name":""},{"name":"email","type":"string","length":0,"source_elem_name":"","target_elem_name":""},{"name":"name","type":"string","length":0,"source_elem_name":"","target_elem_name":""},{"name":"postalcode","type":"string","length":0,"source_elem_name":"","target_elem_name":""},{"name":"threshold","type":"string","length":0,"source_elem_name":"","target_elem_name":""},{"name":"running_total_cost","type":"double"},{"name":"device_id","type":"string"}]},"app_data":{"ui_data":{"label":"Get customer info","x_pos":-1190,"y_pos":-170}}},{"id":"mail_ars5a1zn438","type":"binding","op":"ibm.streams.targets.mail","parameters":{"smtp_server":"smtp.gmail.com","username":"yourgmail@gmail.com","sender":"yourgmail@gmail.com","recipients":"yourgmail@gmail.com","subject_template":"Utility usage has exceeded {{threshold}}","message_template":"Dear {{name}},\nThis is an alert to inform you that your usage for your device {{device_id}} located at {{postalcode}} has incurred a total cost of ${{running_total_cost}}.\n\nYou can log in to the dashboard to view your usage by day and hour in order to determine high usage days and reduce costs.\n"},"app_data":{"ui_data":{"label":"Send high usage warning","x_pos":-1000,"y_pos":-170}}},{"id":"objectstorage_v2_6zutxremucp","type":"binding","op":"ibm.streams.targets.objectstorage_v2","parameters":{"header_row_enabled":true,"write_policy":"fileSizeKB","rolling_file_size":"100"},"connection":{"ref":"9382c245-5f88-4e2b-a303-19d5bbcced23","project_ref":"e1f7733f-4898-45c8-8890-cff47001efd1","properties":{"asset":{"path":"/aggregatedemo/high_usage_customers.csv","asset_types":[],"assets":[],"fields":[],"extended_metadata":[],"first":{"href":"https://api.dataplatform.ibm.com/v2/connections/9382c245-5f88-4e2b-a303-19d5bbcced23/assets?project_id=e1f7733f-4898-45c8-8890-cff47001efd1&offset=0&limit=100&path=%2Faggregatedemo%2Fhigh_usage_customers.csv"},"total_count":0,"logs":[]}}},"app_data":{"ui_data":{"label":"Cloud Object Storage","x_pos":-1080,"y_pos":-100}}}]}],"schemas":[{"id":"schema0","fields":[{"name":"device_id","type":"string"},{"name":"firmware_version","type":"string"},{"name":"usage_in_kwH","type":"double"},{"name":"serial_number","type":"string"},{"name":"usage_date","type":"timestamp"}]},{"id":"schema1","fields":[{"name":"cost","type":"double"},{"name":"hour_of_day","type":"double"},{"name":"day","type":"string"},{"name":"device_id","type":"string"},{"name":"firmware_version","type":"string"},{"name":"usage_in_kwH","type":"double"},{"name":"serial_number","type":"string"},{"name":"usage_date","type":"timestamp"}]},{"id":"schema2","fields":[{"name":"running_total_cost","type":"double"},{"name":"device_id","type":"string"}]},{"id":"schema3","fields":[{"name":"running_total_cost","type":"double"},{"name":"device_id","type":"string"}]},{"id":"schema4","fields":[{"name":"customer_id","type":"string"},{"name":"email","type":"string"},{"name":"name","type":"string"},{"name":"postalcode","type":"string"},{"name":"threshold","type":"string"},{"name":"running_total_cost","type":"double"},{"name":"device_id","type":"string"}]}]},"engines":{"streams":{"instance_id":"92626ba0-85a8-4973-8384-a72f81c85598","userPythonPackages":[]}}}}