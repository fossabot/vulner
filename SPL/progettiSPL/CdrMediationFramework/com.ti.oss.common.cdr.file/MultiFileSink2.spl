namespace com.ti.oss.common.cdr.file ;

use spl.file::*;
use spl.collection::*;
use com.ti.oss.common.event::*;
use com.ti.oss.common.cdr.types::*;
use com.ibm.streamsx.file::*;
use  com.ti.oss.common.cdr.util::*;
use  com.ti.oss.common.util.cfg::*;
use com.ti.oss.common.util.time::*;


public composite MultiFileSink2( input stream<CsvWrite> I; output stream<Event e> OEvent) 
{
	param
		expression<rstring> $mediationName ;
		expression<int32> $parallelSize;
	
	type
		FTableEntry = rstring expFile, uint64 fDesc, int32 closeFile, boolean isNorthIf, rstring suffixString, rstring prefixString;
		
	graph
		
		stream<boolean check> CheckClosedFiles = Beacon()
		{
			param
				period : 1.0;
			output
				CheckClosedFiles : check = true; 
		}
		
		(stream<Event e> OEvent) as Sink = Custom(I;CheckClosedFiles) 
		{
			logic
				state :
				{
                    mutable rstring header_broadbandggsnapn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDGGSNAPN");
                    mutable rstring header_broadbandsgsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDSGSN");
                    mutable rstring header_roamingbroadbandggsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_ROAMINGBROADBANDGGSN");
                    mutable rstring header_roamingbroadbandggsn4 = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_ROAMINGBROADBANDGGSN4");
                    mutable rstring header_tavggsn3g = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_TAVGGSN_3G");
                    mutable rstring header_tavggsn4g = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_TAVGGSN_4G");
					//mutable rstring header_tavggsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_TAVGGSN");
                    mutable rstring header_tavsgsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_TAVSGSN");
                    mutable rstring header_bscbroaddownlink = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BSCBROADDOWNLINK");
                    mutable rstring header_rncbroaddownlink = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_RNCBROADDOWNLINK");
                    mutable rstring header_broadmvno = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADMVNO");
                    mutable rstring header_broadroaming = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADROAMING");
                    mutable rstring header_broadroaming4 = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADROAMING4");
                    mutable rstring header_broadmvnoaggrop = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADMVNOAGGROP");
                    mutable rstring header_broadbandtac = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDTAC");
                    mutable rstring header_broadbandpgwapn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDPGWAPN");
                    mutable rstring header_fonia = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIA");
                    mutable rstring header_sms = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMS");
                    mutable rstring header_foniaroaminginbound = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAROAMINGINBOUND");
                    mutable rstring header_foniaroaminginbound4 = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAROAMINGINBOUND4");
                    mutable rstring header_smsroaminginbound = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMSROAMINGINBOUND");
                    mutable rstring header_smsroaminginbound4 = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMSROAMINGINBOUND4");
                    mutable rstring header_foniamvno = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAMVNO");
                    mutable rstring header_smsmvno = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMSMVNO");
                    mutable rstring header_spx = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SPX");
                    mutable rstring header_foniamvnoaggrop = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAMVNOAGGROP");
                    mutable rstring header_smsmvnoaggrop = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMSMVNOAGGROP");
                    mutable rstring header_foniaroamingoutbound = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAROAMINGOUTBOUND");
                    mutable rstring header_foniaroamingoutbound4 = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAROAMINGOUTBOUND4");
                    mutable rstring header_ratinggroup = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_RATINGGROUP");
                    mutable rstring header_rattype = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_RATTYPE");
                    mutable rstring header_imsi = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_IMSI");
                    mutable rstring header_report_imsi = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_REPORT_IMSI");
                    mutable rstring header_broadmvnosgw = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADMVNOSGW");
                    mutable rstring header_broadmvnoaggropsgw = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADMVNOAGGROPSGW");
                    mutable rstring header_imsicapnet = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_IMSICAPNET");
                    mutable rstring header_volte = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_VOLTE");
                    mutable map<rstring, FTableEntry> fTable;
                    mutable rstring strCR= "\n";
                    mutable list<rstring> keysToDelete;
                    mutable int32 parallelSize = $parallelSize;
				}
					
				onTuple I:
				{
                    mutable int32 err = 0;
                    mutable uint64 fd = 0ul;
                   
					if (!has(fTable, I.nameOutputFile) && I.nameOutputFile != "") 
					{
						//RM: output content == "" inside the endROP tuple, so the first cnt increment should be put here
						mutable int32 cnt = 0;
						if(I.endROP)
							cnt++;

						rstring pathname = getPathFile(I.nameOutputFile);
						
						if(!exists(pathname)) 
						{               	       
	               	       int32 error = createDirectory(pathname);
	                       
	                       if(error!=0) {
	                         appTrc(Trace.error, "MultiFileSink - Can not create directory \"" + pathname + "\". Please, verify user rights - Error is \"" + strerror(error) + "\"");                     
	                       }
	               	    }
						
						if (I.outputContent != "" || (I.northIf == "Bigdata" && I.writeOn == true)) {
							fd = fopen(I.nameOutputFile, "w", err); 
						}
						
						if (err != 0) 
						{
						    appTrc(Trace.error, "MultiFileSink - Cannot open file \"" + I.nameOutputFile + "\" for writing");
							
						} 
						else if (I.outputContent != "" || (I.northIf == "Bigdata" && I.writeOn == true))
						{
						    if (findFirst(I.nameOutputFile, "/broadbandggsnapn/", 0)!=-1)
							{
								fwriteString(header_broadbandggsnapn+strCR, fd, err);
							}
						    if (findFirst(I.nameOutputFile, "/broadbandsgsn/", 0)!=-1)
						    {
						    	fwriteString(header_broadbandsgsn+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/roamingbroadbandggsn/", 0)!=-1)
						    {
						    	if (findFirst(I.nameOutputFile, "RoamingBroadGgsn60_", 0)!=-1)
						    	{
						    		fwriteString(header_roamingbroadbandggsn4+strCR, fd, err);
						    	}	
						    	else
						    	{
						    		fwriteString(header_roamingbroadbandggsn+strCR, fd, err);
						    	}
						    }
						    if (findFirst(I.nameOutputFile, "/TavGgsn3G", 0)!=-1)
						    {
						    	fwriteString(header_tavggsn3g+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/TavGgsn4G", 0)!=-1)
						    {
						    	fwriteString(header_tavggsn4g+strCR, fd, err);
						    }
//							if (findFirst(I.nameOutputFile, "/tavggsn/", 0)!=-1)
//						    {
//						    	fwriteString(header_tavggsn+strCR, fd, err);
//						    }
						    if (findFirst(I.nameOutputFile, "/tavsgsn/", 0)!=-1)
						    {
						    	fwriteString(header_tavsgsn+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/bscbroadbanddownlink/", 0)!=-1)
						    {
						    	fwriteString(header_bscbroaddownlink+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/rncbroadbanddownlink/", 0)!=-1)
						    {
						    	fwriteString(header_rncbroaddownlink+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/broadbandmvno/", 0)!=-1)
						    {
						    	fwriteString(header_broadmvno+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/roamingbroadbandsgsn/", 0)!=-1)
						    {
						    	if (findFirst(I.nameOutputFile, "BroadBandRoaming60_", 0)!=-1)
						    	{
						    		fwriteString(header_broadroaming4+strCR, fd, err);
						    	}	
						    	else
						    	{
						    		fwriteString(header_broadroaming+strCR, fd, err);
						    	}
						    }
						    if (findFirst(I.nameOutputFile, "/broadbandmvnoaggrop/", 0)!=-1)
						    {
						    	fwriteString(header_broadmvnoaggrop+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/broadbandtac/", 0)!=-1)
						    {
						    	fwriteString(header_broadbandtac+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/broadbandpgwapn/", 0)!=-1)
						    {
						    	fwriteString(header_broadbandpgwapn+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/fonia/", 0)!=-1)
						    {
						    	fwriteString(header_fonia+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/sms/", 0)!=-1)
						    {
						    	fwriteString(header_sms+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/foniaroaminginbound/", 0)!=-1)
						    {
						    	if (findFirst(I.nameOutputFile, "FoniaRoamingInbound60_", 0)!=-1)
						    	{
						    		fwriteString(header_foniaroaminginbound4+strCR, fd, err);
						    	}	
						    	else
						    	{
						    		fwriteString(header_foniaroaminginbound+strCR, fd, err);
						    	}
						    }
						    if (findFirst(I.nameOutputFile, "/smsroaminginbound/", 0)!=-1)
						    {
						    	if (findFirst(I.nameOutputFile, "SmsRoamingInbound60_", 0)!=-1)
						    	{
						    		fwriteString(header_smsroaminginbound4+strCR, fd, err);
						    	}
						    	else
						    	{
						    		fwriteString(header_smsroaminginbound+strCR, fd, err);
						    	}
						    	
						    }
						    if (findFirst(I.nameOutputFile, "/foniamvno/", 0)!=-1)
						    {
						    	fwriteString(header_foniamvno+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/smsmvno/", 0)!=-1)
						    {
						    	fwriteString(header_smsmvno+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/spx/", 0)!=-1)
						    {
						    	fwriteString(header_spx+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/foniamvnoaggrop/", 0)!=-1)
						    {
						    	fwriteString(header_foniamvnoaggrop+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/smsmvnoaggrop/", 0)!=-1)
						    {
						    	fwriteString(header_smsmvnoaggrop+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/foniaroamingoutbound/", 0)!=-1)
						    {
						    	if (findFirst(I.nameOutputFile, "FoniaRoamingOutbound60_", 0)!=-1)
						    	{
						    		fwriteString(header_foniaroamingoutbound4+strCR, fd, err);
						    	}
						    	else
						    	{
						    		fwriteString(header_foniaroamingoutbound+strCR, fd, err);
						    	}
						    }
						    if (findFirst(I.nameOutputFile, "/ratinggroup/", 0)!=-1)
						    {
						    	fwriteString(header_ratinggroup+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/rattype/", 0)!=-1)
						    {
						    	fwriteString(header_rattype+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/imsi_vip/", 0)!=-1)
						    {
						    	fwriteString(header_imsi+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/reportimsi/", 0)!=-1)
						    {
						    	fwriteString(header_report_imsi+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/broadbandmvnosgw/", 0)!=-1)
						    {
						    	fwriteString(header_broadmvnosgw+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/broadbandmvnoaggropsgw/", 0)!=-1)
						    {
						    	fwriteString(header_broadmvnoaggropsgw+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/imsi_capnet/", 0)!=-1)
						    {
						    	fwriteString(header_imsicapnet+strCR, fd, err);
						    }
						    if (findFirst(I.nameOutputFile, "/volte/", 0)!=-1)
						    {
						    	fwriteString(header_volte+strCR, fd, err);
						    }
						    
							if (I.outputContent != "")
							{
								fwriteString(I.outputContent+strCR, fd, err);
							}
						}
						
						mutable boolean isBigData = false;
						if (I.northIf == "Bigdata")
						{
							isBigData = true;	
						}
						
						mutable FTableEntry entry = {expFile=I.nameOutputFile, fDesc=fd, closeFile=cnt, isNorthIf=isBigData, suffixString = I.suffix, prefixString = I.filePrefix};						    
						insertM(fTable, I.nameOutputFile, entry);
						entry = (FTableEntry){};
					} 
					else if (I.nameOutputFile != "")
					{
					  if (I.outputContent != "")
					  {					  
						  	if(fTable[I.nameOutputFile].fDesc == 0ul) 
						  	{
						  		fTable[I.nameOutputFile].fDesc = fopen(I.nameOutputFile, "w", err);
						  		
						  		if (err != 0) 
								{
								    appTrc(Trace.error, "MultiFileSink - Cannot open file \"" + I.nameOutputFile + "\" for writing");								
								} 
								else
								{
								    if (findFirst(I.nameOutputFile, "/broadbandggsnapn/", 0)!=-1)
									{
										fwriteString(header_broadbandggsnapn+strCR, fTable[I.nameOutputFile].fDesc, err);
									}
								    if (findFirst(I.nameOutputFile, "/broadbandsgsn/", 0)!=-1)
								    {
								    	fwriteString(header_broadbandsgsn+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/roamingbroadbandggsn/", 0)!=-1)
								    {
								    	if (findFirst(I.nameOutputFile, "RoamingBroadGgsn60_", 0)!=-1)
								    	{
								    		fwriteString(header_roamingbroadbandggsn4+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    	else
								    	{
								    		fwriteString(header_roamingbroadbandggsn+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    }
								    if (findFirst(I.nameOutputFile, "/TavGgsn3G", 0)!=-1)
								    {
								    	fwriteString(header_tavggsn3g+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/TavGgsn4G", 0)!=-1)
								    {
								    	fwriteString(header_tavggsn4g+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
//									if (findFirst(I.nameOutputFile, "/tavggsn/", 0)!=-1)
//								    {
//								    	fwriteString(header_tavggsn+strCR, fTable[I.nameOutputFile].fDesc, err);
//								    }
								    if (findFirst(I.nameOutputFile, "/tavsgsn/", 0)!=-1)
								    {
								    	fwriteString(header_tavsgsn+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/bscbroadbanddownlink/", 0)!=-1)
								    {
								    	fwriteString(header_bscbroaddownlink+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/rncbroadbanddownlink/", 0)!=-1)
								    {
								    	fwriteString(header_rncbroaddownlink+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/broadbandmvno/", 0)!=-1)
								    {
								    	fwriteString(header_broadmvno+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/roamingbroadbandsgsn/", 0)!=-1)
								    {
								    	if (findFirst(I.nameOutputFile, "BroadBandRoaming60_", 0)!=-1)
								    	{
								    		fwriteString(header_broadroaming4+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    	else
								    	{
								    		fwriteString(header_broadroaming+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    }
								    if (findFirst(I.nameOutputFile, "/broadbandmvnoaggrop/", 0)!=-1)
								    {
								    	fwriteString(header_broadmvnoaggrop+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/broadbandtac/", 0)!=-1)
								    {
								    	fwriteString(header_broadbandtac+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/broadbandpgwapn/", 0)!=-1)
								    {
								    	fwriteString(header_broadbandpgwapn+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/fonia/", 0)!=-1)
								    {
								    	fwriteString(header_fonia+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/sms/", 0)!=-1)
								    {
								    	fwriteString(header_sms+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/foniaroaminginbound/", 0)!=-1)
								    {
								    	if (findFirst(I.nameOutputFile, "FoniaRoamingInbound60_", 0)!=-1)
								    	{
								    		fwriteString(header_foniaroaminginbound4+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    	else
								    	{
								    		fwriteString(header_foniaroaminginbound+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    }
								    if (findFirst(I.nameOutputFile, "/smsroaminginbound/", 0)!=-1)
								    {
								    	if (findFirst(I.nameOutputFile, "SmsRoamingInbound60_", 0)!=-1)
								    	{
								    		fwriteString(header_smsroaminginbound4+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    	else
								    	{
								    		fwriteString(header_smsroaminginbound+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    }
								    if (findFirst(I.nameOutputFile, "/foniamvno/", 0)!=-1)
								    {
								    	fwriteString(header_foniamvno+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/smsmvno/", 0)!=-1)
								    {
								    	fwriteString(header_smsmvno+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/spx/", 0)!=-1)
								    {
								    	fwriteString(header_spx+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/foniamvnoaggrop/", 0)!=-1)
								    {
								    	fwriteString(header_foniamvnoaggrop+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/smsmvnoaggrop/", 0)!=-1)
								    {
								    	fwriteString(header_smsmvnoaggrop+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/foniaroamingoutbound/", 0)!=-1)
								    {
								    	if (findFirst(I.nameOutputFile, "FoniaRoamingOutbound60_", 0)!=-1)
								    	{
								    		fwriteString(header_foniaroamingoutbound4+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    	else
								    	{
								    		fwriteString(header_foniaroamingoutbound+strCR, fTable[I.nameOutputFile].fDesc, err);
								    	}
								    }
								    if (findFirst(I.nameOutputFile, "/ratinggroup/", 0)!=-1)
								    {
								    	fwriteString(header_ratinggroup+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/rattype/", 0)!=-1)
								    {
								    	fwriteString(header_rattype+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/imsi_vip/", 0)!=-1)
								    {
								    	fwriteString(header_imsi+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/reportimsi/", 0)!=-1)
								    {
								    	fwriteString(header_report_imsi+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/broadbandmvnosgw/", 0)!=-1)
								    {
								    	fwriteString(header_broadmvnosgw+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/broadbandmvnoaggropsgw/", 0)!=-1)
								    {
								    	fwriteString(header_broadmvnoaggropsgw+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/imsi_capnet/", 0)!=-1)
								    {
								    	fwriteString(header_imsicapnet+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								    if (findFirst(I.nameOutputFile, "/volte/", 0)!=-1)
								    {
								    	fwriteString(header_volte+strCR, fTable[I.nameOutputFile].fDesc, err);
								    }
								}
						  	}
					  	
							if(fTable[I.nameOutputFile].suffixString == "" || fTable[I.nameOutputFile].prefixString == "") 
							{
								fTable[I.nameOutputFile].suffixString = I.suffix;
								fTable[I.nameOutputFile].prefixString = I.filePrefix;
							}
	  	
							fwriteString(I.outputContent+strCR, fTable[I.nameOutputFile].fDesc, err);
  						}					  
						
						if (err != 0)
						{
							appTrc(Trace.error, "MultiFileSink - Cannot write to file \"" + I.nameOutputFile + "\"");
						}

						if(I.endROP)
						{ 
							fTable[I.nameOutputFile].closeFile++;
						}							
					}
				}
				
				onTuple CheckClosedFiles : 
				{
					for(rstring key in fTable)
					{					
						mutable FTableEntry FTableEntryTmp = fTable[key];
							
						if(FTableEntryTmp.closeFile == parallelSize && FTableEntryTmp.fDesc != 0ul)
						{
							mutable Event event = {};		
		                    event.eventType = 191;
		                    event.resultCode = 0;
		                    event.rawFile = FTableEntryTmp.expFile;
		                    event.eventCorrelationId = "";
		                    event.rop = "";
		                    event.emId = $mediationName;
	                  		event.neId = "";			
							
							mutable int32 err = 0;							
							
							fclose(FTableEntryTmp.fDesc, err);
							if (err != 0)
							{
								appTrc(Trace.error, "MultiFileSink - Cannot close file \"" + FTableEntryTmp.expFile + "\". Error number : " + (rstring)err);
								event.resultCode = 9;
								event.eventText = "Failed to close the file: "+ FTableEntryTmp.expFile;
                                boolean eventEnabled = mkEvent( event);
                                if(eventEnabled) 
                                	submit ({e=event}, OEvent);
							}
							else
							{
								//RENAME FILE
								mutable int32 error = 0;
								if( exists(FTableEntryTmp.expFile))
								{
									mutable rstring filenamenew;
									
									if (FTableEntryTmp.isNorthIf)
									{
										mutable int32 len;   
										len = length(FTableEntryTmp.expFile) ;
										filenamenew = substring(FTableEntryTmp.expFile,0,findLast(FTableEntryTmp.expFile, ".", len))+FTableEntryTmp.suffixString;
									}
									else
									{
										filenamenew = getPathFile(FTableEntryTmp.expFile)+"/"+FTableEntryTmp.prefixString+getUtilTimeStampForOut()+FTableEntryTmp.suffixString;
									}
									
									error = rename(FTableEntryTmp.expFile,filenamenew);
									if(error != 0)
									{
										appTrc(Trace.error, "RenameFile - Could not rename file \"" + FTableEntryTmp.expFile + "\" into \"" + filenamenew + "\"" + strerror(error)) ;
										appendM(keysToDelete, FTableEntryTmp.expFile);
									}
									else
									{
										// Submit the event to write
										mutable rstring fNameTouch = regexReplace(filenamenew,".csv",".touch",false);
										mutable uint64 fdTouch = fopen(fNameTouch, "w", err); 
										if(error != 0)
										{
											appTrc(Trace.error, "Could not create file \"" + fNameTouch + "\"" + strerror(error)) ;
										}
										else
										{
											fclose(fdTouch, err);
											if(error != 0)
											{
												appTrc(Trace.error, "Could not close file \"" + fNameTouch + "\"" + strerror(error)) ;
											}
										}
										
										event.resultCode = 0;
										event.eventText = "File closed: "+ FTableEntryTmp.expFile;
										
										appendM(keysToDelete, FTableEntryTmp.expFile);
										
                                		boolean eventEnabled = mkEvent( event);
                                		
                                		if(eventEnabled) 
                                			submit ({e=event}, OEvent);
									}
									
								}	
								else {
									appTrc(Trace.error, "FTableEntryTmp.expFile: " + FTableEntryTmp.expFile + " does not exist. Cannot rename.");
								}
							}
						}
						else if (FTableEntryTmp.closeFile == parallelSize && FTableEntryTmp.fDesc == 0ul) {
							appTrc(Trace.debug, "Multifilesink: adding file " + FTableEntryTmp.expFile + " to the keysToDelete list.");
							appendM(keysToDelete, FTableEntryTmp.expFile);
						}
					} 
					
					for(rstring key in keysToDelete)
					{
						appTrc(Trace.debug, "Multifilesink : REMOVE ENTRY IN FILETABLE " + key);
						removeM(fTable, key);
					}
					clearM(keysToDelete);
				}
				
				config
					threadedPort : queue(I, Sys.Wait, 10000), queue(CheckClosedFiles, Sys.Wait, 100);
		}
}