namespace com.ti.oss.common.cdr.file;

// include type PduType
use com.ti.oss.common.cdr.checkPduType::*;

/**
 * 
 * Sort the file names and submit the newest one with an higher priority
 * 
 * \input 	File: 		The file name with its header information 
 * \input 	Control: 	A punctuation is received from this port when the parser completed the parsing operations on one file
 * \output 	OutFile:	The output file name with header with its header information
 * 
 */
public composite SortFileNames (
								 input stream<PduType> File, stream<boolean control> Control; 
								 output stream<PduType> OutFile
								)
{		
	graph
		
		stream<PduType> OutFile = Custom(File as I1; Control as I2)
		{
			logic state :
			{
				// Queue used to keep the filenames sorted (from the newest to the oldest)
				mutable list<rstring> sortedQueue;
				// Hashmap containing data to be forwarded
				mutable map<rstring, PduType> fileNameMap;
				// Queue size
				mutable int32 queueSize = 0;
				// Counter used to use the direct forwarding instead of queuing elements
				mutable uint32 counter = 0u;
				// Flag used to enable the direct forwarding without using the queue
				mutable boolean flagSubmit = false;
				// Temp PduType element
				mutable PduType p = {};
			}
			
			onPunct I2 :
			{				
				// If the queue is not empty
				if(queueSize > 0)
				{
					// Submit the most recent element in the queue
					rstring elemSorted = sortedQueue[queueSize - 1];
					
					swap(fileNameMap[elemSorted], p);
					submit(p, OutFile); 
					appTrc(Trace.info, "queueSize > 0. Submitting the file: " + elemSorted);
					// And remove it from the queue
					removeM(fileNameMap, elemSorted);
					removeM(sortedQueue, queueSize - 1); 
					queueSize--;
				}
				else
				{
					flagSubmit = true;
					appTrc(Trace.info, "sortedQueue is empty. Setting flagSubmit = true");
				}
			}
			
			onTuple I1 : 
			{
				// If the operator is fired for the first time or the counter was reset because the queue was empty				
				if(counter < 2u)
				{
					appTrc(Trace.info, "counter < 2. Forwarding the current input tuple without queuing.");
					// Just forward the input tuple to the output port
					submit(I1, OutFile);
					// And increase the counter
					counter++;
				}	
				// If the queue is empty
				else if(flagSubmit == true)
				{
					appTrc(Trace.info, "flagSubmit = true. Forwarding the current input tuple without queuing and resetting the counter to 0.");
					// Forward the input tuple to the output port
					submit(I1, OutFile);
					// Set the flag to false
					flagSubmit = false;
					// And reset the counter variable
					counter = 0u;
				}
				// Else
				else 
				{
					// Extract the file name from the full path
					mutable list<rstring> tmp = tokenize(I1.fName,"/",true);
					// Queue the current file and sort the queue
					if(size(tmp) > 0) 
					{
						rstring file = tmp[size(tmp) - 1];
						
						insertM(fileNameMap, file, I1); 
						appendM(sortedQueue, file);
						queueSize++;
						appTrc(Trace.info, "queueSize: " + (rstring)size(sortedQueue));
						sortM(sortedQueue); 
					}
				}
			}
		}

}


// OLD
//
//public composite SortFileNames (
//								 input stream<rstring fileName, uint64 fileSize> File, stream<boolean control> Control; 
//								 output stream<rstring fileName, uint64 fileSize> OutFile
//								)
//{
//	type
//		FileType = tuple<rstring fileName, uint64 fileSize>;
//		
//	graph
//		
//		stream<rstring fileName, uint64 fileSize> OutFile = Custom(File as I1; Control as I2)
//		{
//			logic state :
//			{
//				mutable list<rstring> sortedQueue;
//				mutable map<rstring, FileType> fileNameMap;
//				mutable int32 queueSize = 0;
//				mutable boolean firstTime = true;
//				mutable uint32 counter = 0u;
//				mutable boolean flagSubmit = false;
//			}
//			
//			onPunct I2 :
//			{
//				if(firstTime) 
//				{
//					firstTime = false;
//				}
//				
//				//int32 queueSize = size(sortedQueue);
//				if(queueSize > 0)
//				{
//					rstring elemSorted = sortedQueue[queueSize - 1];
//					submit({fileName = fileNameMap[elemSorted].fileName, fileSize = fileNameMap[elemSorted].fileSize}, OutFile); 
//					removeM(fileNameMap, elemSorted);
//					removeM(sortedQueue, queueSize - 1); 
//					queueSize--;
//				}
//				else
//				{
//					flagSubmit = true;
//				}
//			}
//			
//			onTuple I1 : 
//			{				
//				if(firstTime && counter < 10u)
//				{
//					submit(I1, OutFile);
//					counter++;
//				}		
//				else if(flagSubmit == true)
//				{
//					submit(I1, OutFile);
//					flagSubmit = false;
//				}
//				else 
//				{
//					mutable list<rstring> tmp = tokenize(fileName,"/",true);
//					if(size(tmp) > 0) 
//					{
//						rstring file = tmp[size(tmp) - 1];
//						
//						insertM(fileNameMap, file, {fileName = I1.fileName, fileSize = I1.fileSize}); 
//						appendM(sortedQueue, file);
//						queueSize++;
//						sortM(sortedQueue); 
//					}
//				}
//			}
//			
//			//config
//				//threadedPort : queue(I1, Sys.Wait, 10000), queue(I2, Sys.Wait, 100);
//		}
//
//
//}