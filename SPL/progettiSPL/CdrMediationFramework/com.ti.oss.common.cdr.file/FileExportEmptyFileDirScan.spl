namespace com.ti.oss.common.cdr.file;

// from com.ibm.streamsx.file
use com.ibm.streamsx.file::*;

// from MediationFramework
use com.ti.oss.common.types::*;
use com.ti.oss.common.event::*;

// from CdrMediationFramework
use com.ti.oss.common.cdr.util::*;

public composite FileExportEmptyFileDirScan(
	input

		stream<FileHeader h, FileTrailer t> File;

	output

		OutEvent
)
{
	type

		HeaderTrailer = FileHeader h, FileTrailer t, int32 count;

	graph

		(stream<Event e> OutEvent) as MoveFile = Custom( File )	
		{
			logic

				state :
				{
					mutable FileHeader fHeader = {};					
				}

				onTuple File :
				{
					appTrc( Trace.trace, "FileExportEmptyFileDirScan - Renaming file \"" + File.t.outFile +
						"\" to \"" + File.t.exportFile + "\"..." );

					if ( fHeader != File.h )
						fHeader = File.h;

					mutable int32 error = 0;

					rstring pathname = getPathFile( File.t.exportFile );

					if ( !exists( pathname ) )
					{
						int32 error = createDirectory( pathname );

						if ( error != 0 )
						{
							appTrc( Trace.error, "FileExportEmptyFileDirScan - Can not create directory \"" + pathname +
								"\". Please, verify user rights - Error is \"" + strerror( error ) + "\"" );                     
						}
					}

					if ( !exists( File.t.exportFile ) )
					{
						error = rename( File.t.outFile, File.t.exportFile );  
					}

					// TODO:
					//   1. Compile with assert disable for final release
					//   2. An alarm MUST be sent.

					if ( error != 0 ) 
					{
						appTrc( Trace.error, "FileExportEmptyFileDirScan - Could not rename file \"" + File.t.outFile +
							"\" to \"" + File.t.exportFile + "\"" + strerror( error ) );
					} 
					else
					{
						// Write event
						mutable Event event = {};

						event.eventType = 200;
						event.resultCode = 0;
						event.rawFile = filename( h.fName );
						event.eventCorrelationId = h.eventCorrelationId;
						event.rop = h.rop;
						event.emId = h.emId;
						event.neId = h.neId;
						event.eventText = "File exported : "+ File.t.exportFile;

						boolean eventEnabled = mkEvent( event, h.sessionBeginTime );

						if ( eventEnabled ) 
							submit( {e=event}, OutEvent );                                                     
					}
				}

				onPunct File: 
				{
					if ( currentPunct() == Sys.WindowMarker )
					{
						// Prepare the event to submit 
						mutable Event event = {};		

						event.eventType = 210;
						event.resultCode = 0;
						event.rawFile = filename(fHeader.fName);
						event.eventCorrelationId = fHeader.eventCorrelationId;
						event.rop = fHeader.rop;
						event.emId = fHeader.emId;
						event.neId = fHeader.neId;
						event.eventText = "Row file processing completed";

						boolean eventEnabled = mkEvent( event, fHeader.sessionBeginTime );

						if ( eventEnabled )
							submit( {e=event}, OutEvent );

						submit( Sys.WindowMarker, OutEvent );	
					}
				}
		}
}       