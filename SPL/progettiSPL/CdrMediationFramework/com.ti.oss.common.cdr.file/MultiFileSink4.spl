namespace com.ti.oss.common.cdr.file ;

// from ibm
use spl.file::*;

// from com.ibm.streamsx.file
use com.ibm.streamsx.file::*;

// from MediationFramework
use com.ti.oss.common.event::*;

// from MediationUtils
use com.ti.oss.common.util.cfg::*;
use com.ti.oss.common.util.io::*;
use com.ti.oss.common.util.time::*;

// from CdrMediationFramework
use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.cdr.util::*;


public composite MultiFileSink4(
	input

		stream<CsvWrite> I;

	output

		stream<Event e> OEvent
)
{
	param

		expression<rstring> $mediationName;
		expression<int32> $parallelSize;

	type

		FTableEntry = rstring expFile, int32 closeFileCounter, boolean isBigData, rstring suffixString, rstring prefixString, boolean isFileOpen, rstring isCompressed, rstring isCloseSize, int32 maxSize;

	graph

		stream<boolean check> CheckClosedFiles = Beacon()
		{
			param

				period : 1.0;

			output

				CheckClosedFiles : check = true; 
		}

		( stream<Event e> OEvent ) as Sink = Custom( I; CheckClosedFiles ) 
		{
			logic

				state :
				{
					mutable int32 parallelSize = $parallelSize;

					// SAI/SQM hot reloadable
					mutable rstring header_broadbandggsnapn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDGGSNAPN");
					mutable rstring header_broadbandsgsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDSGSN");
					mutable rstring header_roamingbroadbandggsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_ROAMINGBROADBANDGGSN");
					mutable rstring header_tavggsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_TAVGGSN");
					mutable rstring header_tavsgsn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_TAVSGSN");
					mutable rstring header_bscbroaddownlink = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BSCBROADDOWNLINK");
					mutable rstring header_rncbroaddownlink = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_RNCBROADDOWNLINK");
					mutable rstring header_broadmvno = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADMVNO");
					mutable rstring header_broadroaming = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADROAMING");
					mutable rstring header_broadmvnoaggrop = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADMVNOAGGROP");
					mutable rstring header_broadbandtac = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDTAC");
					mutable rstring header_broadbandpgwapn = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_BROADBANDPGWAPN");
					mutable rstring header_fonia = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIA");
					mutable rstring header_sms = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMS");
					mutable rstring header_foniaroaminginbound = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAROAMINGINBOUND");
					mutable rstring header_smsroaminginbound = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMSROAMINGINBOUND");
					mutable rstring header_foniamvno = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAMVNO");
					mutable rstring header_smsmvno = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMSMVNO");
					mutable rstring header_spx = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SPX");
					mutable rstring header_foniamvnoaggrop = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAMVNOAGGROP");
					mutable rstring header_smsmvnoaggrop = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_SMSMVNOAGGROP");
					mutable rstring header_foniaroamingoutbound = getCfgParam("COMMON_CFG_DIR",$mediationName,"HEADER_FONIAROAMINGOUTBOUND");

					// big data hot reloadable
					mutable rstring compress = getCfgParam("COMMON_CFG_DIR",$mediationName,"Compress");
					mutable rstring closeSize = getCfgParam("COMMON_CFG_DIR",$mediationName,"CLOSE_SIZE");
					mutable int32 outputSize = ( (int32) getCfgParam("COMMON_CFG_DIR",$mediationName,"OUTPUT_SIZE") )*(int32)1024*(int32)1024;                 // from MB to bytes

					mutable map<rstring, FTableEntry> fTable;
					mutable list<rstring> keysToDelete;
				}

				onTuple I:
				{
					mutable int32 err = 0;
					rstring strCR = "\n";

					if ( I.endROP ) {
						appTrc( Trace.debug, "MultiFileSink - END ROP FOR FILE " + I.nameOutputFile );
					}

					if ( !has( fTable, I.nameOutputFile ) && I.nameOutputFile != "" ) {
						if ( isConfigurationChanged( $mediationName ) )                                // update (if file changed) the hot reloadable configuration parameters for the new rop 
						{
							header_broadbandggsnapn = checkConfiguration( $mediationName, "HEADER_BROADBANDGGSNAPN", header_broadbandggsnapn );
							header_broadbandsgsn = checkConfiguration( $mediationName, "HEADER_BROADBANDSGSN", header_broadbandsgsn );
							header_roamingbroadbandggsn = checkConfiguration( $mediationName, "HEADER_ROAMINGBROADBANDGGSN", header_roamingbroadbandggsn );
							header_tavggsn = checkConfiguration( $mediationName, "HEADER_TAVGGSN", header_tavggsn );
							header_tavsgsn = checkConfiguration( $mediationName, "HEADER_TAVSGSN", header_tavsgsn);
							header_bscbroaddownlink = checkConfiguration( $mediationName, "HEADER_BSCBROADDOWNLINK", header_bscbroaddownlink );
							header_rncbroaddownlink = checkConfiguration( $mediationName, "HEADER_RNCBROADDOWNLINK", header_rncbroaddownlink );
							header_broadmvno = checkConfiguration( $mediationName, "HEADER_BROADMVNO", header_broadmvno );
							header_broadroaming = checkConfiguration( $mediationName, "HEADER_BROADROAMING", header_broadroaming );
							header_broadmvnoaggrop = checkConfiguration( $mediationName, "HEADER_BROADMVNOAGGROP", header_broadmvnoaggrop );
							header_broadbandtac = checkConfiguration( $mediationName, "HEADER_BROADBANDTAC", header_broadbandtac );
							header_broadbandpgwapn = checkConfiguration( $mediationName, "HEADER_BROADBANDPGWAPN", header_broadbandpgwapn );
							header_fonia = checkConfiguration( $mediationName, "HEADER_FONIA", header_fonia );
							header_sms = checkConfiguration( $mediationName, "HEADER_SMS", header_sms );
							header_foniaroaminginbound = checkConfiguration( $mediationName, "HEADER_FONIAROAMINGINBOUND", header_foniaroaminginbound );
							header_smsroaminginbound = checkConfiguration( $mediationName, "HEADER_SMSROAMINGINBOUND", header_smsroaminginbound );
							header_foniamvno = checkConfiguration( $mediationName, "HEADER_FONIAMVNO", header_foniamvno );
							header_smsmvno = checkConfiguration( $mediationName, "HEADER_SMSMVNO", header_smsmvno );
							header_spx = checkConfiguration( $mediationName, "HEADER_SPX", header_spx );
							header_foniamvnoaggrop = checkConfiguration( $mediationName, "HEADER_FONIAMVNOAGGROP", header_foniamvnoaggrop );
							header_smsmvnoaggrop = checkConfiguration( $mediationName, "HEADER_SMSMVNOAGGROP", header_smsmvnoaggrop );
							header_foniaroamingoutbound = checkConfiguration( $mediationName, "HEADER_FONIAROAMINGOUTBOUND", header_foniaroamingoutbound );

							compress = checkConfiguration( $mediationName, "Compress", compress );
							closeSize = checkConfiguration( $mediationName, "CLOSE_SIZE", closeSize );

							mutable int32 newOutputSize = (int32) checkConfiguration( $mediationName, "OUTPUT_SIZE", outputSize );

							if ( newOutputSize != outputSize )
								outputSize = newOutputSize*(int32)1024*(int32)1024;                    // from MB to bytes
						}

						//RM: output content == "" inside the endROP tuple, so the first cnt increment should be put here
						mutable int32 cnt = 0;
						mutable boolean bigData = false;
						mutable boolean fileOpen = false;

						if ( I.endROP )
							cnt++;

						if ( I.northIf == "Bigdata" ) {
							bigData = true;
						}

						createDir( I.nameOutputFile );

						if ( I.outputContent != "" || ( I.northIf == "Bigdata" && I.writeOn == true ) ) {
							appTrc( Trace.info, "WRITE CONTENT IN NEW FILE " + I.nameOutputFile );

							appTrc( Trace.debug, "MultiFileSink_DBG 1 - OPEN FILE " + I.nameOutputFile ); 
							appTrc( Trace.debug, "MultiFileSink_DBG 1 - the tuple received is: " + (rstring)I );

							// OPEN - BEGIN
							if ( I.northIf == "Bigdata" ) {
								if ( compress == "true" )
									err = fOpenWithCounter( I.nameOutputFile, "w", "gzip", 1, I.suffix + ".gz.tmp", I.suffix + ".gz" );
								else
									err = fOpenWithCounter( I.nameOutputFile, "w", "none", 1, I.suffix + ".tmp", I.suffix );
							}
							else {
								err = fOpen( I.nameOutputFile, "w", "none" );
							}

							if ( err < 0 ) {
	    						appTrc( Trace.error, "MultiFileSink - Cannot open file \"" + I.nameOutputFile + "\" for writing" );
							}
							else
								fileOpen = true;
							// OPEN - END

//							fileOpen = openFile( I, compress, I.suffix );

							if ( fileOpen ) {
								if ( I.northIf != "Bigdata" ) {      // if SAI or SQM we have to write first the headers
									// WRITE HEADERS - BEGIN
									if (findFirst(I.nameOutputFile, "/broadbandggsnapn/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_broadbandggsnapn + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/broadbandsgsn/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_broadbandsgsn + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/roamingbroadbandggsn/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_roamingbroadbandggsn + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/tavggsn/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_tavggsn + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/tavsgsn/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_tavsgsn + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/bscbroadbanddownlink/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_bscbroaddownlink + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/rncbroadbanddownlink/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_rncbroaddownlink + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/broadbandmvno/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_broadmvno + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/roamingbroadbandsgsn/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_broadroaming + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/broadbandmvnoaggrop/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_broadmvnoaggrop + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/broadbandtac/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_broadbandtac + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/broadbandpgwapn/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_broadbandpgwapn + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/fonia/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_fonia + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/sms/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_sms + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/foniaroaminginbound/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_foniaroaminginbound + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/smsroaminginbound/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_smsroaminginbound + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/foniamvno/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_foniamvno + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/smsmvno/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_smsmvno + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/spx/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_spx + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/foniamvnoaggrop/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_foniamvnoaggrop + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/smsmvnoaggrop/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_smsmvnoaggrop + strCR );
									}
									else if (findFirst(I.nameOutputFile, "/foniaroamingoutbound/", 0)!=-1) {
										err = fWrite( nameOutputFile, header_foniaroamingoutbound + strCR );
									}

									if ( err < 0 ) {
										appTrc( Trace.error, "MultiFileSink - Cannot write headers to file \"" + nameOutputFile + "\"" );
									}
									// WRITE HEADERS - END

//									writeHeaders( I.nameOutputFile );
								}

								// WRITE - BEGIN
								if ( I.outputContent != "" ) {
									if ( bigData == true && closeSize == "true" )
										err = fWriteWithMaxSize( I.nameOutputFile, I.outputContent + strCR, (uint32) outputSize );
									else
										err = fWrite( I.nameOutputFile, I.outputContent + strCR );
								}

								if ( err < 0 ) {
									appTrc( Trace.error, "MultiFileSink - Cannot write content to file \"" + I.nameOutputFile + "\"" );
								}
								// WRITE - END

//								writeContent( I, isBigData, closeSize, outputSize );
							}
						}

						appTrc( Trace.debug, "MultiFileSink_DBG - insert into FILETABLE " + I.nameOutputFile + " END ROP: " + (rstring)I.endROP );

						mutable FTableEntry entry = {expFile=I.nameOutputFile, closeFileCounter=cnt, isBigData=bigData, suffixString = I.suffix, prefixString = I.filePrefix, isFileOpen = fileOpen, isCompressed = compress, isCloseSize = closeSize, maxSize = outputSize};

						insertM(fTable, I.nameOutputFile, entry);	
						entry = (FTableEntry){};
					}
					else if ( I.nameOutputFile != "" )               // if filename is in the map
					{
						if ( I.outputContent != "" || ( I.northIf == "Bigdata" && I.writeOn == true ) )	{
							appTrc( Trace.info, "WRITE CONTENT IN EXISTING FILE " + I.nameOutputFile );
						
							if ( fTable[I.nameOutputFile].isFileOpen == false ) {
								appTrc( Trace.debug, "MultiFileSink_DBG 2 - OPEN FILE" + I.nameOutputFile ); 
								appTrc( Trace.debug, "MultiFileSink_DBG 2 - the tuple received is: " + (rstring)I );

								// OPEN - BEGIN
								if ( I.northIf == "Bigdata" ) {
									if ( fTable[I.nameOutputFile].isCompressed == "true" )
										err = fOpenWithCounter( I.nameOutputFile, "w", "gzip", 1, fTable[I.nameOutputFile].suffixString + ".gz.tmp", fTable[I.nameOutputFile].suffixString + ".gz" );
									else
										err = fOpenWithCounter( I.nameOutputFile, "w", "none", 1, fTable[I.nameOutputFile].suffixString + ".tmp", fTable[I.nameOutputFile].suffixString );
								}
								else {
									err = fOpen( I.nameOutputFile, "w", "none" );
								}

								if ( err < 0 ) {
	    							appTrc( Trace.error, "MultiFileSink - Cannot open file \"" + I.nameOutputFile + "\" for writing" );
								}
								else
									fTable[I.nameOutputFile].isFileOpen = true;
								// OPEN - END

//								fTable[I.nameOutputFile].isFileOpen = openFile( I, fTable[I.nameOutputFile].isCompressed, fTable[I.nameOutputFile].suffixString );

								if ( fTable[I.nameOutputFile].isFileOpen ) {
									if ( I.northIf != "Bigdata" ) {      // if SAI or SQM we have to write first the headers
										// WRITE HEADERS - BEGIN
										if (findFirst(I.nameOutputFile, "/broadbandggsnapn/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_broadbandggsnapn + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/broadbandsgsn/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_broadbandsgsn + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/roamingbroadbandggsn/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_roamingbroadbandggsn + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/tavggsn/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_tavggsn + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/tavsgsn/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_tavsgsn + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/bscbroadbanddownlink/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_bscbroaddownlink + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/rncbroadbanddownlink/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_rncbroaddownlink + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/broadbandmvno/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_broadmvno + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/roamingbroadbandsgsn/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_broadroaming + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/broadbandmvnoaggrop/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_broadmvnoaggrop + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/broadbandtac/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_broadbandtac + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/broadbandpgwapn/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_broadbandpgwapn + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/fonia/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_fonia + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/sms/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_sms + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/foniaroaminginbound/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_foniaroaminginbound + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/smsroaminginbound/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_smsroaminginbound + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/foniamvno/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_foniamvno + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/smsmvno/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_smsmvno + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/spx/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_spx + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/foniamvnoaggrop/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_foniamvnoaggrop + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/smsmvnoaggrop/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_smsmvnoaggrop + strCR );
										}
										else if (findFirst(I.nameOutputFile, "/foniaroamingoutbound/", 0)!=-1) {
											err = fWrite( nameOutputFile, header_foniaroamingoutbound + strCR );
										}

										if ( err < 0 ) {
											appTrc( Trace.error, "MultiFileSink - Cannot write headers to file \"" + nameOutputFile + "\"" );
										}
										// WRITE HEADERS - END

//										writeHeaders( I.nameOutputFile );
									}

									// WRITE - BEGIN
									if ( I.outputContent != "" ) {
										if ( fTable[I.nameOutputFile].isBigData == true && fTable[I.nameOutputFile].isCloseSize == "true" )
											err = fWriteWithMaxSize( I.nameOutputFile, I.outputContent + strCR, (uint32) fTable[I.nameOutputFile].maxSize );
										else
											err = fWrite( I.nameOutputFile, I.outputContent + strCR );
									}

									if ( err < 0 ) {
										appTrc( Trace.error, "MultiFileSink - Cannot write content to file \"" + I.nameOutputFile + "\"" );
									}
									// WRITE - END

//									writeContent( I, fTable[I.nameOutputFile].isBigData, fTable[I.nameOutputFile].closeSize, fTable[I.nameOutputFile].outputSize );
								}
							}
							else {
								// WRITE - BEGIN
								if ( I.outputContent != "" ) {
									if ( fTable[I.nameOutputFile].isBigData == true && fTable[I.nameOutputFile].isCloseSize == "true" )
										err = fWriteWithMaxSize( I.nameOutputFile, I.outputContent + strCR, (uint32) fTable[I.nameOutputFile].maxSize );
									else
										err = fWrite( I.nameOutputFile, I.outputContent + strCR );
								}

								if ( err < 0 ) {
									appTrc( Trace.error, "MultiFileSink - Cannot write content to file \"" + I.nameOutputFile + "\"" );
								}
								// WRITE - END

//								writeContent( I, fTable[I.nameOutputFile].isBigData, fTable[I.nameOutputFile].closeSize, fTable[I.nameOutputFile].outputSize );
							}

							if ( fTable[I.nameOutputFile].suffixString == "" || fTable[I.nameOutputFile].prefixString == "" ) {
								fTable[I.nameOutputFile].suffixString = I.suffix;
								fTable[I.nameOutputFile].prefixString = I.filePrefix;
							}
						}

						appTrc( Trace.debug, "MultiFileSink - UPDATE IN FILETABLE " + I.nameOutputFile + "END ROP " + (rstring)I.endROP );

						if ( I.endROP ) {
							fTable[I.nameOutputFile].closeFileCounter++;

							appTrc( Trace.debug, "MultiFileSink - name: " + I.nameOutputFile + ". Count: " + (rstring)fTable[I.nameOutputFile].closeFileCounter );
						}
					}
				}

				onTuple CheckClosedFiles :
				{
					for( rstring key in fTable )
					{
						mutable FTableEntry FTableEntryTmp = fTable[key];

						if ( FTableEntryTmp.closeFileCounter == parallelSize && FTableEntryTmp.isFileOpen )
						{
							mutable Event event = {};

							event.eventType = 191;
							event.resultCode = 0;
							event.rawFile = FTableEntryTmp.expFile;
							event.eventCorrelationId = "";
							event.rop = "";
							event.emId = $mediationName;
							event.neId = "";

							appTrc( Trace.debug, "MultiFileSink - closing file \"" + FTableEntryTmp.expFile + "\"..." );
							appTrc( Trace.debug, "CLOSE FILE " + (rstring)key );

							if ( FTableEntryTmp.isBigData )          // if Bigdata
							{
								mutable rstring filenamenew;

								filenamenew = fClose( key, "_last" );

								if ( filenamenew == "" )
								{
									event.rawFile = FTableEntryTmp.expFile;

									appTrc( Trace.error, "MultiFileSink - Cannot rename file \"" +
										FTableEntryTmp.expFile + "\"" );

									// event to write
									event.resultCode = 9;
									event.eventText = "Failed to close file: " + FTableEntryTmp.expFile;
								}
								else
								{
									event.rawFile = filenamenew;

									// event to write
									event.resultCode = 0;
									event.eventText = "File closed: " + filenamenew;
								}
							}
							else
							{
								fClose( key );

								//RENAME FILE
								mutable int32 err = 0;

								if ( exists( FTableEntryTmp.expFile ) )
								{
									appTrc( Trace.info, "RENAME FILE " + FTableEntryTmp.expFile );

									mutable rstring filenamenew;

									filenamenew = getPathFile( FTableEntryTmp.expFile) + "/" + FTableEntryTmp.prefixString + getUtilTimeStampForOut() + FTableEntryTmp.suffixString;

									event.rawFile = filenamenew;

									err = rename( FTableEntryTmp.expFile, filenamenew );

									if ( err != 0 )
									{
										appTrc( Trace.error, "MultiFileSink - Cannot rename file \"" +
											FTableEntryTmp.expFile + "\" to \"" + filenamenew + "\": " +
											strerror( err ) );

										// event to write
										event.resultCode = 9;
										event.eventText = "Failed to close file: " + filenamenew;
									}
									else
									{
										mutable rstring fNameTouch = regexReplace(filenamenew,".csv",".touch",false);
										mutable uint64 fdTouch = fopen(fNameTouch, "w", err);
 
										if (err != 0)
										{
											appTrc(Trace.error, "Could not create file \"" + fNameTouch + "\"" + strerror(err)) ;
										}
										else
										{
											fclose(fdTouch, err);
											if (err != 0)
											{
												appTrc(Trace.error, "Could not close file \"" + fNameTouch + "\"" + strerror(err)) ;
											}
										}
									
										// event to write
										event.resultCode = 0;
										event.eventText = "File closed: " + filenamenew;
									}
								}
								else {
									appTrc( Trace.error, "MultiFileSink - Cannot rename file \"" +
										FTableEntryTmp.expFile + "\": File does not exist" );

									event.resultCode = 9;
									event.eventText = "Failed to rename file: " + FTableEntryTmp.expFile;
								}
							}

							appendM( keysToDelete, FTableEntryTmp.expFile );

							boolean eventEnabled = mkEvent( event );

							if ( eventEnabled ) 
								submit( {e=event}, OEvent );
						}
						else if ( FTableEntryTmp.closeFileCounter == parallelSize && FTableEntryTmp.isFileOpen ) {
							appTrc( Trace.debug, "Multifilesink - adding file " + FTableEntryTmp.expFile + " to the keysToDelete list." );

							appendM( keysToDelete, FTableEntryTmp.expFile );
						}
					}

					for ( rstring key in keysToDelete )
					{
						appTrc( Trace.debug, "Multifilesink - REMOVE ENTRY IN FILETABLE " + key );

						removeM( fTable, key );
					}

					clearM( keysToDelete );
				}

			config

				threadedPort : queue( I, Sys.Wait, 10000 ), queue( CheckClosedFiles, Sys.Wait, 100 );
		}
}


void createDir( rstring nameOutputFile )
{
	mutable int32 err = 0;

	rstring pathName = getPathFile( nameOutputFile );

	if ( !exists( pathName ) ) {
		err = createDirectory( pathName );
	}

	if ( err != 0 ) {
		appTrc( Trace.error, "MultiFileSink - Cannot create directory \"" + pathName +
			"\". Please, verify user rights. Error is \"" + strerror( err ) + "\"" );
	}
}

boolean openFile( CsvWrite I, rstring compress, rstring suffix )
{
	mutable int32 err = 0;
/*
	if ( I.northIf == "Bigdata" ) {
		if ( compress == "true" )
			err = fOpenWithCounter( I.nameOutputFile, "w", "gzip", 1, suffix + ".gz.tmp", suffix + ".gz" );
		else
			err = fOpenWithCounter( I.nameOutputFile, "w", "none", 1, suffix + ".tmp", suffix );
	}
	else {
		err = fOpen( I.nameOutputFile, "w", "none" );
	}

	if ( err < 0 ) {
	    appTrc( Trace.error, "MultiFileSink - Cannot open file \"" + I.nameOutputFile + "\" for writing" );
	}
*/
	if ( err == 0 )
		return true;
	else
		return false;
}

void writeHeaders( rstring nameOutputFile )
{
/*	mutable int32 err = 0;

	rstring strCR = "\n";

	if (findFirst(I.nameOutputFile, "/broadbandggsnapn/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_broadbandggsnapn + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/broadbandsgsn/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_broadbandsgsn + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/roamingbroadbandggsn/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_roamingbroadbandggsn + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/tavggsn/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_tavggsn + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/tavsgsn/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_tavsgsn + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/bscbroadbanddownlink/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_bscbroaddownlink + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/rncbroadbanddownlink/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_rncbroaddownlink + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/broadbandmvno/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_broadmvno + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/roamingbroadbandsgsn/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_broadroaming + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/broadbandmvnoaggrop/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_broadmvnoaggrop + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/broadbandtac/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_broadbandtac + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/broadbandpgwapn/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_broadbandpgwapn + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/fonia/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_fonia + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/sms/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_sms + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/foniaroaminginbound/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_foniaroaminginbound + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/smsroaminginbound/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_smsroaminginbound + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/foniamvno/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_foniamvno + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/smsmvno/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_smsmvno + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/spx/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_spx + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/foniamvnoaggrop/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_foniamvnoaggrop + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/smsmvnoaggrop/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_smsmvnoaggrop + strCR );
	}
	else if (findFirst(I.nameOutputFile, "/foniaroamingoutbound/", 0)!=-1) {
		err = fWrite( nameOutputFile, header_foniaroamingoutbound + strCR );
	}

	if ( err < 0 ) {
		appTrc( Trace.error, "MultiFileSink - Cannot write headers to file \"" + nameOutputFile + "\"" );
	}*/
}

void writeContent( CsvWrite I, boolean isBigData, rstring closeSize, int32 outputSize )
{
/*	mutable int32 err = 0;

	rstring strCR = "\n";

	if ( I.outputContent != "" ) {
		if ( isBigData == true && closeSize == "true" )
			err = fWriteWithMaxSize( I.nameOutputFile, I.outputContent + strCR, (uint32) outputSize );
		else
			err = fWrite( I.nameOutputFile, I.outputContent + strCR );
	}

	if ( err < 0 ) {
		appTrc( Trace.error, "MultiFileSink - Cannot write content to file \"" + I.nameOutputFile + "\"" );
	}*/
}
