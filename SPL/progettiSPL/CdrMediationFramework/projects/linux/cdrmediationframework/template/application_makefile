#---------------------------------------------------------------------
#
# File:         application_makefile
# Project:      
# Component:    
# Description:  UNIX makefile for the application
# Version:      1
#
# Author:       Antonino Di Guardo
# Date:         04/10/2013
# Last Update:  
# Copyright(c): GFM Integration 2013
#
#---------------------------------------------------------------------


###############################################################################
#
# Target rules (explicit rules)
#
###############################################################################

#######################################
# Default target
#######################################

.DEFAULT:
	@$(MAKE) -f $(APPLICATION_HELP_FILE)


#######################################
# External target rules
#
# Target usable by the users.
# Targets that the user normally passes
# as parameter to the 'make' command
#######################################
.PHONY: ? all clean dist distclean share unshare install uninstall integrate unintegrate initpackage updatepackage buildpackage checkout

all:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	all; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
	@for dir in $(COMPONENT_DIRS); do \
		echo; \
		echo; \
		echo Accessing component directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	all; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd ..; \
	done

?:
	@$(MAKE) -f $(APPLICATION_HELP_FILE)

clean:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	clean; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
	@for dir in $(COMPONENT_DIRS); do \
		echo; \
		echo; \
		echo Accessing component directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	clean; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd ..; \
	done

dist:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	dist; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
	@for dir in $(COMPONENT_DIRS); do \
		echo; \
		echo; \
		echo Accessing component directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	dist; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd ..; \
	done

distclean: destroy_dir
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	distclean; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif

share:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	share; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
	@for dir in $(COMPONENT_DIRS); do \
		echo; \
		echo; \
		echo Accessing component directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE) share; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd ..; \
	done

unshare: destroy_share_dir
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	unshare; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif

install:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	install; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
	@for dir in $(COMPONENT_DIRS); do \
		echo; \
		echo; \
		echo Accessing component directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	install; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd ..; \
	done
ifneq ($(APPLICATION_INSTALL_CUSTOM_SCRIPT),)
	@$(MAKE) -f $(APPLICATION_INSTALL_CUSTOM_SCRIPT) install MAKE_FILE=$(MAKE_FILE)
endif

uninstall: destroy_install_dir
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	uninstall; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
ifneq ($(APPLICATION_INSTALL_CUSTOM_SCRIPT),)
	@$(MAKE) -f $(APPLICATION_INSTALL_CUSTOM_SCRIPT) uninstall MAKE_FILE=$(MAKE_FILE)
endif

integrate: check_integrate build_integrate_dir
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	integrate; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
	@for dir in $(COMPONENT_DIRS); do \
		echo; \
		echo; \
		echo Accessing component directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	integrate MAKE_UP_LEVEL_INTEGRATION=false; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd ..; \
	done
	@$(MAKE) -f $(APPLICATION_INTEGRATE_SCRIPT) integrate
ifneq ($(APPLICATION_INTEGRATE_CUSTOM_SCRIPT),)
	@$(MAKE) -f $(APPLICATION_INTEGRATE_CUSTOM_SCRIPT) integrate MAKE_FILE=$(MAKE_FILE)
endif

unintegrate: destroy_integrate_dir
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	unintegrate; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
ifneq ($(APPLICATION_INTEGRATE_CUSTOM_SCRIPT),)
	@$(MAKE) -f $(APPLICATION_INTEGRATE_CUSTOM_SCRIPT) unintegrate
endif

initpackage:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	initpackage; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
ifneq ($(PACKAGE_BASE_DIR),)
ifneq ($(PACKAGE_TEMPLATE_BASE_DIR),)
ifneq ($(PACKAGE_INIT_FILE),)
	@rm -rf $(PACKAGE_BASE_DIR)
	@mkdir -p $(PACKAGE_BASE_DIR)
	@cp -rf $(PACKAGE_TEMPLATE_BASE_DIR)/* $(PACKAGE_BASE_DIR)/
	@chmod +x $(PACKAGE_BASE_DIR)/*.sh
	@cd $(PACKAGE_BASE_DIR); \
	./$(PACKAGE_INIT_FILE) $(PACKAGE_BASE_DIR) $(PACKAGE_TEMPLATE_BASE_DIR)
else
	@echo 
	@echo No package init file provided for application \"$(APPLICATION)\"
	@echo 
endif
else
	@echo 
	@echo ERROR: No package template directory provided for application \"$(APPLICATION)\"
	@echo 
	@exit 1
endif
else
	@echo 
	@echo No package to be initialized for application \"$(APPLICATION)\"
	@echo 
endif

updatepackage:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	updatepackage; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
ifneq ($(PACKAGE_BASE_DIR),)
ifneq ($(PACKAGE_UPDATE_FILE),)
	@$(MAKE) -f $(PACKAGE_UPDATE_FILE) MAKE_FILE=$(MAKE_FILE)
else
	@echo 
	@echo No package update file provided for application \"$(APPLICATION)\"
	@echo 
endif
else
	@echo 
	@echo No package to be updated for application \"$(APPLICATION)\"
	@echo 
endif

buildpackage:
ifneq ($(DEPENDENCE_DIRS),)
	@for dir in $(DEPENDENCE_DIRS); do \
		echo; \
		echo; \
		echo Accessing dependence directory \"$$dir\"...; \
		echo; \
		cd $$dir; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		$(MAKE) -f $(MAKE_FILE)	buildpackage; if [ ! $$? -eq 0 ]; then exit 1; fi; \
		cd $(APP_DEV_BASE_DIR); \
	done
endif
ifneq ($(PACKAGE_BASE_DIR),)
ifneq ($(PACKAGE_BUILD_FILE),)
ifneq ($(PACKAGE_BUILD_PROTO_FILE),)
	@cd $(PACKAGE_BASE_DIR); \
	./$(PACKAGE_BUILD_PROTO_FILE) $(PACKAGE_BASE_DIR); \
	./$(PACKAGE_BUILD_FILE) $(PACKAGE_BASE_DIR)
else
	@cd $(PACKAGE_BASE_DIR); \
	./$(PACKAGE_BUILD_FILE) $(PACKAGE_BASE_DIR)
endif
else
	@echo 
	@echo No package build file provided for application \"$(APPLICATION)\"
	@echo 
endif
else
	@echo 
	@echo No package to be produced for application \"$(APPLICATION)\"
	@echo 
endif

checkout:
	@chmod +x template/svn_checkout.sh
	@template/svn_checkout.sh


#######################################
# Internal target rules
#
# Target usable by external targets.
# Target that the user doesn't need to
# pass as parameter to the 'make' command
#######################################
.PHONY: destroy_dir destroy_share_dir destroy_install_dir check_integrate build_integrate_dir destroy_integrate_dir

destroy_dir: destroy_share_dir
	-rm -rf $(BLD_BASE_DIR)

destroy_share_dir:
	-rm -rf $(SHR_BASE_DIR)

destroy_install_dir:
	-rm -rf $(INS_BASE_DIR)

check_integrate:
	@if [ ! -r $(INT_INFO_FILE) ]; then \
		echo ; \
		echo ERROR: Environment already integrated for application \"$(APPLICATION)\"; \
		echo ; \
		exit 1; \
	fi

build_integrate_dir: $(INT_MAKE_BASE_DIR) $(INT_SRC_BASE_DIR)

destroy_integrate_dir:
	-rm -rf $(INT_MAKE_BASE_DIR)
	-rm -rf $(INT_SRC_BASE_DIR)

$(INT_MAKE_BASE_DIR) $(INT_SRC_BASE_DIR):
	mkdir -p $@
