namespace com.ti.oss.common.cdr.evalROP;

use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ti.oss.common.cdr.types::*;

<%
	my $parallelSGWSQM = 4;
	my $parallelSQM = 8;
	my $parallelSQMmod = 16;
	my $parallelSQMmodApn = 20;
%>


public composite MergerWaitGeneric (input stream<AggregateSqmSchema> generic;
							 output <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							stream<AggregateSqmSchema> OutMergerGeneric<%=$i%>
							<%if($i != $parallelSQMmod - 1) {
							print ",";
							}
							}%>
							)
{
	
	graph
		(<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<AggregateSqmSchema> OutMergerGeneric<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%>
		)
		 = Custom(generic as I)
		{
			logic state:
			{
				mutable int32 count = 0;
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
			} 
			
			onTuple I :
			{				
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == <%=$parallelSQM%>) 
					{
						<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
						submit(I,OutMergerGeneric<%=$i%>);
						<%}%>				
						count_endROP = 0;
					}
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == <%=$parallelSQM%>) 
						{
							<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							submit(I,OutMergerGeneric<%=$i%>);
							<%}%>	
							count_write_prev = 0;
						}
					}else{
						<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
						submit(I,OutMergerGeneric<%=$i%>);
						<%}%>
					}			
				}
				else
				{
					if (I.exclude_node != ""){
						uint32 modAddr = (uint32)I.exclude_node;
						I.exclude_node = "";
						submit(I, modAddr);
					}
				}
			}			
		}
}


public composite MergerWaitApn (input stream<AggregateSqmSchema> generic;
							 output <%for(my $i = 0; $i < $parallelSQMmodApn; $i++) {%>
							stream<AggregateSqmSchema> OutMergerGeneric<%=$i%>
							<%if($i != $parallelSQMmodApn - 1) {
							print ",";
							}
							}%>
							)
{
	
	graph
		(<%for(my $i = 0; $i < $parallelSQMmodApn; $i++) {%>
		stream<AggregateSqmSchema> OutMergerGeneric<%=$i%>
		<%if($i != $parallelSQMmodApn - 1) {
			print ";";
		}
		}%>
		)
		 = Custom(generic as I)
		{
			logic state:
			{
				mutable int32 count = 0;
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
			} 
			
			onTuple I :
			{				
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == 16) 
					{
						<%for(my $i = 0; $i < $parallelSQMmodApn; $i++) {%>
						submit(I,OutMergerGeneric<%=$i%>);
						<%}%>				
						count_endROP = 0;
					}
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == 16) 
						{
							<%for(my $i = 0; $i < $parallelSQMmodApn; $i++) {%>
							submit(I,OutMergerGeneric<%=$i%>);
							<%}%>	
							count_write_prev = 0;
						}
					}else{
						<%for(my $i = 0; $i < $parallelSQMmodApn; $i++) {%>
						submit(I,OutMergerGeneric<%=$i%>);
						<%}%>
					}			
				}
				else
				{
					if (I.exclude_node != ""){
						uint32 modAddr = (uint32)I.exclude_node;
						I.exclude_node = "";
						submit(I, modAddr);
					}
				}
			}			
		}
}



public composite MergerWaitUserLoc (input stream<AggregateSqmSchema> userloc;
							 output <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							stream<AggregateSqmSchema> OutMergerUserLoc<%=$i%>
							<%if($i != $parallelSQMmod - 1) {
							print ",";
							}
							}%>
							)
{
	
	graph
		(<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<AggregateSqmSchema> OutMergerUserLoc<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%>
		)
		 = Custom(userloc as I)
		{
			logic state:
			{
				mutable int32 count = 0;
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
			} 
			
			onTuple I :
			{				
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == <%=$parallelSQMmod%>) 
					{
						<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
						submit(I,OutMergerUserLoc<%=$i%>);
						<%}%>							
						count_endROP = 0;
					}
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == <%=$parallelSQMmod%>) 
						{
							<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							submit(I,OutMergerUserLoc<%=$i%>);
							<%}%>						
							count_write_prev = 0;
						}
					}else{
						<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
						submit(I,OutMergerUserLoc<%=$i%>);
						<%}%>
					}			
				}
				else
				{
					if (I.exclude_node != ""){
						uint32 modAddr = (uint32)I.exclude_node;
						I.exclude_node = "";
						submit(I, modAddr);
					}
				}
			}			
		}
}