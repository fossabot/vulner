namespace com.ti.oss.common.cdr.util;

use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.util.cfg::* ;

public composite MergerStatisticCounters (input stream<CDRCounters> In; output stream<tuple<rstring content>, tuple<rstring fileName>> Out)
{
	param
		expression<rstring> $mediationName;
		expression<int32> $parall;
	type
		Counters = tuple<rstring rop, uint64 cdrtotrattype, uint64 cdrtot, uint64 cdrexclude1, uint64 cdrexclude2, int32 count>;
	graph
		stream<tuple<rstring content>, tuple<rstring fileName>> Out = Custom(In as I)
		{
			logic state :
			{
				// Mediation parallelism degree
				int32 parall = $parall;
				
				// Data structure to store per-KPI statistics
				mutable map<rstring, Counters> kpiCounters;
				
				// State variable for the ROP. Used to keep track of the ROP changing event
				mutable rstring rop = "";
				
				// Mediation name from the compile time value
				rstring mediationName = $mediationName;
				
				// Output file path (events directory)
				mutable rstring path = getCfgParam("COMMON_CFG_DIR",mediationName,"EVENT_DIR");
				
				// Output file name
				mutable rstring fName = path + "/statistics_";
				
				// Empty Counters structure
				Counters emptyCounter = {};
			}
			onTuple I : 
			{
				// If ROP is defined and the ROP is changed, update the fName state variable
				if(I.ROP != "0-0" && I.ROP != rop)
				{
//					appTrc(Trace.error, "MergerStatistics: " + I.ROP);
					fName = regexReplacePerl(I.ROP,"/","-",true);	
					fName = regexReplacePerl(fName," ","_",true);
					fName = path + "/statistics_" + fName + ".csv";
					//HEADER
					mutable rstring content = "KPI,ROP, CDR INCLUSI NEL KPI, CDR ESCLUSI PER FILTRO, CDR ESCLUSI PER FUORI ROP";
					submit ({content = content, fileName = fName}, Out);
				}
				
				// Update the rop state variable if I.ROP is defined
				if(I.ROP != "0-0") 
				{
					rop = I.ROP;
				}
				
				if(!has(kpiCounters, I.kpi))
				{
					insertM(kpiCounters, I.kpi, emptyCounter);
				}
				
				// If the ROP is defined, update the value
				if(I.ROP != "0-0")
				{
					kpiCounters[I.kpi].rop = I.ROP;
				}
				// Count the tuples received for the current KPI 
				kpiCounters[I.kpi].count++;
					
				// Increase counters
				//kpiCounters[I.kpi].cdrtotrattype += I.cdrtotrattype;
				kpiCounters[I.kpi].cdrtot += I.cdrtot;
				kpiCounters[I.kpi].cdrexclude1 += I.cdrexclude1;
				kpiCounters[I.kpi].cdrexclude2 += I.cdrexclude2;
					
				// If the KPI count reached the paral degree, submit the tuple and restart the counters
				if(kpiCounters[I.kpi].count == parall && I.kpi!="BroadBandGgsnApn" && I.kpi!="BroadBandPgwApn" && I.kpi!="MvnoSgw")
				{
					mutable rstring content = I.kpi + "," + kpiCounters[I.kpi].rop + "," + (rstring)kpiCounters[I.kpi].cdrtot + "," + (rstring)kpiCounters[I.kpi].cdrexclude1 + "," + (rstring)kpiCounters[I.kpi].cdrexclude2; 
					submit ({content = content, fileName = fName}, Out);
//					submit({
//								kpi = I.kpi, 
//								ROP = kpiCounters[I.kpi].rop, 
//								cdrtotrattype = kpiCounters[I.kpi].cdrtotrattype,
//								cdrtot = kpiCounters[I.kpi].cdrtot, 
//								cdrexclude1 = kpiCounters[I.kpi].cdrexclude1, 
//								cdrexclude2 = kpiCounters[I.kpi].cdrexclude2,
//								fileName = fName
//							}, 
//							Out);
//						
					kpiCounters[I.kpi].count = 0;
					kpiCounters[I.kpi].cdrtot = 0ul;
					kpiCounters[I.kpi].cdrexclude1 = 0ul;
					kpiCounters[I.kpi].cdrexclude2 = 0ul;
				}
				else if(kpiCounters[I.kpi].count == 20 && (I.kpi=="BroadBandGgsnApn" || I.kpi=="BroadBandPgwApn"))
				{
					mutable rstring content = I.kpi + "," + kpiCounters[I.kpi].rop + "," + (rstring)kpiCounters[I.kpi].cdrtot + "," + (rstring)kpiCounters[I.kpi].cdrexclude1 + "," + (rstring)kpiCounters[I.kpi].cdrexclude2; 
					submit ({content = content, fileName = fName}, Out);
						
					kpiCounters[I.kpi].count = 0;
					kpiCounters[I.kpi].cdrtot = 0ul;
					kpiCounters[I.kpi].cdrexclude1 = 0ul;
					kpiCounters[I.kpi].cdrexclude2 = 0ul;
				}	
				else if(kpiCounters[I.kpi].count == 2 && I.kpi=="MvnoSgw")
				{
					mutable rstring content = I.kpi + "," + kpiCounters[I.kpi].rop + "," + (rstring)kpiCounters[I.kpi].cdrtot + "," + (rstring)kpiCounters[I.kpi].cdrexclude1 + "," + (rstring)kpiCounters[I.kpi].cdrexclude2; 
					submit ({content = content, fileName = fName}, Out);
						
					kpiCounters[I.kpi].count = 0;
					kpiCounters[I.kpi].cdrtot = 0ul;
					kpiCounters[I.kpi].cdrexclude1 = 0ul;
					kpiCounters[I.kpi].cdrexclude2 = 0ul;
				}
			}
		
		}
}