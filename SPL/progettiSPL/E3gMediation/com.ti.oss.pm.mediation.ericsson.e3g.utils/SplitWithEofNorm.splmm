namespace com.ti.oss.pm.mediation.ericsson.e3g.utils;

use com.ti.oss.common.types::* ;
//use com.ti.oss.common.pm.parser::*;

<%
	use Cwd;
	
	my $paralNormLe;
	my $paralEnrich;
	my $paralArNormLe;
	
	my $cfgFile = cwd($0) . "/perl_params.cfg";
	open my $cfgFh, "<", $cfgFile or die "Could not open the input file: " . $cfgFile;
	
	while(my $line = <$cfgFh>) {
		my @ar = split("=", $line);
		if($ar[0] =~ "paralArNormLe") {
			$paralArNormLe = $ar[1];
		}
		elsif($ar[0] =~ "paralNormLe") {
			$paralNormLe = $ar[1];
		}
		elsif($ar[0] =~ "paralEnrich") {
			$paralEnrich = $ar[1];
		}
	}
	close $cfgFh;
%>

public composite SplitWithEofNorm(input In0; output 
<%for(my $i = 0; $i < $paralNormLe; $i++){%>
	Out<%=$i%>
	<%if($i < $paralNormLe - 1){print ",";}%>
<%}%>
)
{
	graph
		(
       	<%for(my $i = 0; $i < $paralNormLe; $i++) {%>
       	
       		stream<MeasHeader mHeader, MeasData mData, boolean eof> Out<%=$i%>
       		<%if($i < $paralNormLe - 1) {print ";";}%>
       	<%}%>
       ) as SplitWithEof = Custom(In0 as I)
       {
       		logic state :
       		{
       			mutable uint32 portIdx = 0u;
       		} 
       		
       		onTuple I :
       		{
       			if(I.eof)
       			{
       				<%for(my $i = 0; $i < $paralNormLe; $i++) {%>
       					submit(I, Out<%=$i%>);
       				<%}%>
       				appTrc(Trace.trace, "SplitWithEofNorm: submitting eof for file " + I.mHeader.fileHeader.fName);
       			}
       			else
       			{
       				submit(I, portIdx);
       				portIdx++;
       				if(portIdx == (uint32)<%=$paralNormLe%>) portIdx = 0u;
       			}
       		}
       
       }
}