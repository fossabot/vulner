namespace com.ti.oss.pm.mediation.ericsson.e3g.utils ;

/*
 * Import ext namespaces
 */
use com.ibm.streamsx.file::* ;

/*
 * Import local namespaces
 */
use com.ti.oss.common.event::* ;
//use com.ti.oss.common.pm.parser::* ;

/** 
 * This operator normalizes a stream of OMeS blocks by transforming
 * counters with multiple values (csv values with ',' separator) in array.
 * It uses a dimension "Index" for the array elements.
 */

/*
  * The following block 
  * <mi>
  * <mts>20130624143000Z</mts>
  * <gp>900</gp>
  * <mt>C1</mt>
  * <mt>C2</mt>
  * <mt>C3</mt>
  * <mv>
  * <moid>ManagedElement=1,Equipment=1,Subrack=ES-4,Slot=27,PlugInUnit=1,ExchangeTerminal=1,Os155SpiTtp=pp2</moid>
  * <r>1</r>
  * <r>2,3</r>
  * <r>4,5,6</r>
  * </mv>
  * </mi>
  * 
  * has to be transformed in
  * 
  * Index=1 ==> <C1=1, C2=2, C3=4>
  * Index=2 ==> <C2=3, C3=5>
  * Index=3 ==> <C3=6>
  * 
  */
public composite NormalizerWithEof(input stream<MeasHeader mHeader, MeasData mData, boolean eof>
	InMd ; output OutMd, OutEvent)
{
	param
		expression<boolean> $keepEmptyValues : true;
		
	type

	/* Local data structures		
		*/
		static Counter = tuple<rstring cName, list<rstring> cValues> ;
		static MtTable = map<rstring, list<Counter>> ;
		static MeasTypeTmp = tuple<rstring msTypeName, map<rstring, rstring> cTable, map<rstring, list<rstring>> cTableList>;
		static MeasDataTmp = tuple<rstring fdn, list<Dimension> dimensions, map<rstring, MeasTypeTmp> measTypes> ;
	
	graph
	
		stream<MeasHeader mHeader, MeasDataTmp mData, int32 maxSz, boolean eof> evalMaxCtableSize = Custom(InMd as I)
		{
			logic
				state :
				{
					mutable boolean keepEmptyValues = $keepEmptyValues;
					mutable MeasHeader cMeasHeader ;
					//mutable MeasDataTmp cMeasDataTmp;
					//mutable MeasTypeTmp cMeasTypeTmp;
					MeasDataTmp emptyMeasData = {};
				}

				// GAS: Performance improving
				//   Instead to store the OutMd into state, modify the inMd by swapping
				//   the counters list.
				onTuple InMd :
				{
					if(InMd.eof)
					{
						
						submit({mHeader = InMd.mHeader, mData = emptyMeasData, maxSz = 0, eof = true}, evalMaxCtableSize);
						// Send punctuation
						submit(Sys.WindowMarker, evalMaxCtableSize) ;

						// Debug traces
						appTrc(Trace.info, "Normalizer - file \"" + cMeasHeader.fileHeader.fName +
							"\" has been normalized.") ;
					}
					else 
					{
	
						// 1. Set the header for each new file 
						if(mHeader.fileHeader.fName != cMeasHeader.fileHeader.fName)
						{
							swap(cMeasHeader, mHeader) ;
							appTrc(Trace.info, "Normalizer - processing file \"" +
								cMeasHeader.fileHeader.fName + "\"...") ;
						}
					     
						// 2. Make MtTable and get the max array counter size
						mutable int32 maxSize = 0 ;
						
						mutable MeasDataTmp cMeasDataTmp = {};
						
						cMeasDataTmp.fdn = InMd.mData.fdn;
						//appTrc(Trace.error, "Normalizer - cMeasDataTmp.fdn: " + cMeasDataTmp.fdn);
						cMeasDataTmp.dimensions = InMd.mData.dimensions;	
						//clearM(cMeasDataTmp.measTypes);				
	
						for(rstring i in mData.measTypes)
						{
							mutable MeasTypeTmp cMeasTypeTmp = {};
							//appTrc(Trace.error, "Normalizer - cMeasDataTmp.fdn1: " + cMeasDataTmp.fdn);
							cMeasTypeTmp.msTypeName = mData.measTypes[i].msTypeName;
							cMeasTypeTmp.cTable = mData.measTypes[i].cTable;
	
							for(rstring j in cMeasTypeTmp.cTable)
							{
							
							//appTrc(Trace.error, "Normalizer - cMeasDataTmp.fdn2: " + cMeasDataTmp.fdn);
							//Daniela Aracri	
							//list<rstring> cValList = tokenize (mt.cTable[j], ",", false);
							//20170613 - DANIELA ARACRI - replace " " con "" . 
							//anomalia che invia i valori dei contatori a blank.
							
								cMeasTypeTmp.cTableList[j] = tokenize(regexReplace(cMeasTypeTmp.cTable [ j ], " ", "", true ), ",", keepEmptyValues) ;
								int32 sz = size(cMeasTypeTmp.cTableList[j]) ;
								if(maxSize < sz) maxSize = sz ;
							}
							insertM(cMeasDataTmp.measTypes, i, cMeasTypeTmp);
							//appTrc(Trace.error, "Normalizer - cMeasDataTmp.fdn3: " + cMeasDataTmp.fdn);							insertM(cMeasDataTmp.measTypes, i, cMeasTypeTmp);
							//appTrc(Trace.error, "Normalizer - cMeasDataTmp.fdn3: " + cMeasDataTmp.fdn);
							
	
						}
						//appTrc(Trace.error, "Normalizer - cMeasDataTmp.fdn4: " + cMeasDataTmp.fdn);
						//appTrc(Trace.error, "Normalizer - CMEASTYPE: " + (rstring)cMeasDataTmp.measTypes);
						submit({ mHeader = cMeasHeader, mData = cMeasDataTmp, maxSz = maxSize , eof = InMd.eof }, evalMaxCtableSize) ;
					}

				}
				config
					threadedPort: queue(InMd, Sys.Wait, 100000);
			}
			
		/*() as TestSink = FileSink(evalMaxCtableSize as I)
		{
			param
				file : "outputTest.out";
				flush : 1u;
				format : txt;
		}*/
	
	
		(stream<MeasHeader mHeader, MeasData mData, boolean eof> OutMd ; stream<Event e> OutEvent)
			as NormalizedMeasBlock = Custom(evalMaxCtableSize as InMd)
		{
			logic
				state :
				{
					mutable MeasHeader cMeasHeader ;
					//mutable MeasData cMeasData;
					
					mutable MeasTypeTmp cMeasTypeTmp;
					mutable MeasType cMeasType; 
					mutable list<rstring> countersList;
					
					mutable MeasData emptyMeasData = {};
					//mutable timestamp t1 = getTimestamp();
					//mutable timestamp t2 = getTimestamp();
					
					mutable list<rstring> idxToRemove;
				}

				// GAS: Performance improving
				//   Instead to store the OutMd into state, modify the inMd by swapping
				//   the counters list.
				onTuple InMd :
				{
					if(InMd.eof)
					{
						
						// Submit event tuple
						mutable Event event = { } ;
						event.eventType = 160 ;
						event.resultCode = 0 ;
						event.rawFile = filename(cMeasHeader.fileHeader.fName) ;
						event.eventCorrelationId = cMeasHeader.fileHeader.eventCorrelationId ;
						event.rop = cMeasHeader.fileHeader.rop ;
						event.emId = cMeasHeader.fileHeader.emId ;
						event.neId = cMeasHeader.fileHeader.neId ;
						event.eventText = "The raw file has been normalized" ;
						boolean eventEnabled = mkEvent(event,
							cMeasHeader.fileHeader.sessionBeginTime) ;
						if(eventEnabled) submit({ e = event }, OutEvent) ;

						submit({mHeader = InMd.mHeader, mData = emptyMeasData, eof = true}, OutMd);
						// Send punctuation
						submit(Sys.WindowMarker, OutMd) ;

						// Debug traces
						appTrc(Trace.info, "NormalizerWithEof - file \"" + cMeasHeader.fileHeader.fName +
							"\" has been normalized.") ;
					}
					else
					{
	
						// 1. Set the header for each new file 
						if(mHeader.fileHeader.fName != cMeasHeader.fileHeader.fName)
						{
							swap(cMeasHeader, mHeader) ;
							appTrc(Trace.info, "Normalizer - processing file \"" +
								cMeasHeader.fileHeader.fName + "\"...") ;
						}
					   
						// 3. Scan the MtTable and submit the tuples for each array element 
						mutable int32 i = 0 ;	
						
						//appTrc(Trace.error, "NORMALIZER0: " + (rstring)InMd.maxSz + ". File: " + cMeasHeader.fileHeader.fName);
						//t1 = getTimestamp();
						while(i < InMd.maxSz)
						{
							mutable MeasData cMeasData = {};
							cMeasData.fdn = mData.fdn ;
							
							for(rstring k in mData.measTypes)
							{
								
								//mutable MeasTypeTmp cMeasTypeTmp = {};
								mutable MeasType cMeasType = {}; 
								cMeasType.msTypeName = mData.measTypes[k].msTypeName ;
								
								for(rstring j in mData.measTypes[k].cTableList)
								{
									int32 sz = size(mData.measTypes[k].cTableList[j]) ;
									if(i < sz && mData.measTypes[k].cTableList[j][i] != "")
									{
										insertM(cMeasType.cTable, j, mData.measTypes[k].cTableList[j][i]) ;
									}
									else if(i >= sz)
									{
										/**TODO: not safe, flag as to remove */
										//removeM(mData.measTypes[k].cTableList, j);
										appendM(idxToRemove, j);
									}
									//cnt++;
									//counter++;
	
								}
								for(rstring j in idxToRemove)
								{
									removeM(mData.measTypes[k].cTableList, j);
								}
								clearM(idxToRemove);
								
								 
								// Add the oMt
								insertM(cMeasData.measTypes, k, cMeasType) ;
							} // Scan mData.measTypes
	
							// After the loop the mt for Index-i is ready to be submitted
	
							// Make the dimension for array Index-i and add it to oMd
							Dimension dim = {name="Index", value="Index-" + (rstring)(i+1) };                                                 
							appendM(cMeasData.dimensions, dim);
	
							//appTrc(Trace.error, "Normalizer - cMeasData.fdn4: " + cMeasData.fdn);
							// Debug
							appTrc(Trace.trace, "Normalizer - submitting tuple \"" +(rstring) cMeasData +
								"\"...") ;
							//appTrc(Trace.error, "NORM - SUBMIT");

							submit({ mHeader = cMeasHeader, mData = cMeasData, eof = InMd.eof }, OutMd) ;
							i ++ ;
						}
						//t2 = getTimestamp();
						//appTrc(Trace.error, "FILE: " + cMeasHeader.fileHeader.fName + " . TIMESTAMP DIFF: " + (rstring)diffAsSecs(t2, t1) + " . COUNTER: " + (rstring)counter);
					}

				}
				config
				threadedPort: queue(InMd, Sys.Wait, 100000);

			}
			
			
			/*() as TestSinkNorm = FileSink(OutMd as I)
			{
				param
					file : "normOutputTest.out";
					flush : 1u;
					format : txt;
			}*/
			

	}





       