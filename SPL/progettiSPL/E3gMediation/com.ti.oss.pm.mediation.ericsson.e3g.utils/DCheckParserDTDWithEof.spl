namespace com.ti.oss.pm.mediation.ericsson.e3g.utils;

/*
 * Import ext namespaces
 */
use com.ibm.streamsx.file::*;

/*
 * Import local namespaces
 */
use com.ti.oss.common.types::*;
use com.ti.oss.common.event::*;
//use com.ti.oss.common.pm.parser::*;
use com.ti.oss.common.util.cfg::*;



/** 
 * The Duplicates Check Parser (DCheckParser) operator is in charge to parse the 3GPP XML DTD files and
 * check for duplicated moids (potential duplicates) during the parsing operation.
 */ 
public composite DCheckParserDTDWithEof(input OFReaderDTD; output ORawData, OEvent)
{
	param
		expression <rstring> $mediationId;
        expression <rstring> $commonEnv : "COMMON_CFG_DIR";
        expression <rstring> $eventsListCfgParam : "EVENT_TYPE_LIST";

    type 
       FReaderT = FileHeader, tuple<blob rawBlock>;
       MParserT = FileHeader, tuple<rstring moid>;
       DHandlerT = FileHeader, tuple<map<rstring, int32> dTable>;
       
       // Parser data structures
       XmlRawHeader = FileHeader fHeader, rstring fName, rstring vName, rstring sName, rstring sType, rstring cbt ;
       XmlRawMvBlock = rstring moid, list<rstring> r ;
       XmlRawMiBlock = rstring mts, rstring gp, list<rstring> mt, list<XmlRawMvBlock> mv ;

	graph

		(stream<XmlRawHeader> Header ; stream<rstring networkElementDN>	NetworkElementDN ; stream<XmlRawMiBlock> MiBlock) = XMLParse(OFReaderDTD as I)
		{
			param
				trigger : "/mdc/mfh", "/mdc/md/neid/nedn", "/mdc/md/mi" ;
				parsing : permissive ;
				xmlInput : rawBlock ;
				
			output
			
				Header : fHeader = {eventCorrelationId = I.eventCorrelationId,
				                    sessionBeginTime = I.sessionBeginTime,
				                    fName = I.fName,
				                    rop = I.rop,
				                    emId = I.emId,
				                    neId = I.neId
				                    }, 
				         vName = XPath("vn/text()"), 
				         sName = XPath("sn/text()"), 
				         sType = XPath("st/text()"), 
				         cbt = XPath("cbt/text()") ;
				         
				NetworkElementDN : networkElementDN = XPath("text()") ;
				MiBlock : mts = XPath("mts/text()"), gp = XPath("gp/text()"), mt =
					XPathList("mt/text()"), mv = XPathList("mv", { moid =
					XPath("moid/text()"), r = XPathList("r/text()") }) ;
		
			config
			threadedPort: queue(I, Sys.Wait, 10000);

		}
		
/* 
		(stream<XmlRawHeader> EofHeader;stream<rstring networkElementDN> EofNetworkElementDN;stream<XmlRawMiBlock, tuple<rstring fName, boolean eof>> EofMiBlock)= 
		Custom(Header as I1; NetworkElementDN as I2; MiBlock as I3) 
		{
       		logic state : 
       		{
       			mutable EofMiBlock eofTuple = {};
       			mutable boolean fileIsChanged = true;
       			mutable rstring fName;
       			
       		}
       		onTuple I1 :
       		{
       			if(fileIsChanged) 
       			{
       				eofTuple.fName = I1.fHeader.fName;
       				fileIsChanged = false;
       			}
       			submit(I1, EofHeader);
       		}
       		onTuple I2 :
       		{
       			submit(I2, EofNetworkElementDN);
       		}
       		onTuple I3 :
       		{
       			submit({mts = I3.mts, gp = I3.gp, mt = I3.mt, mv = I3.mv, fName = eofTuple.fName, eof = false}, EofMiBlock);
       		}
       		onPunct I3 : 
       		{
       			eofTuple.eof = true;
       			submit(eofTuple, EofMiBlock);
       			fileIsChanged = true;
       			
       			if(currentPunct() == Sys.WindowMarker) {
       				submit(Sys.WindowMarker, EofMiBlock);
       			}
       		}
       }

*/
	
		(stream<RawDataHeader rHeader, RawDataBlock rBblock> ORawData; stream<Event e> ParserEvent) as EDtdParser 
		= Custom(Header; NetworkElementDN; MiBlock)
	
		{
			logic
				state :
				{
                    
                    // Data structure for the output
				    mutable ORawData oRawData = {};
				    				    
					// Event table loaded from configuration
                    mutable map<int32, boolean> eventTable = getEventTable($commonEnv, $mediationId, $eventsListCfgParam);
                    

				}
                
				onTuple Header :
				{
                    // Copy the input header into output header
                    oRawData.rHeader.fileHeader.fName = fHeader.fName;
                    oRawData.rHeader.vName = vName ;
					oRawData.rHeader.sName = sName ;
					oRawData.rHeader.sType = sType ;
					oRawData.rHeader.cbt = cbt ;
					oRawData.rHeader.fileHeader.eventCorrelationId=fHeader.eventCorrelationId;
					oRawData.rHeader.fileHeader.sessionBeginTime =fHeader.sessionBeginTime;
					                    
					// Debug traces 
					appTrc(Trace.info, "EDtdParser - parsing new file with header <eventCorrelationId=" + oRawData.rHeader.fileHeader.eventCorrelationId + 
					                    ", fName=\"" + oRawData.rHeader.fileHeader.fName + "\", vName=" + vName + ", sName=" + sName + ", sType=" + sType + 
					                    ", cbt=" + cbt + ">") ;
				}

				onTuple NetworkElementDN :
				{
                    //RawDataBlock = tuple<rstring neDn, rstring measInfoId, rstring gp, rstring moid, map<rstring, rstring> cTable>
					oRawData.rBblock.neDn = networkElementDN ;

					// Debug traces
					appTrc(Trace.trace, "EDtdParser - parsed neDn " + networkElementDN) ;
				}

				onTuple MiBlock :
				{
                    appTrc(Trace.trace, "EDtdParser - processing <mi> block neDn=\"" + oRawData.rBblock.neDn + "\"...");
					oRawData.rBblock.measInfoId = "" ;
						oRawData.rBblock.mts = mts ;
						oRawData.rBblock.gp = gp ;
	                    int32 mtSize = size(mt);
	                    
						// Now fill the cTable
						mutable RawCounterTableEntry entry = {};    
						for(int32 i in range(mv))
						{
						    // Makes the block i <moid, cTable> 
							oRawData.rBblock.moid = mv [ i ].moid ;
								
	                        // Check if the block mv is valid, meaning the number of cValues (<r></r>) is equal to the
	                        // number of CNames (<mt></mt>.
	                        if(size(mv [ i ].r) == mtSize) {

							   // Debug traces
	                           appTrc(Trace.trace, "EDtdParser - processing block having moid=\"" + oRawData.rBblock.moid + "\"...") ;
	                           mutable boolean validCounter = true;
	                           for(int32 j in range(mt))
	                           {                           
	                               entry.cName = mt [ j ];
	                               if(length(mv [ i ].r [ j ]) > 0)  {
	                                  entry.cValue = trim(mv [ i ].r [ j ], " ");
	                                  
	                                  // Check if cValue contains a valid value
	                                  if(findFirst(entry.cValue, ",", 0) < 0) {
	                                     // Its a scalar so I check if a valid number
	                                     mutable float64 x = 0.0;
	                                     if( parseNumber(x, entry.cValue) < 0 ) 
	                                       validCounter = false;
	                                  }                                     
								   } else {
	                                  //appTrc(Trace.trace, "EDtdParser - setting empty counter \"" + mt [ j ] + "\" to NIL...") ;
	                                  entry.cValue = "NIL";
								   }
								   
								   if(validCounter)
								     appendM(oRawData.rBblock.cTable, entry);
								     
								   validCounter = true;  
							   }
	
	                           // Submit the rowDataBlock
	                           submit(oRawData, ORawData); 
	                                   
	                           // Create the list of counters
	                           clearM(oRawData.rBblock.cTable) ;
	                        } else {
	                           
	                           appLog(Log.warn, "EDtdParser - Discarding malformed block with moid=\"" + oRawData.rBblock.moid + "\"..." );
	                           
							   // Submit the error event
	                           mutable Event event = {};		
	                           event.eventType = 130;
	                           event.resultCode = 5;
	                           event.rawFile = filename(oRawData.rHeader.fileHeader.fName);
	                           event.eventCorrelationId = oRawData.rHeader.fileHeader.eventCorrelationId;
	                           event.rop = oRawData.rHeader.fileHeader.rop;
	                           event.emId = oRawData.rHeader.fileHeader.emId;
	                           event.neId = oRawData.rHeader.fileHeader.neId;
	                           event.eventText = "Discarded malformed block with moid " + oRawData.rBblock.moid;
	                           mkEvent( event, oRawData.rHeader.fileHeader.sessionBeginTime);
	                           submit ({e=event}, ParserEvent);
	                        } 
	                        
						} //EndFor
					

					
				}
				
				onPunct MiBlock:
				{
					// Submit event tuple
						mutable Event event = {};		
             	        event.eventType = 130;
                        event.resultCode = 0;
                        event.rawFile = filename(oRawData.rHeader.fileHeader.fName);
                        event.eventCorrelationId = oRawData.rHeader.fileHeader.eventCorrelationId;
                        event.rop = oRawData.rHeader.fileHeader.rop;
                        event.emId = oRawData.rHeader.fileHeader.emId;
                        event.neId = oRawData.rHeader.fileHeader.neId;
                        event.eventText = "The raw file has been parsed";
                        boolean eventEnabled = mkEvent( event, oRawData.rHeader.fileHeader.sessionBeginTime, eventTable );
                        
                        if(eventEnabled) submit ({e=event}, ParserEvent);
						
						// Send punctuation
						submit(Sys.WindowMarker, ORawData) ;

						// Clear local objects
						clearM(oRawData.rBblock.cTable) ;

                        
                        // clear the state
					    oRawData.rHeader.fileHeader.eventCorrelationId = "";
					    oRawData.rHeader.fileHeader.sessionBeginTime=(uint64)0;
					    oRawData.rHeader.fileHeader.fName = "";
					    oRawData.rHeader.fileHeader.rop = "";
					    oRawData.rHeader.fileHeader.emId = "";
					    oRawData.rHeader.fileHeader.neId = "";    
					
				
				}
				

		} 
		
		
		/**
		 * Event Aggregator operator
		 */
		(stream<Event e> OEvent) as EDxmlParserMerger = Custom(ParserEvent as E)
        {
           logic
                          
           onTuple E :
            {
               submit(E, OEvent);
            }           
        }
		
}

