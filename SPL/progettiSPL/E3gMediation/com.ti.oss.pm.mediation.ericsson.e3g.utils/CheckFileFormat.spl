namespace com.ti.oss.pm.mediation.ericsson.e3g.utils ;

/*
 * Import ext namespaces
 */
use com.ibm.streamsx.file::* ;

/*
 * Import local namespaces
 */
use com.ti.oss.common.types::* ;
use com.ti.oss.common.event::* ;
//use com.ti.oss.common.pm.parser::*;
use com.ti.oss.common.util.cfg::* ;

/** 
 * The Duplicates Check Parser (DCheckParser) operator is in charge to parse the 3GPP XML DTD files and
 * check for duplicated moids (potential duplicates) during the parsing operation.
 */
public composite CheckFileFormat(input InFile ;
 								 output OFReaderDTD,OFReaderXMLSchema,PolledEvent)
{
	param
		expression<rstring> $mediationId ;
		expression<rstring> $commonEnv : "COMMON_CFG_DIR" ;
		expression<rstring> $eventsListCfgParam : "EVENT_TYPE_LIST" ;
	type
		FReaderT = FileHeader, tuple<blob rawBlock> ;
		
		
	graph

	/**
        * The FReader operator is in charge to read the file at blocks.
         */
		//(stream<FReaderT> OFReader ; stream<rstring fName, int32 e> OEoF) as
		(stream<FReaderT> OFReader ) as
			FReader = FileSource(InFile)
		{
			logic
				state :
				{
					mutable Event event = { } ;
				}

				onTuple InFile :
				{
				// Debug traces
					appTrc(Trace.trace, "FReader - file " + fName +	", polled ...") ;

				}

			param

			/*
                 * The file is read at blocks.
                 */
				format : block ;

				/*
				 * The block size (4k)
				 */
				blockSize : 8192u ;

				/*
				 * The input file is assumed to be formatted correctly, and no runtime checks are performed.
				 */
				parsing : fast ;

				/*
				 * If the input file cannot be opened, the FileSource operator logs an error 
				 * and proceeds with the next input file.
				 */
				ignoreOpenErrors : true ;

				/*
				 * Path of the RAW Archive Directory, it should be configurable.
				 */
				//moveFileToDirectory: <Path of the RAW Archive Directory>; 

				/*
				 * To hanlde file gzipped. It should be configurable.
				 */
				//compression: gzip;

			output
				OFReader : fName = FileName(), eventCorrelationId =
					event.eventCorrelationId, sessionBeginTime = event.eventTime, rop = "",
					emId = "", neId = "" ;
			config
				threadedPort : queue(InFile, Sys.Wait, 1000) ;
		} // End FReader Operator
		
		
		
		(stream<FReaderT> OFReaderDTD ; stream<FReaderT> OFReaderXMLSchema; stream<Event e> PolledEvent)
		 as ControlFormat = Custom(OFReader as I )
		{
			logic
				state :
				{
					mutable rstring flgFileFormat = "" ;
					mutable rstring rawFile = "" ;
					mutable list<rstring> matchResults=[];
					
					
				}

				onTuple OFReader :
				{
					//Controlli sul tipo di formato ad ogni nuovo file
									
					
					//appTrc(Trace.info, "Inizio Lettura: " +convertFromBlob(rawBlock)) ;
					
					
					if(filename(fName) != rawFile)
					{
												
						rawFile=filename(fName);
						
						appTrc(Trace.info, "rawFile " + rawFile) ;
						
						flgFileFormat = "" ;
						
						//conversione del buffer in blob a string
						mutable rstring convertedBlob=convertFromBlob(rawBlock);
						
						//Ricerca nei primi 4096 byte del tag mdc --> formato file di tipo DTD						
						matchResults=regexMatchPerl(convertedBlob,'<mdc');
						
						if(size(matchResults)==1)
						{
							flgFileFormat="DTD";
						}
							//nel caso il risultato della ricerca sia negativo
						else  
						{
							//Ricerco nei primi 4096 byte del tag measCollecFile --> formato file di tipo "Schema
							matchResults=regexMatchPerl(convertedBlob,'<measCollecFile');
							
							if(size(matchResults)==1)
							{
								flgFileFormat="Schema";
							}else //Se il file non rispecchia le due tipologia genero un errore (TODO Alarm o Event)
							{
								appTrc(Trace.error, "CheckFileFormat : Unknown format type for file : " + filename(fName)) ;
							}	
						}
							appTrc(Trace.info, "CheckFileFormat - FileName: "+ filename(fName) +" flgFileFormat: " +flgFileFormat) ;
						}
						
						
						
						if (flgFileFormat=="DTD")
						{
                       		//appTrc(Trace.info, "Buffer DTD: " +convertFromBlob(rawBlock)) ;
                       		
                       		// Submit the duplicates table
                       		submit(OFReader, OFReaderDTD) ;
                       		
						}else if (flgFileFormat=="Schema"){
							
							//appTrc(Trace.info, "Buffer Schema: " +convertFromBlob(rawBlock)) ;
							submit(OFReader, OFReaderXMLSchema) ;
						}						
						
					

				}
				
				onPunct OFReader :
				{
					// Generate the file polled event
					mutable Event event = {};	
					event.eventType = 110 ;
					event.resultCode = 0 ;
					event.rawFile = rawFile ;
					event.eventText = "File polled" ;
					mkEvent(event) ;				
					                    
                    submit ({e=event}, PolledEvent);
						
						// Send punctuation
						//submit(Sys.WindowMarker, ORawData) ;
						
						if (flgFileFormat=="DTD")
						{
                       		//appTrc(Trace.info, "Buffer DTD: " +convertFromBlob(rawBlock)) ;
                       		
                       		// Submit the duplicates table
                       		submit(Sys.WindowMarker, OFReaderDTD) ;
                       		
						}else if (flgFileFormat=="Schema"){
							
							//appTrc(Trace.info, "Buffer Schema: " +convertFromBlob(rawBlock)) ;
							submit(Sys.WindowMarker, OFReaderXMLSchema) ;
						}						
												
				}
				
				

		}
	}
