namespace com.ti.oss.pm.mediation.ericsson.e3g.utils;

/*
 * Import ext namespaces
 */
use com.ibm.streamsx.file::*;

use com.ti.oss.common.pm.util::* ;
use com.ti.oss.common.event::*;
//use com.ti.oss.common.pm.parser::*;
use com.ti.oss.common.util.cfg::*;

public composite ETransformer(input stream<RawDataHeader rHeader, ERawDataBlock rBblock> IRawData ; output OMeasDataBlock, OEvent)
{
	param
		expression <rstring> $dnPrefix;
		expression <rstring> $mtPrefix : "";		
		expression <rstring> $cPrefix : "";		
		expression <rstring> $mediationId;
        expression <rstring> $commonEnv : "COMMON_CFG_DIR";
        expression <rstring> $eventsListCfgParam : "EVENT_TYPE_LIST";
		
    
	graph
		(stream<MeasHeader mHeader, EMeasData mData> OMeasDataBlock; stream<Event e> OEvent) = Custom(IRawData as I)
		{
            logic
                state :
                {
				    // Local objects
				    mutable OMeasDataBlock cMdBlock = {} ;
				    mutable map<int32, boolean> eventTable = getEventTable($commonEnv, $mediationId, $eventsListCfgParam);				    
                }
                
                onTuple IRawData :
				{
				    // Create the header only for the first tuple of the file
				    if(rHeader.fileHeader.fName != cMdBlock.mHeader.fileHeader.fName) {
                       
                       swap(rHeader.fileHeader, cMdBlock.mHeader.fileHeader);                       
                       
                       // GAS (2014-04-22): I put the MTS as is with the Z at the end to indicate UTC 
                       // cMdBlock.mHeader.endTime = rBblock.mts;
                       // GAS (2014-05-28): set the endTime as OMeS timestamp
                       cMdBlock.mHeader.endTime = getOMeSTimeStamp(rBblock.mts);
                       
                       
                       // GAS (2014-04-16): to fix the problem with the OMeS timestamp
                       cMdBlock.mHeader.startTime = getOMeSTimeStamp(rHeader.cbt);
                       //cMdBlock.mHeader.startTime = getOMeSTimeStamp(rHeader.cbt, rHeader.fileHeader.fName);

                       cMdBlock.mHeader.interval = getOMeSInterval(rBblock.gp, rHeader.fileHeader.fName);
                       
						// Debug traces
						appTrc(Trace.info, "ETransformer - got new file \"" + cMdBlock.mHeader.fileHeader.fName + "\" to transform.") ;  			    
				    }
				    
				    // Clear the cached mdBlock
					for (rstring k in cMdBlock.mData.measTypes) {
					  clearM(cMdBlock.mData.measTypes[k].cTable);
					}
					clearM(cMdBlock.mData.measTypes);
				      
                    // Set the RDN
                    cMdBlock.mData.fdn = ( length( $dnPrefix ) > 0 ) ? $dnPrefix + "/" + getRDN(rBblock.neDn, rBblock.moid) 
                                                                     : getRDN(rBblock.neDn, rBblock.moid);
					
					// In the standard 3GPP format there are no dimensions
			
					// GAS: for E/// 3G I assume only one MeasType					
					mutable MeasType mt = {};
					mt.msTypeName = (length($mtPrefix) > 0) ? $mtPrefix + getMeasTypeName(cMdBlock.mData.fdn)
					                                        : getMeasTypeName(cMdBlock.mData.fdn); 
					for(int32 i in range(rBblock.cTable))
					{
                       // 
                       RawCounterTableEntry entry = rBblock.cTable[i];
                       if(length($cPrefix)>0) {
                         insertM(mt.cTable, $cPrefix + entry.cName, entry.cValue);
                       } else {
                         insertM(mt.cTable, entry.cName, entry.cValue);
                       }
					}
					
					// Add the mt object to the list of measTypes
					insertM (cMdBlock.mData.measTypes, mt.msTypeName, mt);
					
					// Submit the measBlock 
					cMdBlock.mData.duplicate = IRawData.rBblock.duplicate;
					submit(cMdBlock, OMeasDataBlock) ; 
				}
	
                onPunct IRawData :
				{
					if(currentPunct() == Sys.WindowMarker)
					{
						// Submit event tuple
						mutable Event event = {};		
             	        event.eventType = 140;
                        event.resultCode = 0;
                        event.rawFile = filename(cMdBlock.mHeader.fileHeader.fName);
                        event.eventCorrelationId = cMdBlock.mHeader.fileHeader.eventCorrelationId;
                        event.rop = cMdBlock.mHeader.fileHeader.rop;
                        event.emId = cMdBlock.mHeader.fileHeader.emId;
                        event.neId = cMdBlock.mHeader.fileHeader.neId;
                        event.eventText = "The raw file has been transformed";
                        boolean eventEnabled = mkEvent( event, cMdBlock.mHeader.fileHeader.sessionBeginTime, eventTable );
						if(eventEnabled) submit ({e=event}, OEvent);
						
						
						// Send punctuation
						submit(Sys.WindowMarker, OMeasDataBlock) ;

						// clear the state
					    cMdBlock.mHeader = { 
					         fileHeader = {eventCorrelationId="",sessionBeginTime=(uint64)0, fName="",rop="",emId="",neId=""}, 
					         startTime = "", interval = "",endTime = ""} ;
					    					         
						// Debug traces
						appTrc(Trace.info, "ETransformer - The file \"" + cMdBlock.mHeader.fileHeader.fName + "\" has been transformed.");
					}
                } 
                
                config
					threadedPort: queue(I, Sys.Wait, 100000);
		}

}


