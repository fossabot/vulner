namespace com.ti.oss.pm.mediation.ericsson.e3g;

use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.alarm::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.control::* ;
use com.it.ibm.swg.rdirscan::RDirectoryScan ;
//use com.ti.oss.pm.mediation.ericsson.e3g.utils::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.pm.writer.omes::* ;
use com.ti.oss.common.writer::* ;
use com.ti.oss.pm.mediation.ericsson.e3g.paral::*;
use com.ti.oss.common.pm.process::*;
use com.ti.oss.pm.mediation.ericsson.e3g.utils::*;

composite E3gMain
{
	graph
		(stream<boolean stop> Control) = Controller()
		{
			param
				mediationId : getCompileTimeValue("mediationId") ;			
				commonEnv : "COMMON_CFG_DIR" ;
				stopCheckPeriod : 60.0 ;
				
		  config
		    placement : partitionColocation( getCompileTimeValue("mediationId") ) ; 				
		}

		(stream<Event e> CEvent) = Custom(Control)
		{
			logic
				onTuple Control :
				{
					if(stop)
					{
						submit(Sys.WindowMarker, CEvent) ;
					}

				}
		  config
		    placement : partitionColocation( getCompileTimeValue("mediationId") ) ; 
		}

        
        //
        // File Poller
        //
		(stream<rstring fName, uint64 ctime> PFile) as FilePoller = RDirectoryScan(Control)
		{
			param
				directory : getCfgParam("COMMON_CFG_DIR", getCompileTimeValue("mediationId"), "SOUTH_BASE_DIR") ;
				pattern : ".xml$" ;
                ignoreDotFiles : true ;
                sortBy : name ; // name (default) or date (modification time)
                order : descending ; // ascending ~ FIFO or descending ~ LIFO
                recursive : true; //in recursive mode
                initDelay : 10.0 ;
                safeInterval : 5.0;
                
				//moveToDirectory : "//var/opt/common/data/work/e3g";
				//pattern : getCfgParam("COMMON_CFG_DIR", "e3g", "SELECTION_PATTERN") ;
				
			output
				PFile : fName = FilePath(),  
				        ctime = Ctime() ;
				        
            config
		       placement : partitionColocation( getCompileTimeValue("mediationId") + "-POLLER" ) ;         
		}


		(stream<rstring fName> PolledFile; stream<Event e> PullEvent) as GenPullEvent = 
		PullEventsGenerator(PFile)
        {
			param
				mediationId : getCompileTimeValue("mediationId") ;        
				
            config
		       placement : partitionColocation( getCompileTimeValue("mediationId") + "-POLLER" ) ; 
        }

  
        //
        // Mediation
        //
		@parallel(width =(int32) getSubmissionTimeValue("parWidth"))
		(
			stream<Event e> OEvent as OE ; 
		 	stream<Alarm alarm> OAlarm as OA; 
		 	stream<MeasHeader mHeader, MeasData mData> DataToExport
		 ) as E3gNewMed = E3gMediationParal(PolledFile)
		{
		}
	
	
			// KPI 
		//@parallel(width =(int32) getSubmissionTimeValue("parExport"))
		() as E3GKPI = E3gKPI(DataToExport as I)
		{
			param
				appId : getCompileTimeValue("mediationId") ;			
		}
		
		// Export 
		@parallel(width =(int32) getSubmissionTimeValue("parExport"))
		() as E3GExport = PMDataExporter(DataToExport as I)
		{
			param
				mediationId : getCompileTimeValue("mediationId") ;
				vendor : "Ericsson" ;
				domain : "4G" ;
		}

        // 
        // Events and alarms handlers
        //

		() as MEventHandler = EventHandler(OEvent, CEvent, PullEvent as E)
		{
			param
				mediationId : getCompileTimeValue("mediationId") ;
				
            config
		       placement : partitionColocation( getCompileTimeValue("mediationId") ) ; 				
		}

		() as MAlarmHandler = AlarmHandler(OAlarm as A)
		{
			param
				mediationId : getCompileTimeValue("mediationId") ;
				
            config
		       placement : partitionColocation( getCompileTimeValue("mediationId") ) ; 
		}

	config
		relocatable : true ;
		restartable : true ;
}
