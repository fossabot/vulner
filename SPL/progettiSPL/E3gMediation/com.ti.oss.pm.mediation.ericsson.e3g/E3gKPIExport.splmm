namespace com.ti.oss.pm.mediation.ericsson.e3g;

/*
 * Import ext namespaces
 */
use com.ti.oss.common.types::* ;
use com.ti.oss.common.alarm::* ;
use com.ti.oss.common.event::*;

use com.ti.oss.common.util.cfg::*;

use com.ti.oss.common.pm.kpi::* ;
use com.ti.oss.common.pm.kpi.aggregator::* ;
use com.ti.oss.common.pm.kpi.util::* ;

use com.ti.oss.common.pm.kpi.ztcp::*;

<%
	my @aggregations = ( 'KPI_IMSI_VIP_3G_RNC', 'KPI_ERICSSON_3G', 'KQI_ERNC', 'KPI_HANDOVER_E3G' ) ;
%>

composite E3gKPIExport(input stream<KPIExchangeRecord> IKPIER;
	                             output OTrailer, KPIMultiFileSinkAlarm)
{
	param
		expression<rstring> $appId : getCompileTimeValue("appId") ;
		expression<rstring> $commonEnv : "COMMON_CFG_DIR" ;
		expression<rstring> $configsListCfgParam : "LOCAL_EXPORT_CFG_LIST" ;

	graph
		(<%
			my $i = 1;
			
			foreach( @aggregations )
			{
		%>
				stream<rstring cfg, rstring eventCorrelationId, rstring vendor, rstring moc, rstring rop, rstring neId , rstring emId, rstring start, rstring end, rstring duration, boolean bof, boolean eof, rstring flushed, rstring kpiCsvRecord> <%=$_%>	
		<%
				if( $i++ < @aggregations ) { print ";"; }
			}
		%>
		)  as Router = Custom( IKPIER as I )
		{
			logic
				state :
				{
					mutable map<rstring, rstring> configsNameMap = { } ; 
					mutable map<rstring, list<rstring>> kpiMediationsMap = { } ;
					
					boolean isConfigsNameOk = fillConfigsNameMap( $commonEnv, $appId, $configsListCfgParam, configsNameMap ) ;
					boolean isKpiMediationsOk = fillMediationsMap( $commonEnv, $appId, "KPI", kpiMediationsMap, configsNameMap ) ;
				}

				onTuple I :
				{
					// Submit tuple for each KPI config that require this moc data
					if ( has( kpiMediationsMap, I.mediationId ) )
					{
					<%	foreach( @aggregations )
						{
					%>
							if ( has( kpiMediationsMap[ I.mediationId ], "<%=$_%>" ) )
							{
								submit( { cfg = "<%=$_%>", eventCorrelationId = I.eventCorrelationId, vendor = I.vendor, moc = I.moc, rop = I.rop, neId = I.neId, emId = I.emId, start = I.start, end = I.end, duration = I.duration, bof = I.bof, eof = I.eof, flushed = I.flushed, kpiCsvRecord = I.kpiCsvRecord }, <%=$_%> ) ;							
							}
					<%
						}
					%>
					}
				}
		}

		<%	foreach( @aggregations )
			{
		%>
			(stream<rstring eventCorrelationId, rstring ropEvent,rstring neId,rstring emId, boolean bof, boolean eof, rstring buffer,
				FileTrailer trailer> <%=$_%>_Data) as <%=$_%>_Aggregator = KPIAggregator( <%=$_%> )
			{
				param
					appId : getCompileTimeValue("appId") ;
	
			}
		<%
			}
		%>

		(stream<rstring eventCorrelationId,rstring ropEvent,rstring neId,rstring emId, FileTrailer trailer> OTrailer ;
			stream<Alarm alarm> KPIMultiFileSinkAlarm) =
			KPIMultiFileSink(
			<%
				my $i = 1;
			
				foreach( @aggregations )
				{
			%>
				<%=$_%>_Data
			<%
					if( $i++ < @aggregations ) { print ","; }
				}
			%>			 
			 )
		{
			param
				appId : getCompileTimeValue("appId") ;
		}
}