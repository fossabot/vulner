namespace com.ti.oss.common.cdr.sqm ;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

type SqmRoamingBroadGgsn = map<rstring, RoamingBroadGgsn>;
type SqmRoamingBroadGgsnNode = map<rstring, SqmRoamingBroadGgsn>;

public composite RoamingBroadBandGgsn(input stream<AggregateSqmSchema> eggsn ;
	output stream<RoamingBroadGgsn> outKpi3, outKpiStorage, OutEventKpi3, stream<CDRCounters> OutCounters)
{
	param
		expression<rstring> $tmpOutFilePrefix ;
		expression<rstring> $tmpOutFileSuffix ;
		expression<rstring> $mediationName ;
	graph
		(stream<RoamingBroadGgsn> outKpi3 as O; stream<RoamingBroadGgsn> outKpiStorage; stream<Event e> OutEventKpi3 as OE; stream<CDRCounters> OutCounters) =
			Custom(eggsn)
		{
			logic
				state :
				{
					rstring tmpOutFilePrefix = $tmpOutFilePrefix;
					rstring tmpOutFileSuffix = $tmpOutFileSuffix;
					rstring mediationName = $mediationName;
					
					mutable float64 startROPstate = 0 ;
					mutable float64 endROPstate = 0 ;
					mutable float64 startROPold = 0 ;
					mutable float64 endROPold = 0 ;
					boolean flagMediationCfg = loadMediationCfg(mediationName) ;
					mutable rstring nameOutputFilestate ;
					mutable rstring nameOutputFileOld ;
					mutable rstring path = getCfgParam("COMMON_CFG_DIR", mediationName, "SQM_ROAMING_GGSN_OUTPUT_PATH") ;
					mutable rstring filePrefix = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_PREFIX_ROAMING_BROAD_GGSN") ;
					mutable rstring fileSuffix = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_SUFFIX") ;
					mutable rstring MONITORED_ROAMING_OPERATOR_OUTBOUND = getCfgParam("COMMON_CFG_DIR", mediationName, "MONITORED_ROAMING_OPERATOR_OUTBOUND") ;
					mutable int32 interval = (int32)getCfgParam("COMMON_CFG_DIR",mediationName,"ROP_INTERVAL_SQM");
					mutable boolean flagRoamingOperator = loadCdrProvCfg("ROAMINGOPERATOR", MONITORED_ROAMING_OPERATOR_OUTBOUND,(uint32)1, ",") ;
					mutable SqmRoamingBroadGgsn CDRforRoamingBroadGgsn ;
					mutable SqmRoamingBroadGgsn SqmRoamingBroadGgsnRopT ;
					mutable SqmRoamingBroadGgsnNode SqmRoamingBroadGgsnNodeT ; 
					mutable SqmRoamingBroadGgsnNode SqmRoamingBroadGgsnNodePrec ;
					mutable FileHeader fh = { } ;
					
					mutable O emptyEndRopTuple = initEmptyEndRopTupleRoamGgsn();
					mutable OE oetuple = (OE){};
					
					mutable SqmRoamingBroadGgsn cdrApp = {};
                   	mutable SqmRoamingBroadGgsn CDRforBroadGgsnApnTmp = {};
//                   	
//                   	// Conta tutti CDR per rATType
//					mutable uint64 cdrtotrattype = 0ul;
//					mutable uint64 cdrtotrattypeold = 0ul;
					
                   	// Conta i CDR corretti per questo KPI
					mutable uint64 cdrtot = 0ul;
					mutable uint64 cdrtotold = 0ul;
					
					// Conta i CDR scartati per il filtro impostato
					mutable uint64 cdrexclude1 = 0ul;
					mutable uint64 cdrexclude1old = 0ul;
					
					// Conta i CDR scartati esterni al ROP
					mutable uint64 cdrexclude2 = 0ul;
					mutable uint64 cdrexclude2old = 0ul;
				}

				onTuple eggsn :
				{					
					if(eggsn.endROP)
					{
						interval = checkConfiguration(mediationName,"ROP_INTERVAL_SQM",interval);
						path = checkConfiguration(mediationName, "SQM_ROAMING_GGSN_OUTPUT_PATH",	path) ;
						filePrefix = checkConfiguration(mediationName, "FILE_PREFIX_ROAMING_BROAD_GGSN", filePrefix) ;
						fileSuffix = checkConfiguration(mediationName, "FILE_SUFFIX", fileSuffix) ;
					
						if (isCdrProvCfgChanged("ROAMINGOPERATOR"))
						{
							reloadCdrProvCfg("ROAMINGOPERATOR");
						}

						swap(SqmRoamingBroadGgsnNodeT,SqmRoamingBroadGgsnNodePrec);
						swap(cdrtot, cdrtotold);
						cdrtot = 0ul;
						swap(cdrexclude1, cdrexclude1old);
						cdrexclude1 = 0ul;
						swap(cdrexclude2, cdrexclude2old);
						cdrexclude2 = 0ul;
//						swap(cdrtotrattype, cdrtotrattypeold);
//						cdrtotrattype = 0ul;
						
						clearM(SqmRoamingBroadGgsnNodeT);
						startROPold = startROPstate;
						endROPold = endROPstate;
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
						nameOutputFileOld = nameOutputFilestate;
					}
					
					if(startROPstate == (float64)0 || endROPstate == (float64)0)
					{
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
					}
					
					if(nameOutputFilestate == "")
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}
					
					if(eggsn.endROP)
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}	

					if(eggsn.write_prev)
					{
						if (eggsn.exclude_node == "")
						{
							mutable rstring filename_tmp = "";
							mutable rstring central_val="";
							if(size(SqmRoamingBroadGgsnNodePrec) != 0)
							{
								aggregateRoamingNode(SqmRoamingBroadGgsnNodePrec, CDRforRoamingBroadGgsn);
                   				
		                		for(rstring key in CDRforRoamingBroadGgsn)
								{
									submit(CDRforRoamingBroadGgsn[key], outKpi3);
									submit(CDRforRoamingBroadGgsn[key], outKpiStorage);
									central_val = central_val + key + ";";
								}
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								emptyEndRopTuple.endROP = true;
								submit(emptyEndRopTuple, outKpi3);	
								submit(emptyEndRopTuple, outKpiStorage);
							}
							else
							{
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpi3);
								submit(emptyEndRopTuple, outKpiStorage);
							}
							
							mutable rstring sr = "";
							mutable rstring er = "";
							if(startROPold != (float64)0 && endROPold != (float64)0)
							{
								sr = getUtilConvert((rstring)startROPold);
								er = getUtilConvert((rstring)endROPold);
							}
							else
							{
								sr = "0";
								er = "0";
							}
							submit({kpi = "RoamingBroadBandGgsn", ROP = sr + "-" + er, cdrtot = cdrtotold, cdrexclude1 = cdrexclude1old, cdrexclude2 = cdrexclude2old}, OutCounters);
							
							//clear statistics
							//cdrtotrattypeold = 0ul;
							cdrtotold = 0ul;
							cdrexclude1old = 0ul;
							cdrexclude2old = 0ul;
							
							clearM(SqmRoamingBroadGgsnNodePrec);
							clearM(CDRforRoamingBroadGgsn);
							startROPold = (float64)0;
							endROPold = (float64)0;
							nameOutputFileOld = "";
							oetuple.e.eventType = 190 ;
							oetuple.e.resultCode = 0 ;
							oetuple.e.rawFile = filename_tmp ;
							swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
		                    swap(oetuple.e.rop, fh.rop);
		                    swap(oetuple.e.emId, fh.emId);
		                    swap(oetuple.e.neId, fh.neId);
							oetuple.e.eventText = "End write_prev close file " + filename_tmp + " for node: "+central_val;
							boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime);
							if(eventEnabled) submit(oetuple, OutEventKpi3);
						}
						else
						{
							if(has(SqmRoamingBroadGgsnNodePrec, eggsn.exclude_node) == true)
							{
								removeM(SqmRoamingBroadGgsnNodePrec, eggsn.exclude_node);
							}
						}
					}

					else if((eggsn.cdrSchema.rATType == 1 || eggsn.cdrSchema.rATType == 2) && !eggsn.endROP)
					{
						//cdrtotrattype++;
						fh = eggsn.fHeader ;
						
						mutable rstring operatore = "";
						mutable list<rstring> tmpOutParamMap = [];
						
						mutable rstring datetmp = "20" +(rstring)substring(eggsn.cdrSchema.recordOpeningTime, 0, 12) ;
						timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss, datetmp) ;
						mutable float64 endTimeCDRfloat = getSeconds(ts) + (int64)eggsn.cdrSchema.duration;
						
						if (size(eggsn.cdrSchema.servingNodeAddress)>0)
						{
							operatore = eggsn.cdrSchema.servingNodeAddress[0];
						}
						
						if (operatore != "")
						{						
							if ( getCdrProvRecord("ROAMINGOPERATOR", operatore, tmpOutParamMap ) )
							{
								mutable rstring centralName = eggsn.cdrSchema.nodeId; 
								mutable rstring key = centralName + operatore;  
								
								if((endTimeCDRfloat >= eggsn.startRopSecsOld) && (endTimeCDRfloat < eggsn.endRopSecsOld))
								{
									cdrtotold++;
									if(has(SqmRoamingBroadGgsnNodePrec, centralName) == true)
			                		{
			                			addCdrRBBG(eggsn,SqmRoamingBroadGgsnNodePrec[centralName],key,nameOutputFileOld,centralName,tmpOutParamMap[2],filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);	
			                		}
			                		else
			                		{
			                			addCdrRBBG(eggsn,CDRforRoamingBroadGgsn,key,nameOutputFileOld,centralName,tmpOutParamMap[2],filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
										insertM(SqmRoamingBroadGgsnNodePrec, centralName, CDRforRoamingBroadGgsn) ;
			                		}
								}
								else if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									cdrtot++;
									if(has(SqmRoamingBroadGgsnNodeT, centralName) == true)
				                	{
				                		addCdrRBBG(eggsn,SqmRoamingBroadGgsnNodeT[centralName],key,nameOutputFilestate,centralName,tmpOutParamMap[2],filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
				                	}
				                	else
				                	{
				                		addCdrRBBG(eggsn,CDRforRoamingBroadGgsn,key,nameOutputFilestate,centralName,tmpOutParamMap[2],filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
										insertM(SqmRoamingBroadGgsnNodeT, centralName, CDRforRoamingBroadGgsn) ;
				                	}
								}
								else
								{
									//exclude CDR fuori ROP
									cdrexclude2++;
								}
								
								clearM(cdrApp);
								clearM(CDRforRoamingBroadGgsn);
							}
							else 
							{
								if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									//exclude Filtro CDR in ROP
									cdrexclude1++;
								}
								else
								{
									//exclude Filtro CDR fuori ROP
									cdrexclude1old++;
								}
							}
						}
						else 
						{
							if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
							{
								//exclude Filtro CDR in ROP
								cdrexclude1++;
							}
							else
							{
								//exclude Filtro CDR fuori ROP
								cdrexclude1old++;
							}
						}
					}
				}

				onPunct eggsn :
				{
					if(currentPunct() == Sys.WindowMarker)
					{
						oetuple.e.eventType = 200 ;
						oetuple.e.resultCode = 0 ;
						oetuple.e.rawFile = filename(fh.fName) ;
						swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
	                    swap(oetuple.e.rop, fh.rop);
	                    swap(oetuple.e.emId, fh.emId);
	                    swap(oetuple.e.neId, fh.neId);
						oetuple.e.eventText = "End Roaming Broadband Outbound SQM";
						boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
						if(eventEnabled) submit(oetuple, OutEventKpi3) ;
						
						submit(Sys.WindowMarker, OutEventKpi3) ;
					}

				}
			config
				threadedPort: queue(eggsn, Sys.Wait, 1000000);

			}
			
//		(stream<CsvWrite> outCsv3) = Custom(outKpi3)
//		{
//			logic
//				state:
//				{
//					mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
//					mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
//					
//					mutable CsvWrite csv = {};
//				}
//				
//				
//				onTuple outKpi3: 
//				{
//					if (outKpi3.endROP)
//					{
//						if (isCdrProvCfgChanged("NAMINGLOOKUP"))
//						{
//							reloadCdrProvCfg("NAMINGLOOKUP");
//						}
//					}
//
//					swap(csv.nameOutputFile, outKpi3.nameOutputFile);
//					swap(csv.endROP, outKpi3.endROP);
//					swap(csv.filePrefix, outKpi3.filePrefix);
//					swap(csv.suffix, outKpi3.suffix);					
//					
//					mutable rstring sqmDn = "";
//					if (outKpi3.ggsn_dn != "")
//					{
//						sqmDn = getSqmDn(outKpi3.ggsn_dn,flagNamingLookup);	
//					}
//					if (sqmDn != "")
//					{
//						csv.outputContent = sqmDn+";"+outKpi3.country_roaming_operator+";"+outKpi3.start_time+";"+outKpi3.end_time+";"+(rstring)outKpi3.cdr_foreign_downlink_control_ggsn;
//					}else{
//						csv.outputContent = "";
//					}
//					
//					
//					submit(csv, outCsv3);
//				}
//				onPunct outKpi3 :
//				{
//					if(currentPunct() == Sys.WindowMarker) {
//						submit(Sys.WindowMarker,outCsv3);
//					}
//				} 
//		}	

	}

void countCdrsRBBG(AggregateSqmSchema eggsn1, mutable RoamingBroadGgsn aggrSQMtmp) 
{
    for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
	{
		aggrSQMtmp.cdr_foreign_downlink_control_ggsn = aggrSQMtmp.cdr_foreign_downlink_control_ggsn + (int64)eggsn1.cdrSchema.datavolumeFBCDownlink[i];
	}
}

void addCdrRBBG(AggregateSqmSchema eggsn, mutable SqmRoamingBroadGgsn cdr, rstring key, rstring nameOutputFile, rstring centralName, rstring operatore, rstring filePrefix, rstring fileSuffix, float64 startROP, float64 endROP)
{
	mutable RoamingBroadGgsn firstEntry = {};
	mutable RoamingBroadGgsn existEntry = {};
	
	if(has(cdr, key) == false) 
    {   
		firstEntry.nameOutputFile = nameOutputFile ;
		firstEntry.filePrefix = filePrefix ;
		firstEntry.suffix = fileSuffix ;
    	firstEntry.ggsn_dn = centralName;
		firstEntry.country_roaming_operator = operatore;
		firstEntry.start_time = getUtilConvert((rstring)startROP); 
		firstEntry.end_time = getUtilConvert((rstring)endROP);
		countCdrsRBBG(eggsn, firstEntry) ;
		insertM(cdr, key, firstEntry) ;
    }  
    else 
    {     
     	existEntry = cdr[key];
     	
     	countCdrsRBBG(eggsn, existEntry) ;
 					
 		removeM (cdr, key);
	    insertM( cdr, key, existEntry);
    }
}

RoamingBroadGgsn initEmptyEndRopTupleRoamGgsn() 
{
	mutable RoamingBroadGgsn result = {};
	
	result.endROP = true;
	
	return result;
}

void aggregateRoamingNode (mutable SqmRoamingBroadGgsnNode sqmNode, mutable SqmRoamingBroadGgsn sqm)
{
	mutable SqmRoamingBroadGgsn cdrApp = {};
	mutable list<rstring> keysTmp = [];
	for(rstring key in sqmNode) 
	{
		appendM(keysTmp, key);
	}
	for(rstring key in keysTmp)
	{
		swap(cdrApp, sqmNode[key]);
		for(rstring keyCdr in cdrApp) 
		{	
			if(has(sqm, keyCdr))
			{
				sqm[keyCdr].cdr_foreign_downlink_control_ggsn = sqm[keyCdr].cdr_foreign_downlink_control_ggsn + cdrApp[keyCdr].cdr_foreign_downlink_control_ggsn;
    		}
        	else
        	{
        		insertM(sqm, keyCdr, cdrApp[keyCdr]);
        	}
        }
	}
	clearM(keysTmp);
	clearM(cdrApp);
}