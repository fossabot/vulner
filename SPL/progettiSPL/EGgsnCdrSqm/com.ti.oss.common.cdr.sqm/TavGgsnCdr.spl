namespace com.ti.oss.common.cdr.sqm ;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

type SqmTavGgsn = map<rstring, TavGgsn>;
type SqmTavGgsnNode = map<rstring, SqmTavGgsn>;

public composite TavGgsnCdr(input stream<AggregateSqmSchema> eggsn, stream <rstring centrale>E, stream <rstring tratta>CT  ; output
	stream<TavGgsn> outKpi3G, stream<TavGgsn> outKpi4G, OutEventKpi4, stream<CDRCounters> OutCounters)
{
	param
		expression<rstring> $tmpOutFilePrefix3G ;
		expression<rstring> $tmpOutFilePrefix4G ;
		expression<rstring> $tmpOutFileSuffix ;
		expression<rstring> $mediationName ;
	graph
		(stream<TavGgsn> outKpi3G as O; stream<TavGgsn> outKpi4G; stream<Event e> OutEventKpi4 as OE; stream<CDRCounters> OutCounters) =
			Custom(eggsn;E;CT)
		{
			logic
				state :
				{
					rstring tmpOutFilePrefix3G = $tmpOutFilePrefix3G;
					rstring tmpOutFilePrefix4G = $tmpOutFilePrefix4G;
					rstring tmpOutFileSuffix = $tmpOutFileSuffix;
					rstring mediationName = $mediationName;
					
					mutable float64 startROPstate = 0 ;
					mutable float64 endROPstate = 0 ;
					mutable float64 startROPold = 0 ;
					mutable float64 endROPold = 0 ;
					boolean flagMediationCfg = loadMediationCfg(mediationName) ;
					mutable rstring nameOutputFilestate3G ;
					mutable rstring nameOutputFilestate4G ;
					mutable rstring nameOutputFileOld3G ;
					mutable rstring nameOutputFileOld4G ;
					mutable rstring path = getCfgParam("COMMON_CFG_DIR", mediationName, "SQM_TAV_GGSN_PATH") ;
					mutable rstring filePrefix3G = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_PREFIX_TAV_GGSN_3G") ;
					mutable rstring filePrefix4G = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_PREFIX_TAV_GGSN_4G") ;
					mutable rstring fileSuffix = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_SUFFIX") ;
					mutable int32 interval = (int32)getCfgParam("COMMON_CFG_DIR",mediationName,"ROP_INTERVAL_SQM");
					mutable rstring celle_tav = getCfgParam("COMMON_CFG_DIR",mediationName,"CELLE_TAV");
					mutable boolean flagCelleTav = loadCdrProvCfg("CELLETAV",celle_tav, (uint32)2, ";");//CGI
					mutable SqmTavGgsn CDRforTavGgsn3G ;
					mutable SqmTavGgsnNode SqmTavGgsnNodeT3G ;
					mutable SqmTavGgsnNode SqmTavGgsnNodePrec3G ;
					mutable SqmTavGgsn CDRforTavGgsn4G ;
					mutable SqmTavGgsnNode SqmTavGgsnNodeT4G ;
					mutable SqmTavGgsnNode SqmTavGgsnNodePrec4G ;
					mutable FileHeader fh = { } ;
					
					mutable O emptyEndRopTuple3G = initEmptyEndRopTupleTav();
					mutable O emptyEndRopTuple4G = initEmptyEndRopTupleTav();
					mutable OE oetuple = (OE){};
					
					mutable SqmTavGgsn cdrApp = {};
                   	mutable SqmTavGgsn CDRforBroadGgsnApnTmp = {};
                   	
                   	mutable set<rstring> listTratta;
                   	mutable list<rstring> listCentrale;
                   	
                   	mutable set<rstring> listCgiTav;
//                   	
//                   	// Conta tutti CDR per rATType
//					mutable uint64 cdrtotrattype = 0ul;
//					mutable uint64 cdrtotrattypeold = 0ul;
//					
                   	// Conta i CDR corretti per questo KPI
					mutable uint64 cdrtot = 0ul;
					mutable uint64 cdrtotold = 0ul;
					
					// Conta i CDR scartati per il filtro impostato
					mutable uint64 cdrexclude1 = 0ul;
					mutable uint64 cdrexclude1old = 0ul;
										
					// Conta i CDR scartati esterni al ROP
					mutable uint64 cdrexclude2 = 0ul;
					mutable uint64 cdrexclude2old = 0ul;
				}

				
				onTuple CT:
				{
					mutable list<rstring> tratta = tokenize(CT.tratta, ";", true);
					
					if (tratta[0] == "DN_SQM")
					{
						clearM(listTratta);
					}
					else
					{
						insertM(listTratta, regexReplace(tratta[4]," - ","_",true));
					}
				}
				
				
				onTuple E:
				{
					mutable list<rstring> rete = tokenize(E.centrale, ",", true);
					mutable rstring centrale = regexReplace(rete[1],"\n","",true);
					centrale = regexReplace(centrale,"\r","",true);
					
					if (centrale == "CENTRALE")
					{
						clearM(listCentrale);
					}
					else
					{
						appendM(listCentrale, centrale);
					}
				}
				
				
				
				onTuple eggsn :
				{
					
					if(eggsn.endROP)
					{
						interval = checkConfiguration(mediationName,"ROP_INTERVAL_SQM",interval);
						path = checkConfiguration(mediationName, "SQM_TAV_GGSN_PATH", path) ;
						filePrefix3G = checkConfiguration(mediationName,"FILE_PREFIX_TAV_GGSN_3G", filePrefix3G) ;
						filePrefix4G = checkConfiguration(mediationName,"FILE_PREFIX_TAV_GGSN_4G", filePrefix4G) ;
						fileSuffix = checkConfiguration(mediationName, "FILE_SUFFIX",fileSuffix) ;
						
						swap(SqmTavGgsnNodeT3G,SqmTavGgsnNodePrec3G);
						swap(SqmTavGgsnNodeT4G,SqmTavGgsnNodePrec4G);
						swap(cdrtot, cdrtotold);
						cdrtot = 0ul;
						swap(cdrexclude1, cdrexclude1old);
						cdrexclude1 = 0ul;
						swap(cdrexclude2, cdrexclude2old);
						cdrexclude2 = 0ul;
//						swap(cdrtotrattype, cdrtotrattypeold);
//						cdrtotrattype = 0ul;

						clearM(SqmTavGgsnNodeT3G);
						clearM(SqmTavGgsnNodeT4G);
						startROPold = startROPstate;
						endROPold = endROPstate;
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
						nameOutputFileOld3G = nameOutputFilestate3G;
						nameOutputFileOld4G = nameOutputFilestate4G;
						
						nameOutputFilestate3G = path + tmpOutFilePrefix3G +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
						nameOutputFilestate4G = path + tmpOutFilePrefix4G +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
						
						mutable TavGgsn entry3G = {};
						entry3G.nameOutputFile = nameOutputFilestate3G ;
						entry3G.filePrefix = filePrefix3G ;
						entry3G.suffix = fileSuffix ;
				    	entry3G.start_time = getUtilConvert((rstring)startROPstate); 
						entry3G.end_time = getUtilConvert((rstring)endROPstate);
						entry3G.tav_bb_downlink_uplink = (int64)0;
						
						mutable TavGgsn entry4G = {};
						entry4G.nameOutputFile = nameOutputFilestate4G ;
						entry4G.filePrefix = filePrefix4G ;
						entry4G.suffix = fileSuffix ;
				    	entry4G.start_time = getUtilConvert((rstring)startROPstate); 
						entry4G.end_time = getUtilConvert((rstring)endROPstate);
						entry4G.tav_bb_downlink_uplink = (int64)0;
						
						for (rstring elem in listTratta)
						{	
							entry3G.tratta_dn = "PLMN-PLMN/TRAT-"+elem;
							entry4G.tratta_dn = "PLMN-PLMN/TRAT-"+elem;
							insertM(CDRforTavGgsn3G,entry3G.tratta_dn,entry3G);
							insertM(CDRforTavGgsn4G,entry4G.tratta_dn,entry4G);
							for (int32 k in range(listCentrale))
							{
								insertM(SqmTavGgsnNodeT3G,listCentrale[k],CDRforTavGgsn3G);
								insertM(SqmTavGgsnNodeT4G,listCentrale[k],CDRforTavGgsn4G);
							}	 
						}
						clearM(CDRforTavGgsn3G);
						clearM(CDRforTavGgsn4G);
					}
					
					if(startROPstate == (float64)0 || endROPstate == (float64)0)
					{
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
					}
					
					if(nameOutputFilestate3G == "")
					{
						nameOutputFilestate3G = path + tmpOutFilePrefix3G +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
						nameOutputFilestate4G = path + tmpOutFilePrefix4G +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}
					
					if(eggsn.endROP)
					{
						nameOutputFilestate3G = path + tmpOutFilePrefix3G +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
						nameOutputFilestate4G = path + tmpOutFilePrefix4G +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}

					if(eggsn.write_prev)
					{
						mutable rstring filename_tmp = "";
						mutable rstring central_val="";
						if (eggsn.exclude_node == "")
						{
							if(size(SqmTavGgsnNodePrec3G) != 0)
							{
								mutable list<rstring> keysTmp = [];
                   				for(rstring key in SqmTavGgsnNodePrec3G) 
								{
									appendM(keysTmp, key);
								}
								for(rstring key in keysTmp)
								{
									swap(cdrApp, SqmTavGgsnNodePrec3G[key]);
									for(rstring keyCdr in cdrApp) 
									{
				                    	submit(cdrApp[keyCdr], outKpi3G);
				                    }
				                    central_val = central_val + key + ";";	
								}
								filename_tmp = nameOutputFileOld3G;
								emptyEndRopTuple3G.nameOutputFile = nameOutputFileOld3G;
								submit(emptyEndRopTuple3G, outKpi3G);
							}
							else
							{
								filename_tmp = nameOutputFileOld3G;
								emptyEndRopTuple3G.nameOutputFile = nameOutputFileOld3G;
								submit(emptyEndRopTuple3G, outKpi3G);
							}
							
							clearM(cdrApp);
							
							if(size(SqmTavGgsnNodePrec4G) != 0)
							{
								mutable list<rstring> keysTmp = [];
                   				for(rstring key in SqmTavGgsnNodePrec4G) 
								{
									appendM(keysTmp, key);
								}
								for(rstring key in keysTmp)
								{
									swap(cdrApp, SqmTavGgsnNodePrec4G[key]);
									for(rstring keyCdr in cdrApp) 
									{
				                    	submit(cdrApp[keyCdr], outKpi4G);
				                    }
				                    central_val = central_val + key + ";";	
								}
								filename_tmp = nameOutputFileOld4G;
								emptyEndRopTuple4G.nameOutputFile = nameOutputFileOld4G;
								submit(emptyEndRopTuple4G, outKpi4G);
							}
							else
							{
								filename_tmp = nameOutputFileOld4G;
								emptyEndRopTuple4G.nameOutputFile = nameOutputFileOld4G;
								submit(emptyEndRopTuple4G, outKpi4G);
							}
							
							mutable rstring sr = "";
							mutable rstring er = "";
							if(startROPold != (float64)0 && endROPold != (float64)0)
							{
								sr = getUtilConvert((rstring)startROPold);
								er = getUtilConvert((rstring)endROPold);
							}
							else
							{
								sr = "0";
								er = "0";
							}
							submit({kpi = "TavGgsnCdr", ROP = sr + "-" + er, cdrtot = cdrtotold, cdrexclude1 = cdrexclude1old, cdrexclude2 = cdrexclude2old}, OutCounters);
							/*if (writeCgiTav == "true")
							{
								submit({ratType = "", cgiTav = "", ROP = sr + "-" + er, endROP = true}, OutCgiTav);
							}*/
														
							//clear statistics
							//cdrtotrattypeold = 0ul;
							cdrtotold = 0ul;
							cdrexclude1old = 0ul;
							cdrexclude2old = 0ul;
							
							clearM(SqmTavGgsnNodePrec3G);
							clearM(SqmTavGgsnNodePrec4G);
							clearM(cdrApp);
							startROPold = (float64)0;
							endROPold = (float64)0;
							nameOutputFileOld3G = "";
							nameOutputFileOld4G = "";
							
							
							
							
							oetuple.e.eventType = 190 ;
							oetuple.e.resultCode = 0 ;
							oetuple.e.rawFile = filename_tmp ;
							swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
		                    swap(oetuple.e.rop, fh.rop);
		                    swap(oetuple.e.emId, fh.emId);
		                    swap(oetuple.e.neId, fh.neId);
							oetuple.e.eventText = "End write_prev close file " + filename_tmp + " for node: " + central_val;
							boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
							
							if(eventEnabled) 
								submit(oetuple, OutEventKpi4) ;
						}
						else
						{
							if(has(SqmTavGgsnNodePrec3G, eggsn.exclude_node) == true)
							{
								removeM(SqmTavGgsnNodePrec3G, eggsn.exclude_node) ;
							}
							
							if(has(SqmTavGgsnNodePrec4G, eggsn.exclude_node) == true)
							{
								removeM(SqmTavGgsnNodePrec4G, eggsn.exclude_node) ;
							}
						}
					}
					else if(!eggsn.endROP)
					{
						fh = eggsn.fHeader ;
						
						mutable rstring datetmp = "20" +(rstring)substring(eggsn.cdrSchema.recordOpeningTime, 0, 12) ;
						timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss, datetmp) ;
						mutable float64 endTimeCDRfloat = getSeconds(ts) +(int64)eggsn.cdrSchema.duration ;
						
						if(cleanApn(eggsn.cdrSchema.apn) == "intrainwifi.tim.it")
						{	
							mutable list<rstring> tmpOutParamMapCELLETAV = [];
							
							mutable rstring cgi = "";			
					    	if (length(eggsn.cdrSchema.userLocationInformation)>16)
					    	{
					    		cgi = transformUserLocalInfo_4G(eggsn.cdrSchema.userLocationInformation);
					    	}
					    	else
					    	{
					    		if (eggsn.cdrSchema.rATType==6)
					    		{
					    			cgi = transformUserLocalInfo_4Gsmall(eggsn.cdrSchema.userLocationInformation);
					    		}
					    		else
					    		{
					    			cgi = transformUserLocalInfo(eggsn.cdrSchema.userLocationInformation);
					    		}
					    	}							
							
							if ( getCdrProvRecord("CELLETAV", cgi, tmpOutParamMapCELLETAV ) )
							{	
								eggsn.cdrSchema.userLocationInformation = "PLMN-PLMN/TRAT-"+regexReplace(tmpOutParamMapCELLETAV[4]," - ","_",true);//TRATTA - CELLA TAV
							}else{
								/*if (writeCgiTav == "true")
								{
									submit({ratType = (rstring)eggsn.cdrSchema.rATType, cgiTav = eggsn.cdrSchema.userLocationInformation, ROP = "", endROP=false}, OutCgiTav);
								}*/
								
								eggsn.cdrSchema.userLocationInformation = "DEFAULT";
							}
							
							mutable rstring centralName = eggsn.cdrSchema.nodeId;
							mutable rstring key = centralName;
						
							if(eggsn.cdrSchema.rATType == 1) 
							{
								//cdrtotrattype++;
								if((endTimeCDRfloat >= eggsn.startRopSecsOld) && (endTimeCDRfloat < eggsn.endRopSecsOld))
								{
									cdrtotold++;
									if(has(SqmTavGgsnNodePrec3G, centralName) == true)
			                		{
			                			addCdrTGC(eggsn,SqmTavGgsnNodePrec3G[centralName],key,nameOutputFileOld3G,centralName,filePrefix3G,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);	
			                		}
			                		else
			                		{
			                			addCdrTGC(eggsn,CDRforTavGgsn3G,key,nameOutputFileOld3G,centralName,filePrefix3G,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
			                			insertM(SqmTavGgsnNodePrec3G, centralName, CDRforTavGgsn3G) ;
			                		}
								}
								else if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									cdrtot++;
									if(has(SqmTavGgsnNodeT3G, centralName) == true)
				                	{
				                		addCdrTGC(eggsn,SqmTavGgsnNodeT3G[centralName],key,nameOutputFilestate3G,centralName,filePrefix3G,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);	
				                	}
				                	else
				                	{
				                		addCdrTGC(eggsn,CDRforTavGgsn3G,key,nameOutputFilestate3G,centralName,filePrefix3G,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
										insertM(SqmTavGgsnNodeT3G, centralName, CDRforTavGgsn3G) ;
				                	}
								}
								else
								{	
									//exclude CDR fuori ROP
									cdrexclude2++;
								}
								
								clearM(cdrApp);
								clearM(CDRforTavGgsn3G);
							}
							else if (eggsn.cdrSchema.rATType == 6)
							{
								//cdrtotrattype++;
								if((endTimeCDRfloat >= eggsn.startRopSecsOld) && (endTimeCDRfloat < eggsn.endRopSecsOld))
								{
									cdrtotold++;
									if(has(SqmTavGgsnNodePrec4G, centralName) == true)
			                		{
			                			addCdrTGC(eggsn,SqmTavGgsnNodePrec4G[centralName],key,nameOutputFileOld4G,centralName,filePrefix4G,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);	
			                		}
			                		else
			                		{
			                			addCdrTGC(eggsn,CDRforTavGgsn4G,key,nameOutputFileOld4G,centralName,filePrefix4G,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
			                			insertM(SqmTavGgsnNodePrec4G, centralName, CDRforTavGgsn4G) ;
			                		}
								}
								else if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									cdrtot++;
									if(has(SqmTavGgsnNodeT4G, centralName) == true)
				                	{
				                		addCdrTGC(eggsn,SqmTavGgsnNodeT4G[centralName],key,nameOutputFilestate4G,centralName,filePrefix4G,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);	
				                	}
				                	else
				                	{
				                		addCdrTGC(eggsn,CDRforTavGgsn4G,key,nameOutputFilestate4G,centralName,filePrefix4G,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
										insertM(SqmTavGgsnNodeT4G, centralName, CDRforTavGgsn4G) ;
				                	}
								}
								else
								{	
									//exclude CDR fuori ROP
									cdrexclude2++;
								}
								
								clearM(cdrApp);
								clearM(CDRforTavGgsn4G);
							}
							else 
							{	
								if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									//exclude Filtro CDR in ROP
									cdrexclude1++;
								}
								else
								{
									//exclude Filtro CDR fuori ROP
									cdrexclude1old++;
								}
							}
						}
						else 
						{	
							if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
							{
								//exclude Filtro CDR in ROP
								cdrexclude1++;
							}
							else
							{
								//exclude Filtro CDR fuori ROP
								cdrexclude1old++;
							}
						}
					}
				}

				onPunct eggsn :
				{
					if(currentPunct() == Sys.WindowMarker)
					{
						oetuple.e.eventType = 200 ;
						oetuple.e.resultCode = 0 ;
						oetuple.e.rawFile = filename(fh.fName) ;
						swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
	                    swap(oetuple.e.rop, fh.rop);
	                    swap(oetuple.e.emId, fh.emId);
	                    swap(oetuple.e.neId, fh.neId);
						oetuple.e.eventText = "End Tav Ggsn SQM";
						boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
						if(eventEnabled) submit(oetuple, OutEventKpi4) ;
						
						submit(Sys.WindowMarker, OutEventKpi4) ;
					}

				}
			config
				threadedPort: queue(eggsn, Sys.Wait, 1000000);

			}
			
//		(stream<CsvWrite> outCsv4) = Custom(outKpi4)
//		{
//			logic
//				state:
//				{	
//					mutable CsvWrite csv = {};
//				}
//				
//				onTuple outKpi4: 
//				{
//					swap(csv.nameOutputFile, outKpi4.nameOutputFile);
//					swap(csv.endROP, outKpi4.endROP);
//					swap(csv.filePrefix, outKpi4.filePrefix);
//					swap(csv.suffix, outKpi4.suffix);
//					
//					if (outKpi4.tratta_dn!="")
//					{
//						csv.outputContent = outKpi4.tratta_dn+";"+outKpi4.start_time+";"+outKpi4.end_time+";"+(rstring)outKpi4.tav_bb_downlink_uplink;
//					}else{
//						csv.outputContent = "";
//					}
//					
//					submit(csv, outCsv4);
//				}
//				onPunct outKpi4 :
//				{
//					if(currentPunct() == Sys.WindowMarker) {
//						submit(Sys.WindowMarker,outCsv4);
//					}
//				} 
//		}

	}

	
void countCdrsTGC(AggregateSqmSchema eggsn1, mutable TavGgsn aggrSQMtmp) 
{
	for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
	{
		aggrSQMtmp.tav_bb_downlink_uplink = aggrSQMtmp.tav_bb_downlink_uplink + (int64)eggsn1.cdrSchema.datavolumeFBCDownlink[i];
	}
	
	for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCUplink))
	{
		aggrSQMtmp.tav_bb_downlink_uplink = aggrSQMtmp.tav_bb_downlink_uplink + (int64)eggsn1.cdrSchema.datavolumeFBCUplink[i];
	}		
	
}

void addCdrTGC(AggregateSqmSchema eggsn, mutable SqmTavGgsn cdr, rstring key, rstring nameOutputFile, rstring centralName, rstring filePrefix, rstring fileSuffix, float64 startROP, float64 endROP)
{
	mutable TavGgsn firstEntry = {};
	mutable TavGgsn existEntry = {};
	
	if(has(cdr, key) == false) 
    {   
    	firstEntry.nameOutputFile = nameOutputFile ;
		firstEntry.filePrefix = filePrefix ;
		firstEntry.suffix = fileSuffix ;
    	firstEntry.tratta_dn = eggsn.cdrSchema.userLocationInformation;
		firstEntry.start_time = getUtilConvert((rstring)startROP); 
		firstEntry.end_time = getUtilConvert((rstring)endROP);
		countCdrsTGC(eggsn, firstEntry) ;
		insertM(cdr, key, firstEntry) ;
    }  
    else 
    {     
     	existEntry = cdr[key];
     	
     	countCdrsTGC(eggsn, existEntry) ;
 					
 		removeM (cdr, key);
	    insertM( cdr, key, existEntry);
    }
}

TavGgsn initEmptyEndRopTupleTav() 
{
	mutable TavGgsn result = {};
	
	result.endROP = true;
	
	return result;
}