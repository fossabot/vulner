namespace com.ti.oss.common.cdr.sqm ;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

type SqmBroadGgsnApn = map<rstring, BroadGgsnApn>;
type SqmBroadGgsnApnNode = map<rstring, SqmBroadGgsnApn>;

public composite BroadBandGgsnApn(input stream<AggregateSqmSchema> eggsn, stream<rstring centrale,rstring apn> C; 
	output stream<BroadGgsnApn> outKpi1, OutEventKpi1, stream<CDRCounters> OutCounters)
{
	param
		expression<rstring> $tmpOutFilePrefix ;
		expression<rstring> $tmpOutFileSuffix ;
		expression<rstring> $mediationName ;
	
	graph
		(stream<BroadGgsnApn> outKpi1 as O ; stream<Event e> OutEventKpi1 as OE; stream<CDRCounters> OutCounters) = Custom(C;eggsn)
		{
			logic
				state :
				{
					rstring tmpOutFilePrefix = $tmpOutFilePrefix;
					rstring tmpOutFileSuffix = $tmpOutFileSuffix;
					rstring mediationName = $mediationName;
					
					mutable float64 startROPstate = 0 ;
					mutable float64 endROPstate = 0 ;
					mutable float64 startROPold = 0 ;
					mutable float64 endROPold = 0 ;
					boolean flagMediationCfg = loadMediationCfg(mediationName) ;
					mutable rstring nameOutputFilestate ;
					mutable rstring nameOutputFileOld ;
					mutable rstring path = getCfgParam("COMMON_CFG_DIR",mediationName,"SQM_APN_OUTPUT_PATH");
					mutable rstring filePrefix = getCfgParam("COMMON_CFG_DIR",mediationName,"FILE_PREFIX_BROAD_GGSN_APN");
					mutable rstring fileSuffix = getCfgParam("COMMON_CFG_DIR",mediationName,"FILE_SUFFIX");
					mutable rstring apn_list = getCfgParam("COMMON_CFG_DIR", mediationName, "APN_LIST") ;
					mutable int32 interval = (int32)getCfgParam("COMMON_CFG_DIR",mediationName,"ROP_INTERVAL_SQM");

					mutable SqmBroadGgsnApn CDRforBroadGgsnApn ;
					mutable SqmBroadGgsnApnNode SqmBroadGgsnNodeT ;
					mutable SqmBroadGgsnApnNode SqmBroadGgsnNodePrec ;
					mutable FileHeader fh = { } ;
					
					mutable set<rstring> listApn;
					mutable list<rstring> listCentrale;
					
					mutable O emptyEndRopTuple = initEmptyEndRopTupleApn();
					mutable OE oetuple = (OE){};
					
					mutable SqmBroadGgsnApn cdrApp = {};

//					// Conta tutti CDR per rATType
//					mutable uint64 cdrtotrattype = 0ul;
//					mutable uint64 cdrtotrattypeold = 0ul;
					
					// Conta i CDR corretti per questo KPI
					mutable uint64 cdrtot = 0ul;
					mutable uint64 cdrtotold = 0ul;
					
					// Conta i CDR scartati per il filtro impostato
					mutable uint64 cdrexclude1 = 0ul;
					mutable uint64 cdrexclude1old = 0ul;
					
					// Conta i CDR scartati esterni al ROP
					mutable uint64 cdrexclude2 = 0ul;
					mutable uint64 cdrexclude2old = 0ul;
				}

				
				onTuple C:
				{
					if (C.centrale == "CENTRALE")
					{
						clearM(listCentrale);
						clearM(listApn);
					}else{
						appendM(listCentrale, C.centrale);
						insertM(listApn, C.apn);
					}
				}
				
				onTuple eggsn :
				{					
					if (eggsn.endROP)
					{
						interval = checkConfiguration(mediationName,"ROP_INTERVAL_SQM",interval);
						path = checkConfiguration(mediationName,"SQM_APN_OUTPUT_PATH",path);
						filePrefix = checkConfiguration(mediationName,"FILE_PREFIX_BROAD_GGSN_APN",filePrefix);
						fileSuffix = checkConfiguration(mediationName,"FILE_SUFFIX",fileSuffix);
						apn_list = checkConfiguration(mediationName,"APN_LIST",apn_list);

						
						swap(SqmBroadGgsnNodeT,SqmBroadGgsnNodePrec);
						swap(cdrtot, cdrtotold);
						cdrtot = 0ul;
						swap(cdrexclude1, cdrexclude1old);
						cdrexclude1 = 0ul;
						swap(cdrexclude2, cdrexclude2old);
						cdrexclude2 = 0ul;
//						swap(cdrtotrattype, cdrtotrattypeold);
//						cdrtotrattype = 0ul;
						
						clearM(SqmBroadGgsnNodeT);
						startROPold = startROPstate;
						endROPold = endROPstate;
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
						nameOutputFileOld = nameOutputFilestate;
						
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
						
						mutable BroadGgsnApn entry = {};
						entry.nameOutputFile = nameOutputFilestate ;
						entry.filePrefix = filePrefix ;
						entry.suffix = fileSuffix ;
				    	entry.start_time = getUtilConvert((rstring)startROPstate); 
						entry.end_time = getUtilConvert((rstring)endROPstate);
						entry.downlink_post = (int64)0;
						entry.downlink_prep = (int64)0;
						
						for (int32 k in range(listCentrale))
						{	
							entry.ggsn_dn = listCentrale[k];
							for (rstring elem in listApn)
							{
								entry.apn_name = elem;
								insertM(CDRforBroadGgsnApn,elem,entry);
							}
							insertM(SqmBroadGgsnNodeT,listCentrale[k],CDRforBroadGgsnApn);
							
							clearM(CDRforBroadGgsnApn);
						}
					}
					
					if(startROPstate == (float64)0 || endROPstate == (float64)0)
					{
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
					}
					
					if(nameOutputFilestate == "")
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}
					
					if(eggsn.endROP)
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}					
					
					if (eggsn.write_prev)
					{
						if (eggsn.exclude_node == "")
						{
							mutable rstring filename_tmp = "";
							mutable rstring central_val="";
							
							if(size(SqmBroadGgsnNodePrec) != 0)
							{
								mutable list<rstring> keysTmp = [];
                   				for(rstring key in SqmBroadGgsnNodePrec) 
								{
									appendM(keysTmp, key);
								}
								for(rstring key in keysTmp)
								{
									swap(cdrApp, SqmBroadGgsnNodePrec[key]);
									for(rstring keyCdr in cdrApp) 
									{
										submit(cdrApp[keyCdr], outKpi1);
				                    }
				                    central_val = central_val + key + ";";	
								}
								
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpi1);									
							}
							else
							{
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpi1);
							}
							
							mutable rstring sr = "";
							mutable rstring er = "";
							if(startROPold != (float64)0 && endROPold != (float64)0)
							{
								sr = getUtilConvert((rstring)startROPold);
								er = getUtilConvert((rstring)endROPold);
							}
							else
							{
								sr = "0";
								er = "0";
							}
							submit({kpi = "BroadBandGgsnApn", ROP = sr + "-" + er, cdrtot = cdrtotold, cdrexclude1 = cdrexclude1old, cdrexclude2 = cdrexclude2old}, OutCounters);

							//clear statistics
//							cdrtotrattypeold = 0ul;
							cdrtotold = 0ul;
							cdrexclude1old = 0ul;
							cdrexclude2old = 0ul;
							
							clearM(SqmBroadGgsnNodePrec);
							clearM(cdrApp);
							startROPold = (float64)0;
							endROPold = (float64)0;

							nameOutputFileOld = "";
							oetuple.e.eventType = 190 ;
							oetuple.e.resultCode = 0 ;
							oetuple.e.rawFile = filename_tmp ;
							swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
		                    swap(oetuple.e.rop, fh.rop);
		                    swap(oetuple.e.emId, fh.emId);
		                    swap(oetuple.e.neId, fh.neId);
							oetuple.e.eventText = "End write_prev close file " + filename_tmp + " for node: " + central_val;
							boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
							if(eventEnabled) submit(oetuple, OutEventKpi1) ;
						}
						else
						{
							if(has(SqmBroadGgsnNodePrec, eggsn.exclude_node) == true)
							{
								removeM (SqmBroadGgsnNodePrec, eggsn.exclude_node);
							}
						}
					}
					else if((eggsn.cdrSchema.rATType == 1 || eggsn.cdrSchema.rATType == 2) && !eggsn.endROP)
					{
						//cdrtotrattype++;
						
						fh = eggsn.fHeader;
						
						mutable list<rstring> apnL = tokenize(apn_list, ",", true);
						mutable boolean apn_in = false ;
						
						//appTrc(Trace.error, "APN  " + cleanApn(eggsn.cdrSchema.apn));
						
						for(int32 k in range(apnL))
						{
							if(apnL[k] == cleanApn(eggsn.cdrSchema.apn))
							{
								apn_in = true ;
								break ;
							}
						}
						
						mutable rstring datetmp = "20"+(rstring)substring(eggsn.cdrSchema.recordOpeningTime,0,12);
				        timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss,datetmp);
				        mutable float64 endTimeCDRfloat = getSeconds(ts) + (int64)eggsn.cdrSchema.duration;
				        
						if(apn_in)
						{
							mutable rstring chargingCharacteristicsTmp = substring(eggsn.cdrSchema.chargingCharacteristics, 0, 2);
							
							if(chargingCharacteristicsTmp == "00" ||
								chargingCharacteristicsTmp == "0A" ||
								chargingCharacteristicsTmp == "0B" ||
								chargingCharacteristicsTmp == "01" ||
								chargingCharacteristicsTmp == "02" ||
								chargingCharacteristicsTmp == "03" ||
								chargingCharacteristicsTmp == "04" ||
								chargingCharacteristicsTmp == "05" ||
								chargingCharacteristicsTmp == "06" ||
								chargingCharacteristicsTmp == "07" ||
								chargingCharacteristicsTmp == "09" 
							)
							{								
								
								mutable rstring centralName = eggsn.cdrSchema.nodeId; 
								mutable rstring key = cleanApn(eggsn.cdrSchema.apn) ;
								
								if((endTimeCDRfloat >= eggsn.startRopSecsOld) && (endTimeCDRfloat < eggsn.endRopSecsOld))


								{
									cdrtotold++;
									if(has(SqmBroadGgsnNodePrec, centralName) == true)
			                		{
			                			addCdrBBGA(eggsn,SqmBroadGgsnNodePrec[centralName],key,nameOutputFileOld,centralName,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);	
			                		}
			                		else
			                		{
			                			addCdrBBGA(eggsn,CDRforBroadGgsnApn,key,nameOutputFileOld,centralName,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
			                			insertM(SqmBroadGgsnNodePrec, centralName, CDRforBroadGgsnApn) ;
			                		}
								}
								else if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									cdrtot++;
									if(has(SqmBroadGgsnNodeT, centralName) == true)
					               	{
					               		addCdrBBGA(eggsn,SqmBroadGgsnNodeT[centralName],key,nameOutputFilestate,centralName,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
					               	} 
					               	else
					               	{
					               		addCdrBBGA(eggsn,CDRforBroadGgsnApn,key,nameOutputFilestate,centralName,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
										insertM(SqmBroadGgsnNodeT, centralName, CDRforBroadGgsnApn) ;
					               	}
								}
								else
								{									
									//exclude CDR fuori ROP
									cdrexclude2++;
								}
								
								clearM(cdrApp);
								clearM(CDRforBroadGgsnApn);
							}
							else 
							{
								if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									//exclude Filtro CDR in ROP
									cdrexclude1++;
								}
								else
								{
									//exclude Filtro CDR fuori ROP
									cdrexclude1old++;
								}
							}
							
						}
						else 
						{
							if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
							{
								//exclude Filtro CDR in ROP
								cdrexclude1++;
							}
							else
							{
								//exclude Filtro CDR fuori ROP
								cdrexclude1old++;
							}
						}
					}
			}
								
			onPunct eggsn :
			{
				if(currentPunct() == Sys.WindowMarker)
				{
					
					oetuple.e.eventType = 200 ;
					oetuple.e.resultCode = 0 ;
					oetuple.e.rawFile = filename(fh.fName) ;
					swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
                    swap(oetuple.e.rop, fh.rop);
                    swap(oetuple.e.emId, fh.emId);
                    swap(oetuple.e.neId, fh.neId);
					oetuple.e.eventText = "End Broadband Ggsn Apn SQM";
					boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
					if(eventEnabled) submit(oetuple, OutEventKpi1) ;
					
					submit(Sys.WindowMarker, OutEventKpi1) ;
				}

			}
			
			config
				threadedPort: queue(eggsn, Sys.Wait, 1000000);

		}

	
//		(stream<CsvWrite> outCsv) = Custom(outKpi1)
//		{
//			logic
//				state:
//				{
//					mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
//					mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
//					mutable CsvWrite csv = {};
//				}	
//				
//				onTuple outKpi1: 
//				{
//					swap(csv.nameOutputFile, outKpi1.nameOutputFile);
//					swap(csv.endROP, outKpi1.endROP);
//					swap(csv.filePrefix, outKpi1.filePrefix);
//					swap(csv.suffix, outKpi1.suffix);
//					
//					mutable rstring sqmDn = "";
//					if (outKpi1.ggsn_dn != "")
//					{
//						sqmDn = getSqmDn(outKpi1.ggsn_dn,flagNamingLookup);
//					}
//					if (sqmDn != "")
//					{
//						csv.outputContent = sqmDn+";"+"APN-"+outKpi1.apn_name+";"+outKpi1.start_time+";"+outKpi1.end_time+";"+(rstring)outKpi1.downlink_post+";"+(rstring)outKpi1.downlink_prep;
//					}else{
//						csv.outputContent = "";
//					}
//					
//				
//					submit(csv, outCsv);
//				} 
//				
//				onPunct outKpi1 :
//				{
//					if(currentPunct() == Sys.WindowMarker) {
//						submit(Sys.WindowMarker,outCsv);
//					}
//				}
//		}
	}


void countCdrsBBGA(AggregateSqmSchema eggsn1, mutable BroadGgsnApn aggrSQMtmp) 
{
   mutable rstring chargingCharacteristicsTmp = substring(eggsn1.cdrSchema.chargingCharacteristics, 0, 2);
   if((chargingCharacteristicsTmp == "00" ||
		chargingCharacteristicsTmp == "0A" ||
		chargingCharacteristicsTmp == "0B")){
	
		for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
		{
			aggrSQMtmp.downlink_post = aggrSQMtmp.downlink_post + (int64)eggsn1.cdrSchema.datavolumeFBCDownlink[i];
		}	
	}else if ((chargingCharacteristicsTmp == "01" ||
				chargingCharacteristicsTmp == "02" ||
				chargingCharacteristicsTmp == "03" ||
				chargingCharacteristicsTmp == "04" ||
				chargingCharacteristicsTmp == "05" ||
				chargingCharacteristicsTmp == "06" ||
				chargingCharacteristicsTmp == "07" ||
				chargingCharacteristicsTmp == "09" ))
	{
		for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
		{
			aggrSQMtmp.downlink_prep = aggrSQMtmp.downlink_prep + (int64)eggsn1.cdrSchema.datavolumeFBCDownlink[i];
		}
	}
}

rstring getSqmDn(rstring nodeId, boolean flagNamingLookup)
{
	mutable list<rstring> tmpOutParamMapNAMINGLOOKUP = [];
	mutable rstring sqmDn = "";
	if (flagNamingLookup)
	{
		if ( getCdrProvRecord("NAMINGLOOKUP", nodeId, tmpOutParamMapNAMINGLOOKUP ) )
		{   
			sqmDn = tmpOutParamMapNAMINGLOOKUP[0];
		}
	}
	else
	{
		appTrc(Trace.error, "File NAMING_LOOKUP.csv non caricato correttamente ");
	}
	
	return sqmDn;
}


void addCdrBBGA(AggregateSqmSchema eggsn, mutable SqmBroadGgsnApn cdr, rstring key, rstring nameOutputFile, rstring centralName, rstring filePrefix, rstring fileSuffix, float64 startROP, float64 endROP)
{
	mutable BroadGgsnApn firstEntry = {};
	mutable BroadGgsnApn existEntry = {};
	
	if(has(cdr, key) == false) 
    {   
    	firstEntry.nameOutputFile = nameOutputFile; 
		firstEntry.filePrefix = filePrefix;
		firstEntry.suffix = fileSuffix;									
										
    	firstEntry.ggsn_dn = centralName;
		firstEntry.apn_name = cleanApn(eggsn.cdrSchema.apn);
		firstEntry.start_time = getUtilConvert((rstring)startROP); 
		firstEntry.end_time = getUtilConvert((rstring)endROP);
		countCdrsBBGA(eggsn, firstEntry) ;
		insertM(cdr, key, firstEntry) ;
    }  
    else 
    {     
     	existEntry = cdr[key];
     	
     	countCdrsBBGA(eggsn, existEntry) ;
 					
 		removeM (cdr, key);
	    insertM( cdr, key, existEntry);
    }
}


BroadGgsnApn initEmptyEndRopTupleApn() 
{
	mutable BroadGgsnApn result = {};
	
	result.endROP = true;
	
	return result;
}