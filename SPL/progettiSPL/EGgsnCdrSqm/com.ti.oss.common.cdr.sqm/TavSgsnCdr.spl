namespace com.ti.oss.common.cdr.sqm ;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

type SqmTavSgsn = map<rstring, TavSgsn>;
type SqmTavSgsnNode = map<rstring, SqmTavSgsn>;

public composite TavSgsnCdr(input stream<AggregateSqmSchema> eggsn ; output
	stream<CsvWrite> outCsv5, OutEventKpi5, stream<CDRCounters> OutCounters)
{
	param
		expression<rstring> $tmpOutFilePrefix ;
		expression<rstring> $tmpOutFileSuffix ;
		expression<rstring> $mediationName ;
	graph
		(stream<TavSgsn> outKpi5 as O ; stream<Event e> OutEventKpi5 as OE; stream<CDRCounters> OutCounters) = Custom(eggsn)
		{
			logic
				state :
				{
					rstring tmpOutFilePrefix = $tmpOutFilePrefix;
					rstring tmpOutFileSuffix = $tmpOutFileSuffix;
					rstring mediationName = $mediationName;
					
					mutable float64 startROPstate = 0 ;
					mutable float64 endROPstate = 0 ;
					mutable float64 startROPold = 0 ;
					mutable float64 endROPold = 0 ;
					boolean flagMediationCfg = loadMediationCfg(mediationName) ;
					mutable rstring nameOutputFilestate ;
					mutable rstring nameOutputFileOld ;
					mutable rstring path = getCfgParam("COMMON_CFG_DIR", mediationName, "SQM_TAV_SGSN_PATH") ;
					mutable rstring filePrefix = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_PREFIX_TAV_SGSN") ;
					mutable rstring fileSuffix = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_SUFFIX") ;
					mutable int32 interval = (int32)getCfgParam("COMMON_CFG_DIR",mediationName,"ROP_INTERVAL_SQM");
					mutable SqmTavSgsn CDRforTavSgsn ;
					mutable SqmTavSgsnNode SqmTavSgsnNodeT ;
					mutable SqmTavSgsnNode SqmTavSgsnNodePrec ;
					mutable FileHeader fh = { } ;
					
					mutable O emptyEndRopTuple = initEmptyEndRopTupleTavS();
					mutable OE oetuple = (OE){};
					
					mutable SqmTavSgsn cdrApp = {};
					
//					// Conta tutti CDR per rATType
//					mutable uint64 cdrtotrattype = 0ul;
//					mutable uint64 cdrtotrattypeold = 0ul;
//					
					// Conta i CDR corretti per questo KPI
					mutable uint64 cdrtot = 0ul;
					mutable uint64 cdrtotold = 0ul;
					
					// Conta i CDR scartati per il filtro impostato
					mutable uint64 cdrexclude1 = 0ul;
					mutable uint64 cdrexclude1old = 0ul;
					
					// Conta i CDR scartati esterni al ROP
					mutable uint64 cdrexclude2 = 0ul;
					mutable uint64 cdrexclude2old = 0ul;
				}

				onTuple eggsn :
				{
					if(eggsn.endROP)
					{
						interval = checkConfiguration(mediationName,"ROP_INTERVAL_SQM",interval);
						path = checkConfiguration(mediationName, "SQM_TAV_SGSN_PATH", path) ;
						filePrefix = checkConfiguration(mediationName, "FILE_PREFIX_TAV_SGSN", filePrefix) ;
						fileSuffix = checkConfiguration(mediationName, "FILE_SUFFIX", fileSuffix) ;

						swap(SqmTavSgsnNodeT,SqmTavSgsnNodePrec);
						swap(cdrtot, cdrtotold);
						cdrtot = 0ul;
						swap(cdrexclude1, cdrexclude1old);
						cdrexclude1 = 0ul;
						swap(cdrexclude2, cdrexclude2old);
						cdrexclude2 = 0ul;
//						swap(cdrtotrattype, cdrtotrattypeold);
//						cdrtotrattype = 0ul;

						clearM(SqmTavSgsnNodeT);
						startROPold = startROPstate;
						endROPold = endROPstate;
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
						nameOutputFileOld = nameOutputFilestate;
					}
					
					if(startROPstate == (float64)0 || endROPstate == (float64)0)
					{
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
					}
					
					if(nameOutputFilestate == "")
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}
					
					if(eggsn.endROP)
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}
					
					if(eggsn.write_prev)
					{
						if (eggsn.exclude_node == "")
						{
							mutable rstring filename_tmp = "";
							if(size(SqmTavSgsnNodePrec) != 0)
							{
		                		aggregateTavSgsn(SqmTavSgsnNodePrec, CDRforTavSgsn, cdrApp);
                   				
		                		for(rstring key in CDRforTavSgsn)
								{
									submit(CDRforTavSgsn[key], outKpi5);
								}                   				
							
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpi5);	
							}
							else
							{
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpi5);
							}
							
							mutable rstring sr = "";
							mutable rstring er = "";
							if(startROPold != (float64)0 && endROPold != (float64)0)
							{
								sr = getUtilConvert((rstring)startROPold);
								er = getUtilConvert((rstring)endROPold);
							}
							else
							{
								sr = "0";
								er = "0";
							}
							submit({kpi = "TavSgsnCdr", ROP = sr + "-" + er, cdrtot = cdrtotold, cdrexclude1 = cdrexclude1old, cdrexclude2 = cdrexclude2old}, OutCounters);
							
							//clear statistics
							//cdrtotrattypeold = 0ul;
							cdrtotold = 0ul;
							cdrexclude1old = 0ul;
							cdrexclude2old = 0ul;
							
							clearM(SqmTavSgsnNodePrec);
							clearM(cdrApp);
							clearM(CDRforTavSgsn);
							
							startROPold = (float64)0;
							endROPold = (float64)0;
							nameOutputFileOld = "";
							
							oetuple.e.eventType = 190 ;
							oetuple.e.resultCode = 0 ;
							oetuple.e.rawFile = filename_tmp ;
							swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
		                    swap(oetuple.e.rop, fh.rop);
		                    swap(oetuple.e.emId, fh.emId);
		                    swap(oetuple.e.neId, fh.neId);
							oetuple.e.eventText = "End write_prev close file " + filename_tmp;
							boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
							if(eventEnabled) submit(oetuple, OutEventKpi5) ;
						}
						else
						{
							if(has(SqmTavSgsnNodePrec, eggsn.exclude_node) == true)
							{
								removeM(SqmTavSgsnNodePrec, eggsn.exclude_node) ;
							}
						}
					}
					else if(!eggsn.endROP)
					{
						fh = eggsn.fHeader ;
						
						if(eggsn.cdrSchema.rATType == 1) 
						{
							//cdrtotrattype++;
							
							mutable rstring datetmp = "20" +(rstring)substring(eggsn.cdrSchema.recordOpeningTime, 0, 12) ;
							timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss, datetmp) ;
							mutable float64 endTimeCDRfloat = getSeconds(ts) +(int64)eggsn.cdrSchema.duration ;
							
							if(cleanApn(eggsn.cdrSchema.apn) == "intrainwifi.tim.it")
							{
								if (size(eggsn.cdrSchema.servingNodeAddress)>0)
								{		
									mutable rstring centralName = eggsn.cdrSchema.nodeId;
									mutable rstring sgsn = eggsn.cdrSchema.servingNodeAddress[0];
									mutable rstring key = sgsn;
									
									if((endTimeCDRfloat >= eggsn.startRopSecsOld) && (endTimeCDRfloat < eggsn.endRopSecsOld))
									{
										cdrtotold++;
										if(has(SqmTavSgsnNodePrec, centralName) == true)
				                		{	
				                			addCdrTSC(eggsn,SqmTavSgsnNodePrec[centralName],key,nameOutputFileOld,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
				                		}else{
				                			addCdrTSC(eggsn,CDRforTavSgsn,key,nameOutputFileOld,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
				                			insertM(SqmTavSgsnNodePrec, centralName, CDRforTavSgsn) ;
				                		}
									}
									else if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
									{
										cdrtot++;
										if(has(SqmTavSgsnNodeT, centralName) == true)
					                	{
					                		addCdrTSC(eggsn,SqmTavSgsnNodeT[centralName],key,nameOutputFilestate,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
					                	}else{
					                		addCdrTSC(eggsn,CDRforTavSgsn,key,nameOutputFilestate,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
					                		insertM(SqmTavSgsnNodeT, centralName, CDRforTavSgsn) ;
					                	}
									}
									else
									{
										//exclude CDR fuori ROP
										cdrexclude2++;
									}
									
									clearM(cdrApp);
									clearM(CDRforTavSgsn);
								}
								else 
								{	
									if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
									{
										//exclude Filtro CDR in ROP
										cdrexclude1++;
									}
									else
									{
										//exclude Filtro CDR fuori ROP
										cdrexclude1old++;
									}
								}
							}
							else 
							{		
								if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									//exclude Filtro CDR in ROP
									cdrexclude1++;
								}
								else
								{
									//exclude Filtro CDR fuori ROP
									cdrexclude1old++;
								}
							}
						}
					}
				}

				onPunct eggsn :
				{
					if(currentPunct() == Sys.WindowMarker)
					{
						oetuple.e.eventType = 200 ;
						oetuple.e.resultCode = 0 ;
						oetuple.e.rawFile = filename(fh.fName) ;
						swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
	                    swap(oetuple.e.rop, fh.rop);
	                    swap(oetuple.e.emId, fh.emId);
	                    swap(oetuple.e.neId, fh.neId);
						oetuple.e.eventText = "End Tav Sgsn SQM";
						boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
						if(eventEnabled) submit(oetuple, OutEventKpi5) ;
						
						submit(Sys.WindowMarker, OutEventKpi5) ;
					}

				}
			config
				threadedPort: queue(eggsn, Sys.Wait, 1000000);

			}

		stream<CsvWrite> outCsv5 = Custom(outKpi5)
			{
				logic
					
					state:
					{
						mutable rstring sgsn_ip_name = getCfgParam("COMMON_CFG_DIR",$mediationName,"SGSN_IP_NAME");
						mutable boolean flagSgsnIpName = loadCdrProvCfg("SGSNIPNAME",sgsn_ip_name, (uint32)1,",");//SGSNADDRESS
				
						mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
						mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
				
					}
					
					onTuple outKpi5 :
					{
						if (outKpi5.endROP)
						{
							if (isCdrProvCfgChanged("SGSNIPNAME"))
							{
								reloadCdrProvCfg("SGSNIPNAME");
							}
							
							if (isCdrProvCfgChanged("NAMINGLOOKUP"))
							{
								reloadCdrProvCfg("NAMINGLOOKUP");
							}
						}
						
						mutable CsvWrite csv = { } ;
						csv.nameOutputFile = outKpi5.nameOutputFile ;
						csv.endROP = outKpi5.endROP ;
						csv.filePrefix = outKpi5.filePrefix ;
						csv.suffix = outKpi5.suffix ;
						
						mutable rstring sqmDn = ""; 
						if (outKpi5.sgsn_dn != "")
						{
							sqmDn = getSqmDn(getSgsnName(outKpi5.sgsn_dn,flagSgsnIpName),flagNamingLookup);
						}
						if(sqmDn!="")
						{
							csv.outputContent = sqmDn+";"+outKpi5.start_time+";"+outKpi5.end_time+";"+(rstring)outKpi5.tav_bb_downlink;
						}else{
							csv.outputContent = "";
						}
						
						submit(csv, outCsv5) ;
					}
					
					onPunct outKpi5 :
					{
						if(currentPunct() == Sys.WindowMarker) {
							submit(Sys.WindowMarker,outCsv5);
						}
					}

			}

	}
	
void countCdrsTSC(AggregateSqmSchema eggsn1, mutable TavSgsn aggrSQMtmp) 
{
    if(cleanApn(eggsn1.cdrSchema.apn) == "intrainwifi.tim.it" && eggsn1.cdrSchema.rATType == 1){
	
		for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
		{
			aggrSQMtmp.tav_bb_downlink = aggrSQMtmp.tav_bb_downlink + (int64)eggsn1.cdrSchema.datavolumeFBCDownlink[i];
		}	
	}
}

void addCdrTSC(AggregateSqmSchema eggsn, mutable SqmTavSgsn cdr, rstring key, rstring nameOutputFile, rstring filePrefix, rstring fileSuffix, float64 startROP, float64 endROP)
{
	mutable TavSgsn firstEntry = {};
	mutable TavSgsn existEntry = {};
	
	if(has(cdr, key) == false) 
    {   
    	firstEntry.nameOutputFile = nameOutputFile ;
		firstEntry.filePrefix = filePrefix ;
		firstEntry.suffix = fileSuffix ;
		
    	if (size(eggsn.cdrSchema.servingNodeAddress)>0)
    	{
    		firstEntry.sgsn_dn = eggsn.cdrSchema.servingNodeAddress[0];
    	}
		firstEntry.start_time = getUtilConvert((rstring)startROP); 
		firstEntry.end_time = getUtilConvert((rstring)endROP);
		countCdrsTSC(eggsn, firstEntry) ;
		insertM(cdr, key, firstEntry) ;
    }  
    else 
    {     
     	existEntry = cdr[key];
     	
     	countCdrsTSC(eggsn, existEntry) ;
 					
 		removeM (cdr, key);
	    insertM( cdr, key, existEntry);
    }
}

TavSgsn initEmptyEndRopTupleTavS() 
{
	mutable TavSgsn result = {};
	
	result.endROP = true;
	
	return result;
}

void aggregateTavSgsn(mutable SqmTavSgsnNode sqmTavSgsnNode, mutable SqmTavSgsn sqmTavSgsn, mutable SqmTavSgsn cdrApp)
{
	mutable list<rstring> keysTmp = [];
	for(rstring key in sqmTavSgsnNode) 
	{
		appendM(keysTmp, key);
	}
	for(rstring key in keysTmp)
	{
		swap(cdrApp, sqmTavSgsnNode[key]);
		for(rstring keyCdr in cdrApp) 
		{	
			if(has(sqmTavSgsn, keyCdr))
			{
				sqmTavSgsn[keyCdr].tav_bb_downlink = sqmTavSgsn[keyCdr].tav_bb_downlink + cdrApp[keyCdr].tav_bb_downlink;
    		}
        	else
        	{
        		insertM(sqmTavSgsn, keyCdr, cdrApp[keyCdr]);
        	}
        }
	}
	clearM(keysTmp);
	clearM(cdrApp);
}