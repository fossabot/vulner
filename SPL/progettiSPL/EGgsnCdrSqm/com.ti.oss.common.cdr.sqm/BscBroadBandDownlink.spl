namespace com.ti.oss.common.cdr.sqm ;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.time::*;

type SqmBscBroadDownlink = map<rstring, BscBroadDownlink>;
type SqmBscBroadDownlinkNode = map<rstring, SqmBscBroadDownlink>;

public composite BscBroadBandDownlink(input stream<AggregateSqmSchema> eggsn, stream<rstring bsc> B, stream<rstring centrale> E ;
	output stream<BscBroadDownlink> outKpiBsc, OutEventKpi6, stream<CDRCounters> OutCounters)
{
	param
		expression<rstring> $tmpOutFilePrefix ;
		expression<rstring> $tmpOutFileSuffix ;
		expression<rstring> $mediationName ;
	graph
		
		
		(stream<BscBroadDownlink> outKpiBsc as O ; stream<Event e> OutEventKpi6 as OE; stream<CDRCounters> OutCounters) = Custom(E;B;eggsn)
		{
			logic
				state :
				{
					rstring tmpOutFilePrefix = $tmpOutFilePrefix;
					rstring tmpOutFileSuffix = $tmpOutFileSuffix;
					rstring mediationName = $mediationName;
					
					mutable float64 startROPstate = 0 ;
					mutable float64 endROPstate = 0 ;
					mutable float64 startROPold = 0 ;
					mutable float64 endROPold = 0 ;
					boolean flagMediationCfg = loadMediationCfg(mediationName) ;
					mutable rstring nameOutputFilestate ;
					mutable rstring nameOutputFileOld ;
					mutable rstring path = getCfgParam("COMMON_CFG_DIR", mediationName,"SQM_BSC_DOWNLINK_PATH") ;
					mutable rstring filePrefix = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_PREFIX_BSC_BROAD_DOWNLINK") ;
					mutable rstring fileSuffix = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_SUFFIX") ;
					mutable int32 interval = (int32)getCfgParam("COMMON_CFG_DIR",mediationName,"ROP_INTERVAL_SQM");
					mutable rstring msc_cgi = getCfgParam("COMMON_CFG_DIR",mediationName,"MSC_CGI");
					mutable boolean flagMscCgi = loadCdrProvCfg("MSCCGI",msc_cgi, (uint32)0, ",");//CGI
					mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
					mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
					mutable SqmBscBroadDownlink CDRforBscBroadDownlink ;
					mutable SqmBscBroadDownlinkNode SqmBscBroadDownlinkNodeT ;
					mutable SqmBscBroadDownlinkNode SqmBscBroadDownlinkNodePrec ;
					mutable FileHeader fh = { } ;
					
					mutable set<rstring> listBsc;
					mutable list<rstring> listCentrale;
					
					mutable O emptyEndRopTuple = initEmptyEndRopTupleBsc();
					mutable OE oetuple = (OE){};
					
					mutable SqmBscBroadDownlink cdrApp = {};
//					
//					// Conta tutti CDR per rATType
//					mutable uint64 cdrtotrattype = 0ul;
//					mutable uint64 cdrtotrattypeold = 0ul;
					
					// Conta i CDR corretti per questo KPI
					mutable uint64 cdrtot = 0ul;
					mutable uint64 cdrtotold = 0ul;
					
					// Conta i CDR scartati per il filtro impostato
					mutable uint64 cdrexclude1 = 0ul;
					mutable uint64 cdrexclude1old = 0ul;
					
					// Conta i CDR scartati esterni al ROP
					mutable uint64 cdrexclude2 = 0ul;
					mutable uint64 cdrexclude2old = 0ul;
				}

				
				onTuple B:
				{
					if (B.bsc == "BSC")
					{
						clearM(listBsc);
					}else{
						
						insertM(listBsc, B.bsc);
					}
				}
				
				
				onTuple E:
				{
					mutable list<rstring> rete = tokenize(E.centrale, ",", true);
					mutable rstring centrale = regexReplace(rete[1],"\n","",true);
					centrale = regexReplace(centrale,"\r","",true);
					
					if (centrale == "CENTRALE")
					{
						clearM(listCentrale);
					}else{
						appendM(listCentrale, centrale);
					}
				}
				
				onTuple eggsn :
				{
					if(eggsn.endROP)
					{
						interval = checkConfiguration(mediationName,"ROP_INTERVAL_SQM",interval);
						path = checkConfiguration(mediationName, "SQM_BSC_DOWNLINK_PATH", path) ;
						filePrefix = checkConfiguration(mediationName, "FILE_PREFIX_BSC_BROAD_DOWNLINK", filePrefix) ;
						fileSuffix = checkConfiguration(mediationName, "FILE_SUFFIX", fileSuffix) ;
						
						if (isCdrProvCfgChanged("MSCCGI"))
						{
							reloadCdrProvCfg("MSCCGI");
						}
						if (isCdrProvCfgChanged("NAMINGLOOKUP"))
						{
							reloadCdrProvCfg("NAMINGLOOKUP");
						}

						swap(SqmBscBroadDownlinkNodeT,SqmBscBroadDownlinkNodePrec);
						swap(cdrtot, cdrtotold);
						cdrtot = 0ul;
						swap(cdrexclude1, cdrexclude1old);
						cdrexclude1 = 0ul;
						swap(cdrexclude2, cdrexclude2old);
						cdrexclude2 = 0ul;
//						swap(cdrtotrattype, cdrtotrattypeold);
//						cdrtotrattype = 0ul;
						
						clearM(SqmBscBroadDownlinkNodeT);
						startROPold = startROPstate;
						endROPold = endROPstate;
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
						nameOutputFileOld = nameOutputFilestate;
						
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix;
						
						mutable BscBroadDownlink entry = {};
						entry.nameOutputFile = nameOutputFilestate ;
						entry.filePrefix = filePrefix ;
						entry.suffix = fileSuffix ;
				    	entry.start_time = getUtilConvert((rstring)startROPstate); 
						entry.end_time = getUtilConvert((rstring)endROPstate);
						entry.bb_bsc_downlink = (int64)0;
						
						for (rstring elem in listBsc)
						{	
							entry.bsc = elem;
							insertM(CDRforBscBroadDownlink,elem,entry);
							for (int32 k in range(listCentrale))
							{
								insertM(SqmBscBroadDownlinkNodeT,listCentrale[k],CDRforBscBroadDownlink);
							}	 
						}
						clearM(CDRforBscBroadDownlink);
					}
					
					if(startROPstate == (float64)0 || endROPstate == (float64)0)
					{
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
					}
					
					if(nameOutputFilestate == "")
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}
					
					if(eggsn.endROP)
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}

					if(eggsn.write_prev)
					{
					
						if (eggsn.exclude_node == "")
						{
							mutable rstring filename_tmp = "";
							mutable rstring central_val="";
							if(size(SqmBscBroadDownlinkNodePrec) != 0)
							{
		                		
		                		aggregateBscDownlink(SqmBscBroadDownlinkNodePrec, CDRforBscBroadDownlink, cdrApp);
                   				
		                		for(rstring key in CDRforBscBroadDownlink)
								{
									submit(CDRforBscBroadDownlink[key], outKpiBsc);
									central_val = central_val + key + ";";
								}
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpiBsc);
							}
							else
							{
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpiBsc);
							}
							
							mutable rstring sr = "";
							mutable rstring er = "";
							if(startROPold != (float64)0 && endROPold != (float64)0)
							{
								sr = getUtilConvert((rstring)startROPold);
								er = getUtilConvert((rstring)endROPold);
							}
							else
							{
								sr = "0";
								er = "0";
							}
							submit({kpi = "BscBroadBandDownlink", ROP = sr + "-" + er, cdrtot = cdrtotold, cdrexclude1 = cdrexclude1old, cdrexclude2 = cdrexclude2old}, OutCounters);
							
							//clear statistics
							//cdrtotrattypeold = 0ul;
							cdrtotold = 0ul;
							cdrexclude1old = 0ul;
							cdrexclude2old = 0ul;							
							
							clearM(SqmBscBroadDownlinkNodePrec);
							clearM(cdrApp);
							clearM(CDRforBscBroadDownlink);
							
							startROPold = (float64)0;
							endROPold = (float64)0;
							nameOutputFileOld = "";
							
							oetuple.e.eventType = 190 ;
							oetuple.e.resultCode = 0 ;
							oetuple.e.rawFile = filename_tmp ;
							swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
		                    swap(oetuple.e.rop, fh.rop);
		                    swap(oetuple.e.emId, fh.emId);
		                    swap(oetuple.e.neId, fh.neId);
							oetuple.e.eventText = "End write_prev close file " + filename_tmp + " for node: "+central_val;
							boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
							if(eventEnabled) submit(oetuple, OutEventKpi6) ;
						}
						else
						{
							if(has(SqmBscBroadDownlinkNodePrec, eggsn.exclude_node) == true)
							{
								removeM (SqmBscBroadDownlinkNodePrec, eggsn.exclude_node);
							}
						}
					}

					else if(!eggsn.endROP)
					{
						fh = eggsn.fHeader ;
							
						mutable rstring cgi = transformUserLocalInfo(eggsn.cdrSchema.userLocationInformation);
						
						mutable rstring bsc = "";					
						mutable list<rstring> tmpOutParamMapMSCCGI = [];
						if ( getCdrProvRecord("MSCCGI", cgi, tmpOutParamMapMSCCGI ) )
						{   
							bsc = tmpOutParamMapMSCCGI[8];//BSC
						}
						mutable rstring sqmDn = "";
						if (bsc!="")
						{
							sqmDn = getSqmDn(bsc,flagNamingLookup);
						}
						
						mutable rstring datetmp = "20" +(rstring)substring(eggsn.cdrSchema.recordOpeningTime, 0, 12) ;
						timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss, datetmp) ;
						mutable float64 endTimeCDRfloat = getSeconds(ts) +(int64)eggsn.cdrSchema.duration ;									
					
						if (sqmDn!="")
						{										
							mutable rstring centralName = eggsn.cdrSchema.nodeId;
							mutable rstring key = sqmDn ;

							if((endTimeCDRfloat >= eggsn.startRopSecsOld) && (endTimeCDRfloat < eggsn.endRopSecsOld))
							{
								cdrtotold++;
								if(has(SqmBscBroadDownlinkNodePrec, centralName) == true)
		                		{	
		                			addCdrBBBD(eggsn,SqmBscBroadDownlinkNodePrec[centralName],key,nameOutputFileOld,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
		                		}else{
		                			addCdrBBBD(eggsn,CDRforBscBroadDownlink,key,nameOutputFileOld,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
		                			insertM(SqmBscBroadDownlinkNodePrec, centralName, CDRforBscBroadDownlink) ;
		                		}
							}
							else if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
							{
								cdrtot++;
								if(has(SqmBscBroadDownlinkNodeT, centralName) == true)
			                	{
			                		addCdrBBBD(eggsn,SqmBscBroadDownlinkNodeT[centralName],key,nameOutputFilestate,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
			                	}else{
			                		addCdrBBBD(eggsn,CDRforBscBroadDownlink,key,nameOutputFilestate,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
			                		insertM(SqmBscBroadDownlinkNodeT, centralName, CDRforBscBroadDownlink) ;
			                	}
							}
							else
							{
								//exclude CDR fuori ROP
								cdrexclude2++;
							}
							
							clearM(cdrApp);
							clearM(CDRforBscBroadDownlink);
						}
						else 
						{	
							if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
							{
								//exclude Filtro CDR in ROP
								cdrexclude1++;
							}
							else
							{
								//exclude Filtro CDR fuori ROP
								cdrexclude1old++;
							}
						}
						

					}

				}

				onPunct eggsn :
				{
					if(currentPunct() == Sys.WindowMarker)
					{
						oetuple.e.eventType = 200 ;
						oetuple.e.resultCode = 0 ;
						oetuple.e.rawFile = filename(fh.fName) ;
						swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
	                    swap(oetuple.e.rop, fh.rop);
	                    swap(oetuple.e.emId, fh.emId);
	                    swap(oetuple.e.neId, fh.neId);
						oetuple.e.eventText = "End Broadband 2G Bsc SQM";
						boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
						if(eventEnabled) submit(oetuple, OutEventKpi6) ;
						
						submit(Sys.WindowMarker, OutEventKpi6) ;
					}

				}
			
			config
				threadedPort: queue(eggsn, Sys.Wait, 1000000);

			}

//		stream<CsvWrite> outCsv6 = Custom(outKpiBsc)
//		{
//			logic
//				state:
//				{
//					mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
//					mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
//				}
//				
//				
//				onTuple outKpiBsc :
//				{
//					if (outKpiBsc.endROP)
//					{
//						if (isCdrProvCfgChanged("NAMINGLOOKUP"))
//						{
//							reloadCdrProvCfg("NAMINGLOOKUP");
//						}
//					}
//					
//					mutable CsvWrite csv = { } ;
//					csv.nameOutputFile = outKpiBsc.nameOutputFile ;
//					csv.endROP = outKpiBsc.endROP ;
//					csv.filePrefix = outKpiBsc.filePrefix ;
//					csv.suffix = outKpiBsc.suffix ;
//					
//					mutable rstring sqmDn = "";
//					if (outKpiBsc.bsc != "")
//					{
//						sqmDn = getSqmDn(outKpiBsc.bsc,flagNamingLookup);
//					}
//					if(sqmDn != "")
//					{
//						csv.outputContent = sqmDn+";"+outKpiBsc.start_time+";"+outKpiBsc.end_time+";"+(rstring)outKpiBsc.bb_bsc_downlink;	
//					}else{
//						csv.outputContent = "";
//					}
//					
//					submit(csv, outCsv6) ;
//				}
//				onPunct outKpiBsc :
//				{
//					if(currentPunct() == Sys.WindowMarker) {
//						submit(Sys.WindowMarker,outCsv6);
//					}
//				}
//
//		}

	}

void countCdrsBBBD(AggregateSqmSchema eggsn1, mutable BscBroadDownlink aggrSQMtmp) 
{
   if(eggsn1.cdrSchema.rATType == 2){
	
		for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
		{
			aggrSQMtmp.bb_bsc_downlink = aggrSQMtmp.bb_bsc_downlink + (int64)eggsn1.cdrSchema.datavolumeFBCDownlink[i];
		}	
	}
}

void addCdrBBBD(AggregateSqmSchema eggsn, mutable SqmBscBroadDownlink cdr, rstring key, rstring nameOutputFile, rstring filePrefix, rstring fileSuffix, float64 startROP, float64 endROP)
{
	mutable BscBroadDownlink firstEntry = {};
	mutable BscBroadDownlink existEntry = {};
	
	if(has(cdr, key) == false) 
    {   
    	firstEntry.nameOutputFile = nameOutputFile ;
		firstEntry.filePrefix = filePrefix ;
		firstEntry.suffix = fileSuffix ;
    	firstEntry.bsc = key;
		firstEntry.start_time = getUtilConvert((rstring)startROP); 
		firstEntry.end_time = getUtilConvert((rstring)endROP);
		countCdrsBBBD(eggsn, firstEntry) ;
		insertM(cdr, key, firstEntry) ;
    }  
    else 
    {     
     	existEntry = cdr[key];
     	
     	countCdrsBBBD(eggsn, existEntry) ;
 					
 		removeM (cdr, key);
	    insertM( cdr, key, existEntry);
    }
}

BscBroadDownlink initEmptyEndRopTupleBsc() 
{
	mutable BscBroadDownlink result = {};
	
	result.endROP = true;
	
	return result;
}

void aggregateBscDownlink (mutable SqmBscBroadDownlinkNode sqmBscDownNode, mutable SqmBscBroadDownlink sqmBscDown, mutable SqmBscBroadDownlink cdrApp)
{
	mutable list<rstring> keysTmp = [];
	for(rstring key in sqmBscDownNode) 
	{
		appendM(keysTmp, key);
	}
	for(rstring key in keysTmp)
	{
		swap(cdrApp, sqmBscDownNode[key]);
		for(rstring keyCdr in cdrApp) 
		{	
			if(has(sqmBscDown, keyCdr))
			{
				if (cdrApp[keyCdr].bb_bsc_downlink!=(int64)-1 && sqmBscDown[keyCdr].bb_bsc_downlink!=(int64)-1)
				{
					sqmBscDown[keyCdr].bb_bsc_downlink = sqmBscDown[keyCdr].bb_bsc_downlink + cdrApp[keyCdr].bb_bsc_downlink;
				}
    		}
        	else
        	{
        		insertM(sqmBscDown, keyCdr, cdrApp[keyCdr]);
        	}
        }
	}
	clearM(keysTmp);
	clearM(cdrApp);
}