namespace com.ti.oss.common.cdr.sqm ;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

type SqmBroadTacLte = map<rstring, BroadTacLte>;
type SqmBroadTacLtenNode = map<rstring, SqmBroadTacLte>;

public composite BroadBandTacLte(input stream<AggregateSqmSchema> eggsn, stream<rstring tac> T, stream<rstring centrale> E; 
	output stream<BroadTacLte> outKpiTacLte, OutEventKpiTacLte, stream<CDRCounters> OutCounters)
{
	param
		expression<rstring> $tmpOutFilePrefix ;
		expression<rstring> $tmpOutFileSuffix ;
		expression<rstring> $mediationName ;
	
	graph
		
		(stream<BroadTacLte> outKpiTacLte as O ; stream<Event e> OutEventKpiTacLte as OE; stream<CDRCounters> OutCounters) = 
		Custom(T;E;eggsn)
		{
			logic
				state :
				{
					rstring tmpOutFilePrefix = $tmpOutFilePrefix;
					rstring tmpOutFileSuffix = $tmpOutFileSuffix;
					rstring mediationName = $mediationName;
					
					mutable float64 startROPstate = 0 ;
					mutable float64 endROPstate = 0 ;
					mutable float64 startROPold = 0 ;
					mutable float64 endROPold = 0 ;
					boolean flagMediationCfg = loadMediationCfg(mediationName) ;
					mutable rstring nameOutputFilestate ;
					mutable rstring nameOutputFileOld ;
					mutable rstring path = getCfgParam("COMMON_CFG_DIR",mediationName,"SQM_TAC_LTE_OUTPUT_PATH");
					mutable rstring filePrefix = getCfgParam("COMMON_CFG_DIR",mediationName,"FILE_PREFIX_BROAD_TAC_LTE");
					mutable rstring fileSuffix = getCfgParam("COMMON_CFG_DIR",mediationName,"FILE_SUFFIX");
					mutable int32 interval = (int32)getCfgParam("COMMON_CFG_DIR",mediationName,"ROP_INTERVAL_SQM");
					mutable rstring ecgi = getCfgParam("COMMON_CFG_DIR", $mediationName, "ECGI");
					mutable boolean flagEcgi = loadCdrProvCfg("ECGI",ecgi, (uint32)0,",");//ECGI
					mutable SqmBroadTacLte CDRforBroadTacLte ;
					mutable SqmBroadTacLtenNode SqmBroadTacLteNodeT ;
					mutable SqmBroadTacLtenNode SqmBroadTacLteNodePrec ;
					mutable FileHeader fh = { } ;
					
					mutable set<rstring> listTac;
					mutable list<rstring> listCentrale;
					
					mutable O emptyEndRopTuple = initEmptyEndRopTupleTacLte();
					mutable OE oetuple = (OE){};
					
					mutable SqmBroadTacLte cdrApp = {};
					
//					// Conta tutti CDR per rATType
//					mutable uint64 cdrtotrattype = 0ul;
//					mutable uint64 cdrtotrattypeold = 0ul;
//					
					// Conta i CDR corretti per questo KPI
					mutable uint64 cdrtot = 0ul;
					mutable uint64 cdrtotold = 0ul;
					
					// Conta i CDR scartati per il filtro impostato
					mutable uint64 cdrexclude1 = 0ul;
					mutable uint64 cdrexclude1old = 0ul;
					
					// Conta i CDR scartati esterni al ROP
					mutable uint64 cdrexclude2 = 0ul;
					mutable uint64 cdrexclude2old = 0ul;
				}

				
				onTuple T:
				{
					if (T.tac == "TAC")
					{
						clearM(listTac);
					}else{
						
						insertM(listTac, T.tac);
					}
				}
				
				
				onTuple E:
				{
					mutable list<rstring> rete = tokenize(E.centrale, ",", true);
					mutable rstring centrale = regexReplace(rete[1],"\n","",true);
					centrale = regexReplace(centrale,"\r","",true);
					if (centrale == "CENTRALE")
					{
						clearM(listCentrale);
					}else{
						appendM(listCentrale, centrale);
					}
				}
				
				onTuple eggsn :
				{
					if (eggsn.endROP)
					{
						interval = checkConfiguration(mediationName,"ROP_INTERVAL_SQM",interval);
						path = checkConfiguration(mediationName,"SQM_TAC_LTE_OUTPUT_PATH",path);
						filePrefix = checkConfiguration(mediationName,"FILE_PREFIX_BROAD_TAC_LTE",filePrefix);
						fileSuffix = checkConfiguration(mediationName,"FILE_SUFFIX",fileSuffix);
						
						if (isCdrProvCfgChanged("ECGI"))
						{
							reloadCdrProvCfg("ECGI");
						}
						
						swap(SqmBroadTacLteNodeT,SqmBroadTacLteNodePrec);
						swap(cdrtot, cdrtotold);
						cdrtot = 0ul;
//						swap(cdrexclude1, cdrexclude1old);
//						cdrexclude1 = 0ul;
						swap(cdrexclude2, cdrexclude2old);
						cdrexclude2 = 0ul;
//						swap(cdrtotrattype, cdrtotrattypeold);
//						cdrtotrattype = 0ul;
						
						clearM(SqmBroadTacLteNodeT);
						startROPold = startROPstate;
						endROPold = endROPstate;
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
						nameOutputFileOld = nameOutputFilestate;
						
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix;
						
						mutable BroadTacLte entry = {};
						entry.nameOutputFile = nameOutputFilestate ;
						entry.filePrefix = filePrefix ;
						entry.suffix = fileSuffix ;
				    	entry.start_time = getUtilConvert((rstring)startROPstate); 
						entry.end_time = getUtilConvert((rstring)endROPstate);
						entry.downlink_tac_lte = (int64)0;
						entry.uplink_tac_lte = (int64)0;
						
						for (rstring elem in listTac)
						{	
							entry.tac = elem;
							insertM(CDRforBroadTacLte,elem,entry);
							for (int32 k in range(listCentrale))
							{
								insertM(SqmBroadTacLteNodeT,listCentrale[k],CDRforBroadTacLte);
							}	 
						}
						clearM(CDRforBroadTacLte);
					}
					
					if(startROPstate == (float64)0 || endROPstate == (float64)0)
					{
						startROPstate = eggsn.startRopSecs;
						endROPstate = eggsn.endRopSecs;
					}
					
					if(nameOutputFilestate == "")
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}
					
					if(eggsn.endROP)
					{
						nameOutputFilestate = path + tmpOutFilePrefix +(rstring) eggsn.endRopSecs + tmpOutFileSuffix ;
					}					
					
					if (eggsn.write_prev)
					{	
						if (eggsn.exclude_node == "")
						{
							mutable rstring filename_tmp = "";
							mutable rstring central_val="";
							if(size(SqmBroadTacLteNodePrec) != 0)
							{
								aggregateTac(SqmBroadTacLteNodePrec, CDRforBroadTacLte);
                   				
                   				for(rstring key in CDRforBroadTacLte)
								{
									submit(CDRforBroadTacLte[key], outKpiTacLte);
									central_val = central_val + key + ";";
								}
								
								clearM(CDRforBroadTacLte);
								
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpiTacLte);	
								
							}else{
								filename_tmp = nameOutputFileOld;
								emptyEndRopTuple.nameOutputFile = nameOutputFileOld;
								submit(emptyEndRopTuple, outKpiTacLte);
							}
							
							mutable rstring sr = "";
							mutable rstring er = "";
							if(startROPold != (float64)0 && endROPold != (float64)0)
							{
								sr = getUtilConvert((rstring)startROPold);
								er = getUtilConvert((rstring)endROPold);
							}
							else
							{
								sr = "0";
								er = "0";
							}
							submit({kpi = "BroadBandTacLte", ROP = sr + "-" + er, cdrtot = cdrtotold, cdrexclude1 = cdrexclude1old, cdrexclude2 = cdrexclude2old}, OutCounters);
							
							//clear statistics
							//cdrtotrattypeold = 0ul;
							cdrtotold = 0ul;
							cdrexclude1old = 0ul;
							cdrexclude2old = 0ul;
							
							clearM(SqmBroadTacLteNodePrec);
							clearM(CDRforBroadTacLte);
							startROPold = (float64)0;
							endROPold = (float64)0;
							nameOutputFileOld = "";
							oetuple.e.eventType = 190 ;
							oetuple.e.resultCode = 0 ;
							oetuple.e.rawFile = filename_tmp ;
							swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
		                    swap(oetuple.e.rop, fh.rop);
		                    swap(oetuple.e.emId, fh.emId);
		                    swap(oetuple.e.neId, fh.neId);
							oetuple.e.eventText = "End write_prev close file " + filename_tmp + " for node: "+central_val;
							boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
							if(eventEnabled) submit(oetuple, OutEventKpiTacLte) ;
						}
						else
						{
							if(has(SqmBroadTacLteNodePrec, eggsn.exclude_node) == true)
							{
								removeM (SqmBroadTacLteNodePrec, eggsn.exclude_node);
							}
						}
					}
					else if(!eggsn.endROP)
					{
						fh = eggsn.fHeader;
							
						mutable rstring datetmp = "20"+(rstring)substring(eggsn.cdrSchema.recordOpeningTime,0,12);
				        timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss,datetmp);
				        mutable float64 endTimeCDRfloat = getSeconds(ts) + (int64)eggsn.cdrSchema.duration;
						
						mutable rstring cgi;
						
						if (length(eggsn.cdrSchema.userLocationInformation)>16)
				    	{
				    		cgi = transformUserLocalInfo_4G(eggsn.cdrSchema.userLocationInformation);
				    	}
				    	else
				    	{		    		
				    		cgi = transformUserLocalInfo_4Gsmall(eggsn.cdrSchema.userLocationInformation);
				    	}
						
						if (flagEcgi)
						{
							mutable list<rstring> tmpOutParamMapECGI = [];
							
							if ( getCdrProvRecord("ECGI", cgi, tmpOutParamMapECGI ) )
							{
								mutable rstring tac = tmpOutParamMapECGI[6];	//TAC
								mutable rstring centralName = eggsn.cdrSchema.nodeId; 
								mutable rstring key = tac;
								
								if((endTimeCDRfloat >= eggsn.startRopSecsOld) && (endTimeCDRfloat < eggsn.endRopSecsOld))
								{
									cdrtotold++;
									if(has(SqmBroadTacLteNodePrec, centralName) == true)
				                	{
			                			addCdrTacLte(eggsn,SqmBroadTacLteNodePrec[centralName],key,nameOutputFileOld,centralName,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);	
			                		}else{
			                			addCdrTacLte(eggsn,CDRforBroadTacLte,key,nameOutputFileOld,centralName,filePrefix,fileSuffix,eggsn.startRopSecsOld,eggsn.endRopSecsOld);
			                			insertM(SqmBroadTacLteNodePrec, centralName, CDRforBroadTacLte) ;
			                		}
								}
								else if((endTimeCDRfloat >= eggsn.startRopSecs) && (endTimeCDRfloat < eggsn.endRopSecs))
								{
									cdrtot++;
									if(has(SqmBroadTacLteNodeT, centralName) == true)
				                	{
				                		addCdrTacLte(eggsn,SqmBroadTacLteNodeT[centralName],key,nameOutputFilestate,centralName,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
				                	}else{
				                		addCdrTacLte(eggsn,CDRforBroadTacLte,key,nameOutputFilestate,centralName,filePrefix,fileSuffix,eggsn.startRopSecs,eggsn.endRopSecs);
										insertM(SqmBroadTacLteNodeT, centralName, CDRforBroadTacLte) ;
				                	}
								}
								else
								{
									//exclude CDR fuori ROP
									cdrexclude2++;
								}
								
								clearM(cdrApp);
								clearM(CDRforBroadTacLte);
							}							
						}
					}
			}
								
			onPunct eggsn :
			{
				if(currentPunct() == Sys.WindowMarker)
				{
					
					oetuple.e.eventType = 200 ;
					oetuple.e.resultCode = 0 ;
					oetuple.e.rawFile = filename(fh.fName) ;
					swap(oetuple.e.eventCorrelationId, fh.eventCorrelationId);
                    swap(oetuple.e.rop, fh.rop);
                    swap(oetuple.e.emId, fh.emId);
                    swap(oetuple.e.neId, fh.neId);
					oetuple.e.eventText = "End Broadband Tac Lte SQM";
					boolean eventEnabled = mkEvent(oetuple.e, fh.sessionBeginTime) ;
					if(eventEnabled) submit(oetuple, OutEventKpiTacLte) ;
					
					submit(Sys.WindowMarker, OutEventKpiTacLte) ;
				}

			}
			
			config
				threadedPort: queue(eggsn, Sys.Wait, 1000000);

		}

	
//		(stream<CsvWrite> outCsv) = Custom(outKpiTacLte)
//		{
//			logic
//				state:
//				{
//					
//					mutable CsvWrite csv = {};
//				}	
//				
//				onTuple outKpiTacLte: 
//				{
//					swap(csv.nameOutputFile, outKpiTacLte.nameOutputFile);
//					swap(csv.endROP, outKpiTacLte.endROP);
//					swap(csv.filePrefix, outKpiTacLte.filePrefix);
//					swap(csv.suffix, outKpiTacLte.suffix);
//										
//					if (outKpiTacLte.tac != "")
//					{
//						csv.outputContent = outKpiTacLte.tac+";"+outKpiTacLte.start_time+";"+outKpiTacLte.end_time+";"+(rstring)outKpiTacLte.downlink_tac_lte+";"+(rstring)outKpiTacLte.uplink_tac_lte;
//					}else{
//						csv.outputContent = "";
//					}
//					
//				
//					submit(csv, outCsv);
//				} 
//				
//				onPunct outKpiTacLte :
//				{
//					if(currentPunct() == Sys.WindowMarker) {
//						submit(Sys.WindowMarker,outCsv);
//					}
//				}
//		}
	}


void countCdrsTacLte(AggregateSqmSchema eggsn1, mutable BroadTacLte aggrSQMtmp) 
{
	for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
	{
		aggrSQMtmp.downlink_tac_lte = aggrSQMtmp.downlink_tac_lte + (int64)eggsn1.cdrSchema.datavolumeFBCDownlink[i];
	}
	
	for(int32 i in range(eggsn1.cdrSchema.datavolumeFBCDownlink))
	{
		aggrSQMtmp.uplink_tac_lte = aggrSQMtmp.uplink_tac_lte + (int64)eggsn1.cdrSchema.datavolumeFBCUplink[i];
	}
	
}

void addCdrTacLte(AggregateSqmSchema eggsn, mutable SqmBroadTacLte cdr, rstring key, rstring nameOutputFile, rstring centralName, rstring filePrefix, rstring fileSuffix, float64 startROP, float64 endROP)
{
	mutable BroadTacLte firstEntry = {};
	mutable BroadTacLte existEntry = {};
	
	if(has(cdr, key) == false) 
    {   
    	firstEntry.nameOutputFile = nameOutputFile; 
		firstEntry.filePrefix = filePrefix;
		firstEntry.suffix = fileSuffix;			
		firstEntry.tac = key;
		firstEntry.start_time = getUtilConvert((rstring)startROP); 
		firstEntry.end_time = getUtilConvert((rstring)endROP);
		countCdrsTacLte(eggsn, firstEntry) ;
		insertM(cdr, key, firstEntry) ;
    }  
    else 
    {     
     	existEntry = cdr[key];
     	
     	countCdrsTacLte(eggsn, existEntry) ;
 					
 		removeM (cdr, key);
	    insertM( cdr, key, existEntry);
    }
}


BroadTacLte initEmptyEndRopTupleTacLte() 
{
	mutable BroadTacLte result = {};
	
	result.endROP = true;
	
	return result;
}


void aggregateTac (mutable SqmBroadTacLtenNode SqmNode, mutable SqmBroadTacLte sqm)
{
	mutable SqmBroadTacLte cdrApp = {};
	mutable list<rstring> keysTmp = [];
	for(rstring key in SqmNode) 
	{
		appendM(keysTmp, key);
	}
	for(rstring key in keysTmp)
	{
		swap(cdrApp, SqmNode[key]);
		for(rstring keyCdr in cdrApp) 
		{	
			if(has(sqm, keyCdr))
			{
				if (cdrApp[keyCdr].downlink_tac_lte!=(int64)-1 && sqm[keyCdr].downlink_tac_lte!=(int64)-1)
				{
					sqm[keyCdr].downlink_tac_lte = sqm[keyCdr].downlink_tac_lte + cdrApp[keyCdr].downlink_tac_lte;
				}
				
				if (cdrApp[keyCdr].uplink_tac_lte!=(int64)-1 && sqm[keyCdr].uplink_tac_lte!=(int64)-1)
				{
					sqm[keyCdr].uplink_tac_lte = sqm[keyCdr].uplink_tac_lte + cdrApp[keyCdr].uplink_tac_lte;
				}
    		}
        	else
        	{
        		insertM(sqm, keyCdr, cdrApp[keyCdr]);
        	}
        }
	}
	clearM(keysTmp);
	clearM(cdrApp);
}