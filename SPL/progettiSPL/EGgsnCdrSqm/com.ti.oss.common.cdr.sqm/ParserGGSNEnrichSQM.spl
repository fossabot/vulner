namespace com.ti.oss.common.cdr.sqm;

// from MediationUtils
use com.ti.oss.common.util.cfg::*;

// from CdrMediationUtils
use com.ti.oss.common.cdr.util.cfg::*;

// from MediationFramework
use com.ti.oss.common.types::*;
use com.ti.oss.common.event::*;

// from CdrMediationFramework
use com.ti.oss.common.cdr.parser.eggsn::*;
use com.ti.oss.common.cdr.parser.epgw::*;
use com.ti.oss.common.cdr.parser.esgw::*;
use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.cdr.util::*;

public composite ParserGGSNEnrichSQM(
	input

		stream<EggsnCdr> GgsnCdr;

	output

		stream<CdrSchemaForAggrSQM> CdrSchemaEnrichGGSN, OutEventEnrichGGSN
)
{
	param
		expression <rstring> $mediationName;
	
	graph

		(stream<CdrSchemaForAggrSQM> CdrSchemaEnrichGGSN; stream<Event e> OutEventEnrichGGSN) = Custom( GgsnCdr as IEggsn )
		{
			logic
				state :
				{
					mutable FileHeader tmpFileHeader;
					mutable IEggsn lastTuple = {};
					mutable rstring emm_rete = getCfgParam("COMMON_CFG_DIR", $mediationName, "EMM_RETE") ;
					mutable boolean flagEmmRete = loadCdrProvCfg("EMMRETE", emm_rete,(uint32) 0, ",") ;
				}

				onTuple IEggsn :
				{					
					if(IEggsn.endOfData) 
					{
						if (isCdrProvCfgChanged("EMMRETE"))
						{
							reloadCdrProvCfg("EMMRETE");
						}
						
						mutable CdrSchemaEnrichGGSN emptyOutputTuple = {};

						emptyOutputTuple.cdrSchema.address = IEggsn.address;
						emptyOutputTuple.endOfData = true;
						emptyOutputTuple.fHeader.fName = IEggsn.fName;
						emptyOutputTuple.fHeader.eventCorrelationId = IEggsn.eventCorrelationId;
						emptyOutputTuple.fHeader.sessionBeginTime = IEggsn.sessionBeginTime;
						emptyOutputTuple.fHeader.rop = IEggsn.rop;
						emptyOutputTuple.fHeader.emId = IEggsn.emId;
						emptyOutputTuple.fHeader.neId = IEggsn.neId;
						emptyOutputTuple.cdrSchema.nodeId = getNomeCentrale(getNodeIdFromPath(IEggsn.fName), emm_rete, flagEmmRete);
						submit(emptyOutputTuple, CdrSchemaEnrichGGSN);
						
						mutable Event event = {};
						event.eventType = 130;
						event.resultCode = 0;
						event.rawFile = IEggsn.fName;
						event.rop = IEggsn.rop;
						event.emId = "GGSN";
						event.neId = IEggsn.neId;
						event.eventText = "End Parser Release GGSN";
						boolean eventEnabled = mkEvent(event,IEggsn.sessionBeginTime);

						if (eventEnabled)
							submit ({e=event}, OutEventEnrichGGSN);
					}
					else
					{											
						mutable CdrSchemaSQM  tmpcdrSchema = {};
						tmpcdrSchema.servingNodeAddress = IEggsn.sgsnAddress;
						
//						if (IEggsn.rATType == 6)
//						{
//							tmpcdrSchema.datavolumeFBCUplink = IEggsn.datavolumeFBCUplink;
//							tmpcdrSchema.datavolumeFBCDownlink = IEggsn.datavolumeFBCDownlink;
//						}
//						else
//						{
//							for(int32 elem in IEggsn.dataVolumeGPRSUplink) {
//								appendM(tmpcdrSchema.datavolumeFBCUplink, (rstring)elem);
//							}
//							
//							for(int32 elem in IEggsn.dataVolumeGPRSDownlink) {
//								appendM(tmpcdrSchema.datavolumeFBCDownlink, (rstring)elem);
//							}
//						}

						/*inizio Modifica 4/6/18  */
						tmpcdrSchema.datavolumeFBCUplink = IEggsn.datavolumeFBCUplink;
						tmpcdrSchema.datavolumeFBCDownlink = IEggsn.datavolumeFBCDownlink;
						for(int32 elem in IEggsn.dataVolumeGPRSUplink) {
							appendM(tmpcdrSchema.datavolumeFBCUplink, (rstring)elem);
						}
						
						for(int32 elem in IEggsn.dataVolumeGPRSDownlink) {
							appendM(tmpcdrSchema.datavolumeFBCDownlink, (rstring)elem);
						}
						/*fine Modifica 4/6/18  */		
						
						if (IEggsn.recordOpeningTime!="")
						{
							mutable rstring datetmp = "20"+(rstring)substring(IEggsn.recordOpeningTime,0,12);
		                	mutable timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss,datetmp);		                
		                	tmpcdrSchema.endTimeCDRfloat = (float64)getSeconds(ts) + (float64)IEggsn.duration;
		                }
						tmpcdrSchema.chargingID = IEggsn.chargingID;
						tmpcdrSchema.ratingGroupId = IEggsn.changeRatingGroupId;
						tmpcdrSchema.datavolumeUplinkRatingG = IEggsn.datavolumeFBCUplink;
						tmpcdrSchema.datavolumeDownlinkRatingG = IEggsn.datavolumeFBCDownlink;
						tmpcdrSchema.recordOpeningTime = IEggsn.recordOpeningTime;
						tmpcdrSchema.duration = IEggsn.duration;
						tmpcdrSchema.chargingCharacteristics = IEggsn.chargingCharacteristics;
						tmpcdrSchema.servedIMEISV = IEggsn.servedIMEISV;
						tmpcdrSchema.servedMSISDN = IEggsn.servedMSISDN;
						tmpcdrSchema.userLocationInformation = IEggsn.userLocationInformation;
						tmpcdrSchema.rATType = IEggsn.rATType;
						tmpcdrSchema.apn = IEggsn.apn;
						tmpcdrSchema.address = IEggsn.address;
						tmpcdrSchema.nodeId = getNomeCentrale(getNodeIdFromPath(IEggsn.fName), emm_rete, flagEmmRete);
						
						tmpFileHeader.fName = IEggsn.fName;
						tmpFileHeader.emId = IEggsn.emId;
						tmpFileHeader.neId = IEggsn.neId;
	
						submit( { cdrSchema = tmpcdrSchema, fHeader = tmpFileHeader, endOfData = false }, CdrSchemaEnrichGGSN );					
					}
				}

				onPunct IEggsn :
				{
					if (currentPunct() == Sys.WindowMarker)
					{
						submit(Sys.WindowMarker, CdrSchemaEnrichGGSN);					
					}
				}
		}	
}


public composite ParserPGWEnrichSQM(
	input

		stream<EpgwCdr> PgwCdr;

	output

		stream<CdrSchemaForAggrSQM> CdrSchemaEnrichPGW, OutEventEnrichPGW
)
{
	param
		expression <rstring> $mediationName;
	
	graph

		(stream<CdrSchemaForAggrSQM> CdrSchemaEnrichPGW; stream<Event e> OutEventEnrichPGW) = Custom( PgwCdr as IEpgw )
		{		
			logic
				state :
				{
					mutable FileHeader tmpFileHeader;
					mutable IEpgw lastTuple = {};
					mutable rstring emm_rete = getCfgParam("COMMON_CFG_DIR", $mediationName, "EMM_RETE") ;
					mutable boolean flagEmmRete = loadCdrProvCfg("EMMRETE", emm_rete,(uint32) 0, ",") ;
				}
				
				onTuple IEpgw :
				{
					
					
					if(IEpgw.endOfData)
					{
						if (isCdrProvCfgChanged("EMMRETE"))
						{
							reloadCdrProvCfg("EMMRETE");
						}
						
						mutable CdrSchemaEnrichPGW emptyOutputTuple = {};

						emptyOutputTuple.cdrSchema.address = IEpgw.ggsnAddress;
						emptyOutputTuple.endOfData = true;
						emptyOutputTuple.fHeader.fName = IEpgw.fName;
						emptyOutputTuple.fHeader.eventCorrelationId = IEpgw.eventCorrelationId;
						emptyOutputTuple.fHeader.sessionBeginTime = IEpgw.sessionBeginTime;
						emptyOutputTuple.fHeader.rop = IEpgw.rop;
						emptyOutputTuple.fHeader.emId = IEpgw.emId;
						emptyOutputTuple.fHeader.neId = IEpgw.neId;
						emptyOutputTuple.cdrSchema.nodeId = getNomeCentrale(getNodeIdFromPath(IEpgw.fName), emm_rete, flagEmmRete);
						submit(emptyOutputTuple, CdrSchemaEnrichPGW);
						
						
						mutable Event event = {};
						event.eventType = 130;
						event.resultCode = 0;
						event.rawFile = IEpgw.fName;
						event.rop = IEpgw.rop;
						event.emId = "GGSN";
						event.neId = IEpgw.neId;
						event.eventText = "End Parser Release PGW";
						boolean eventEnabled = mkEvent(event,IEpgw.sessionBeginTime);

						if (eventEnabled)
							submit ({e=event}, OutEventEnrichPGW);
					}
					else
					{
						mutable CdrSchemaSQM  tmpcdrSchema = {};
						
						mutable rstring datetmp = "20"+(rstring)substring(IEpgw.recordOpeningTime,0,12);
		                mutable timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss,datetmp);
		                
		                tmpcdrSchema.endTimeCDRfloat = (float64)getSeconds(ts) + (float64)IEpgw.duration;
						tmpcdrSchema.chargingID = IEpgw.chargingID;
						tmpcdrSchema.ratingGroupId = IEpgw.changeRatingGroupId;
						tmpcdrSchema.datavolumeUplinkRatingG = IEpgw.datavolumeFBCUplink;
						tmpcdrSchema.datavolumeDownlinkRatingG = IEpgw.datavolumeFBCDownlink;
						tmpcdrSchema.servingNodeAddress = IEpgw.servingNodeAddress;
						tmpcdrSchema.datavolumeFBCUplink = IEpgw.datavolumeFBCUplink;
						tmpcdrSchema.datavolumeFBCDownlink = IEpgw.datavolumeFBCDownlink;
						tmpcdrSchema.recordOpeningTime = IEpgw.recordOpeningTime;
						tmpcdrSchema.duration = IEpgw.duration;
						tmpcdrSchema.chargingCharacteristics = IEpgw.chargingCharacteristics;
						tmpcdrSchema.userLocationInformation = IEpgw.userLocationInformation;
						tmpcdrSchema.rATType = IEpgw.rATType;
						tmpcdrSchema.apn = IEpgw.apn;
						tmpcdrSchema.address = IEpgw.ggsnAddress;
						tmpcdrSchema.servedMSISDN = IEpgw.servedMSISDN;
						tmpcdrSchema.nodeId = getNomeCentrale(getNodeIdFromPath(IEpgw.fName), emm_rete, flagEmmRete);
						
						tmpFileHeader.fName = IEpgw.fName;
						tmpFileHeader.emId = IEpgw.emId;
						tmpFileHeader.neId = IEpgw.neId;
	
						submit( { cdrSchema = tmpcdrSchema, fHeader = tmpFileHeader, endOfData = false }, CdrSchemaEnrichPGW );					
					}
				}

				onPunct IEpgw :
				{	
					if (currentPunct() == Sys.WindowMarker)
					{
						submit(Sys.WindowMarker, CdrSchemaEnrichPGW);
					}
				}
		}	
}



public composite ParserSGWEnrichSQM(
	input

		stream<EsgwCdr> SgwCdr;

	output

		stream<CdrSchemaForAggrSGWSQM> CdrSchemaEnrichSGW, OutEventEnrichSGW
)
{
	param
		expression <rstring> $mediationName;
	
	graph

		(stream<CdrSchemaForAggrSGWSQM> CdrSchemaEnrichSGW; stream<Event e> OutEventEnrichSGW) = Custom( SgwCdr as IEsgw )
		{
			logic
				state :
				{
					mutable FileHeader tmpFileHeader;
					mutable IEsgw lastTuple = {};
				}

				onTuple IEsgw :
				{					
					if(IEsgw.endOfData) 
					{
						
						mutable CdrSchemaEnrichSGW emptyOutputTuple = {};

						emptyOutputTuple.cdrSchema.address = IEsgw.gsnAddress;
						emptyOutputTuple.endOfData = true;
						emptyOutputTuple.fHeader.fName = IEsgw.fName;
						emptyOutputTuple.fHeader.eventCorrelationId = IEsgw.eventCorrelationId;
						emptyOutputTuple.fHeader.sessionBeginTime = IEsgw.sessionBeginTime;
						emptyOutputTuple.fHeader.rop = IEsgw.rop;
						emptyOutputTuple.fHeader.emId = IEsgw.emId;
						emptyOutputTuple.fHeader.neId = IEsgw.neId;
						submit(emptyOutputTuple, CdrSchemaEnrichSGW);
						
						mutable Event event = {};
						event.eventType = 130;
						event.resultCode = 0;
						event.rawFile = IEsgw.fName;
						event.rop = IEsgw.rop;
						event.emId = "SGW";
						event.neId = IEsgw.neId;
						event.eventText = "End Parser Release SGW";
						boolean eventEnabled = mkEvent(event,IEsgw.sessionBeginTime);
						
						if (eventEnabled)
							submit ({e=event}, OutEventEnrichSGW);
					}
					else
					{											
						mutable CdrSchemaSGWSQM  tmpcdrSchema = {};
						
						mutable rstring datetmp = "20"+(rstring)substring(IEsgw.recordOpeningTime,0,12);
		                mutable timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss,datetmp);
		                
		                tmpcdrSchema.endTimeCDRfloat = (float64)getSeconds(ts) + (float64)IEsgw.duration;
						for(int32 elem in IEsgw.dataVolumeGPRSUplink) {
							appendM(tmpcdrSchema.datavolumeFBCUplink, (rstring)elem);
						}						
						for(int32 elem in IEsgw.dataVolumeGPRSDownlink) {
							appendM(tmpcdrSchema.datavolumeFBCDownlink, (rstring)elem);
						}
						tmpcdrSchema.recordOpeningTime = IEsgw.recordOpeningTime;
						tmpcdrSchema.duration = IEsgw.duration;
						tmpcdrSchema.servedIMSI = IEsgw.servedIMSI;
						tmpcdrSchema.rATType = IEsgw.rATType;
						tmpcdrSchema.apn = IEsgw.apn;
						tmpcdrSchema.servingNodeAddress = IEsgw.servingNodeAddress;
						tmpcdrSchema.nodeId = regexReplace(IEsgw.nodeID,"-","",true);
						
						tmpFileHeader.fName = IEsgw.fName;
						tmpFileHeader.emId = IEsgw.emId;
						tmpFileHeader.neId = IEsgw.neId;
						
						submit( { cdrSchema = tmpcdrSchema, fHeader = tmpFileHeader, endOfData = false }, CdrSchemaEnrichSGW );					
					}
				}

				onPunct IEsgw :
				{
					if (currentPunct() == Sys.WindowMarker)
					{
						submit(Sys.WindowMarker, CdrSchemaEnrichSGW);					
					}
				}
		}	
}


//public composite ParserSGWEnrichSQM(
//	input
//
//		stream<EsgwCdr> SgwCdr;
//
//	output
//
//		stream<FileHeader h, FileTrailer t> OTrailer, OutEventEnrichSGW
//)
//{
//	param
//		expression <rstring> $mediationName;
//	
//	graph
//
//		(stream<FileHeader h, FileTrailer t> OTrailer as OT; stream<Event e> OutEventEnrichSGW) = Custom( SgwCdr as IEsgw )
//		{
//			logic
//				state :
//				{
//					mutable FileHeader tmpFileHeader;
//					mutable IEsgw lastTuple = {};
//					mutable rstring pathNodeId = getCfgParam("COMMON_CFG_DIR",$mediationName,"BACKUP_INPUT_PATH");
//					mutable OT ottuple = (OT){};
//				}
//
//				onTuple IEsgw :
//				{					
//					if(IEsgw.endOfData) 
//					{
//		                mutable rstring pathB = pathNodeId + getNodeIdFromPath(IEsgw.fName);
//		                ottuple.t.exportFile = pathB + "/" + rmSuffixFromFn(IEsgw.fName, ".ber");
//		                
//		                ottuple.h.fName = IEsgw.fName;
//						ottuple.h.eventCorrelationId = IEsgw.eventCorrelationId;
//						ottuple.h.sessionBeginTime = IEsgw.sessionBeginTime;
//						ottuple.h.rop = IEsgw.rop;
//						ottuple.h.emId = IEsgw.emId;
//						ottuple.h.neId = IEsgw.neId;
//						
//						swap(ottuple.t.outFile, IEsgw.fName);
//		                
//		                submit(ottuple, OTrailer);						
//					}
//				}				
//		}
//	
//}

rstring getNomeCentrale(rstring nodeId, rstring emm_rete, boolean flagEmmRete)
{
	mutable list<rstring> tmpOutParamMapEMMRETE = [];
	mutable rstring nomeCentrale="";
	if (flagEmmRete)
	{
		if ( getCdrProvRecord("EMMRETE", nodeId, tmpOutParamMapEMMRETE ) )
		{   
			nomeCentrale = tmpOutParamMapEMMRETE[1];//IMPIANTO
		}
	}
	else
	{
		appTrc(Trace.error, "File EMM_RETE.csv non caricato correttamente ");
	}
	
	return nomeCentrale;
}