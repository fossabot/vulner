namespace com.ti.oss.common.cdr.sqm;

use com.ti.oss.common.cdr.parser.eggsn::*;
use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ibm.streamsx.file::*;
use com.ti.oss.common.event::*;
use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.util.cfg::*;
use com.ti.oss.common.cdr.util.cfg::* ;

// from MediationUtils
use com.ti.oss.common.util.time::*;

public composite SqmHandlerSgw( input  stream<CdrSchemaForAggrSGWSQM> eggsn, stream<CdrSchemaForAggrSQMWithROP> EvalROP; 
                             output stream<AggregateSqmSchemaSgw> outAggregatedSQM,
							    	stream<FileHeader h, FileTrailer t> OTrailer, OutEventAggrSqm)
{
	param
		expression <rstring> $mediationName;
		
	graph
	
		(stream<AggregateSqmSchemaSgw> outAggregatedSQM as O; stream<FileHeader h, FileTrailer t> OTrailer as OT; stream<Event e> OutEventAggrSqm as OE) = 
		Custom(eggsn as I; EvalROP as eval)
		{
		logic 
			state:
			{	
				rstring mediationName = $mediationName;
				
				mutable float64 startROPstate=0;
				mutable float64 endROPstate=0;
				mutable float64 startROPprev=0;
				mutable float64 endROPprev=0;
				boolean flagMediationCfg = loadMediationCfg(mediationName);				
				mutable int32 delta_start = (int32)getCfgParam("COMMON_CFG_DIR", mediationName, "DELTA_START_TIME_SQM") ;
				mutable int32 delta_end = (int32)getCfgParam("COMMON_CFG_DIR", mediationName, "DELTA_END_TIME_SQM") ;
				mutable rstring path = getCfgParam("COMMON_CFG_DIR",mediationName,"EVENT_DIR");
				mutable FileHeader fh  = {};
				mutable boolean wait = false;
				
				mutable O otuple = (O){};
				mutable OT ottuple = (OT){};
				mutable OE oetuple = (OE){};
				
				mutable O emptyWaitTuple = initEmptyWaitTupleSgw();
			}
			
			onTuple eval:
			{
				if(endROPstate == (float64)0) 
				{
					endROPstate = eval.endROP;
				}
				
				if(startROPstate == (float64)0) 
				{
					startROPstate = eval.startROP;
				}
				
				if (eval.changed)
				{
					startROPprev = startROPstate;
					startROPstate = eval.startROP;
					endROPprev = endROPstate;
					endROPstate = eval.endROP;
					
					//swap(otuple.cdrSchema, eggsn.cdrSchema);
	               	otuple.startRopSecs = startROPstate;
	               	otuple.endRopSecs = endROPstate;
	               	otuple.endROP = true;
	               	otuple.write_prev = false;
	               	otuple.exclude_node = "";
	               	otuple.fHeader = fh;
	               	
       				wait = true;
       				otuple.wait = true;
					
					submit(otuple, outAggregatedSQM);

					delta_start = checkConfiguration(mediationName, "DELTA_START_TIME_SQM", delta_start);
					delta_end = checkConfiguration(mediationName, "DELTA_END_TIME_SQM", delta_end);
					path = checkConfiguration(mediationName, "EVENT_DIR", path);
					fh.rop = getUtilConcertSecsInDate((rstring)endROPstate);
				}
				
				if(eval.waitEnd) 
				{	
					emptyWaitTuple.fHeader = fh;
							
					if (wait)
					{
						emptyWaitTuple.exclude_node = "";
						submit(emptyWaitTuple, outAggregatedSQM);   	
				       	wait = false;
					}
	       		}	
			}
			
			
			onTuple eggsn : 
            {	
				fh = I.fHeader;
				
            	if (!eggsn.endOfData)
            	{
           			if(eggsn.cdrSchema.address!="fileEmpty")
	                {  	
	                   	swap(otuple.cdrSchema, eggsn.cdrSchema);
		               	otuple.startRopSecs = startROPstate;
		               	otuple.endRopSecs = endROPstate;
		               	otuple.startRopSecsOld = startROPprev;
		               	otuple.endRopSecsOld = endROPprev;
		               	otuple.endROP = false;
		               	otuple.wait = false;
		               	otuple.write_prev = false;
		               	otuple.exclude_node = "";
		               	otuple.fHeader = fh;
	                   	
	                   	submit(otuple, outAggregatedSQM);
	            	}
                }
                else
                {
                	oetuple.e.eventType = 140;
                    oetuple.e.resultCode = 0;
                    oetuple.e.rawFile = filename(eggsn.fHeader.fName);
                    swap(oetuple.e.eventCorrelationId, eggsn.fHeader.eventCorrelationId);
                    swap(oetuple.e.rop, eggsn.fHeader.rop);
                    swap(oetuple.e.emId, eggsn.fHeader.emId);
                    swap(oetuple.e.neId, eggsn.fHeader.neId);
                    oetuple.e.eventText = "End SQM Handler SGW";
                    boolean eventEnabled = mkEvent( oetuple.e, eggsn.fHeader.sessionBeginTime); 
                    
                    if(eventEnabled) 
                    	submit (oetuple, OutEventAggrSqm);  
                
	                swap(ottuple.t.outFile, eggsn.fHeader.fName);
	                mutable rstring pathNodeId = getCfgParam("COMMON_CFG_DIR",mediationName,"BACKUP_INPUT_PATH") + getNodeIdFromPath(fh.fName);
	                ottuple.t.exportFile = pathNodeId + "/" + rmSuffixFromFn(fh.fName, ".ber");
	                
					ottuple.h = fh;
	                submit(ottuple, OTrailer);
	                
	                submit(Sys.WindowMarker, outAggregatedSQM);
                }
			    
			    if(eggsn.cdrSchema.address=="fileEmpty")
			    {
			    	//mutable Event event = {};		
             	    oetuple.e.eventType = 140;
                    oetuple.e.resultCode = 0;
                    oetuple.e.rawFile = filename(eggsn.fHeader.fName);
                    swap(oetuple.e.eventCorrelationId, eggsn.fHeader.eventCorrelationId);
                    swap(oetuple.e.rop, eggsn.fHeader.rop);
                    swap(oetuple.e.emId, eggsn.fHeader.emId);
                    swap(oetuple.e.neId, eggsn.fHeader.neId);
                    oetuple.e.eventText = "End SQM Handler SQM - File Empty ";
                    boolean eventEnabled = mkEvent( oetuple.e, eggsn.fHeader.sessionBeginTime); 
                    
                    if(eventEnabled) 
                    	submit (oetuple, OutEventAggrSqm);         
			    }
			}
			
			config
				threadedPort: queue(eggsn, Sys.Wait, 100000);

		}
	
}


AggregateSqmSchemaSgw initEmptyWaitTupleSgw() 
{
	mutable AggregateSqmSchemaSgw result = {};
	
	result.endROP = false;
	result.wait = false;
	result.write_prev = true;
	
	return result;
}