namespace com.ti.oss.common.cdr.evalROP;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;


type BroadMvnoSgwT = map<rstring, BroadMvnoSgw>;

public composite AggregateMvno (input stream<BroadMvnoSgw> IMvno; output stream<CsvWrite> OMvno)
{
	param
		expression<rstring> $mediationName ;
			
	graph
	
		(stream<CsvWrite> OMvno) = Custom(IMvno as I)
		{
		logic state:
		{
			mutable int32 countAggr = 0;
			mutable BroadMvnoSgwT MvnoAggr ;
			rstring mediationName = $mediationName;
			mutable CsvWrite csv = {};
			mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
			mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
		} 
	
		onTuple I : 
		{   
			if (I.endROP)
			{	
				countAggr++;
				
				if (isCdrProvCfgChanged("NAMINGLOOKUP"))
				{
					reloadCdrProvCfg("NAMINGLOOKUP");
				}
			}
			else
			{
				mutable rstring key = I.sgsn_dn+I.mvno_name;
				
				if(has(MvnoAggr, key) == true)
				{
					MvnoAggr[key].mvno_bb_4g_downlink_uplink = MvnoAggr[key].mvno_bb_4g_downlink_uplink + I.mvno_bb_4g_downlink_uplink;
				}
				else
				{
					mutable BroadMvnoSgw BroadMvnoSgwTmp = {};	
					
					swap(BroadMvnoSgwTmp.sgsn_dn,I.sgsn_dn);
					swap(BroadMvnoSgwTmp.mvno_name,I.mvno_name);
					swap(BroadMvnoSgwTmp.start_time,I.start_time);
					swap(BroadMvnoSgwTmp.end_time,I.end_time);
					swap(BroadMvnoSgwTmp.mvno_bb_4g_downlink_uplink,I.mvno_bb_4g_downlink_uplink);
					swap(BroadMvnoSgwTmp.nameOutputFile,I.nameOutputFile);
					swap(BroadMvnoSgwTmp.endROP,I.endROP);
					swap(BroadMvnoSgwTmp.filePrefix,I.filePrefix);
					swap(BroadMvnoSgwTmp.suffix,I.suffix);
					swap(BroadMvnoSgwTmp.endRopSecs,I.endRopSecs);
					swap(BroadMvnoSgwTmp.startRopSecs,I.startRopSecs);		
					
					insertM(MvnoAggr, key, BroadMvnoSgwTmp) ;							
				}
				
			}
			
			if(countAggr == 2)
			{
				for(rstring key in MvnoAggr)
				{	
					csv.nameOutputFile = MvnoAggr[key].nameOutputFile;
					csv.endROP = false;
					csv.filePrefix = MvnoAggr[key].filePrefix;
					csv.suffix = MvnoAggr[key].suffix;
					
					mutable rstring sqmDn = "";
					if (MvnoAggr[key].sgsn_dn != "")
					{
						sqmDn = getSqmDn(MvnoAggr[key].sgsn_dn,flagNamingLookup);
					}
					if (sqmDn != "")
					{
						csv.outputContent = sqmDn + ";" + "OPERATOR-"+MvnoAggr[key].mvno_name + ";" +
						MvnoAggr[key].start_time + ";" +
						MvnoAggr[key].end_time + ";" +(rstring)
						MvnoAggr[key].mvno_bb_4g_downlink_uplink ;
					}else{
						csv.outputContent = "";
					}
				
					submit(csv, OMvno);
				}	
				
				countAggr = 0;
				clearM(MvnoAggr);
				
				csv.nameOutputFile = I.nameOutputFile;
				csv.outputContent = "";
				csv.endROP = true;
				submit(csv, OMvno);
			}		
        }	
     }	
}


type BroadMvnoAggrOpSgwT = map<rstring, BroadMvnoAggrOpSgw>;

public composite AggregateMvnoAggrOp (input stream<BroadMvnoAggrOpSgw> IMvnoAO; output stream<CsvWrite> OMvnoAO)
{
	param
		expression<rstring> $mediationName ;
			
	graph
	
		(stream<CsvWrite> OMvnoAO) = Custom(IMvnoAO as I)
		{
		logic state:
		{
			mutable int32 countAggr = 0;
			mutable BroadMvnoAggrOpSgwT MvnoAggrOp ;
			rstring mediationName = $mediationName;
			mutable CsvWrite csv = {};
		} 
	
		onTuple I : 
		{   
			if (I.endROP)
			{	
				countAggr++;
			}
			else
			{
				mutable rstring key = I.mvno_name;
				
				if(has(MvnoAggrOp, key) == true)
				{
					if (I.mvno_bb_4g_downlink_uplink_nazionale != (int64)-1)
					{
						if (MvnoAggrOp[key].mvno_bb_4g_downlink_uplink_nazionale != (int64)-1)
						{	
							MvnoAggrOp[key].mvno_bb_4g_downlink_uplink_nazionale = MvnoAggrOp[key].mvno_bb_4g_downlink_uplink_nazionale + I.mvno_bb_4g_downlink_uplink_nazionale;
						}
						else
						{
							MvnoAggrOp[key].mvno_bb_4g_downlink_uplink_nazionale = I.mvno_bb_4g_downlink_uplink_nazionale;
						}
					}
				}
				else
				{
					mutable BroadMvnoAggrOpSgw BroadMvnoAggrOpSgwTmp = {};	
					
					swap(BroadMvnoAggrOpSgwTmp.mvno_name,I.mvno_name);
					swap(BroadMvnoAggrOpSgwTmp.start_time,I.start_time);
					swap(BroadMvnoAggrOpSgwTmp.end_time,I.end_time);
					swap(BroadMvnoAggrOpSgwTmp.mvno_bb_4g_downlink_uplink_nazionale,I.mvno_bb_4g_downlink_uplink_nazionale);
					swap(BroadMvnoAggrOpSgwTmp.nameOutputFile,I.nameOutputFile);
					swap(BroadMvnoAggrOpSgwTmp.endROP,I.endROP);
					swap(BroadMvnoAggrOpSgwTmp.filePrefix,I.filePrefix);
					swap(BroadMvnoAggrOpSgwTmp.suffix,I.suffix);
					swap(BroadMvnoAggrOpSgwTmp.endRopSecs,I.endRopSecs);
					swap(BroadMvnoAggrOpSgwTmp.startRopSecs,I.startRopSecs);		
					
					insertM(MvnoAggrOp, key, BroadMvnoAggrOpSgwTmp) ;							
				}
				
			}
			
			if(countAggr == 2)
			{
				for(rstring key in MvnoAggrOp)
				{	
					csv.nameOutputFile = MvnoAggrOp[key].nameOutputFile;
					csv.endROP = false;
					csv.filePrefix = MvnoAggrOp[key].filePrefix;
					csv.suffix = MvnoAggrOp[key].suffix;
					
					if (MvnoAggrOp[key].mvno_name != "")
					{
						csv.outputContent = "OPERATOR-"+MvnoAggrOp[key].mvno_name + ";" +
						MvnoAggrOp[key].start_time + ";" +
						MvnoAggrOp[key].end_time + ";" +(rstring)
						MvnoAggrOp[key].mvno_bb_4g_downlink_uplink_nazionale ;
					}else{
						csv.outputContent = "";
					}
					
					submit(csv, OMvnoAO);
				}	
				
				countAggr = 0;
				clearM(MvnoAggrOp);
				
				csv.nameOutputFile = I.nameOutputFile;
				csv.outputContent = "";
				csv.endROP = true;
				submit(csv, OMvnoAO);
			}		
        }	
     }	
}