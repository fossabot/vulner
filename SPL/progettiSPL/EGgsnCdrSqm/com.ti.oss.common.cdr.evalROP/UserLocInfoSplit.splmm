namespace com.ti.oss.common.cdr.evalROP;

use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.util.cfg::* ;

<%
	my $parallelSQM = 1;
	my $parallelSQMmod = 16;
%>

public composite UserLocInfoSplit (input  stream<AggregateSqmSchema> IROP; 
	                              output <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
								  stream<AggregateSqmSchema> OUserBsc<%=$i%>
								  <%if($i != $parallelSQMmod - 1) {
								  print ",";
								  }
								  }%>,
								  <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
								  stream<AggregateSqmSchema> OUserRnc<%=$i%>
								  <%if($i != $parallelSQMmod - 1) {
								  print ",";
								  }
								  }%>,
								  stream<AggregateSqmSchema> OROP
								  )
{
	param
		expression<rstring> $mediationName ;
	
	type AddrTable = map<rstring, uint32>;
	
	graph	
		
		(<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<AggregateSqmSchema> OUserBsc<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%>;
		<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<AggregateSqmSchema> OUserRnc<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%>;
		stream<AggregateSqmSchema> OROP 
		)
		= Custom(IROP as I)
		{
		logic state:
			{
				mutable int32 countPort = 0;
				mutable AddrTable addrTable;
				rstring mediationName = $mediationName;
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
			}	
			
			onTuple I : 
			{      	
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == <%=$parallelSQM%>) 
					{
						submit(I,OROP);
						count_endROP = 0;
					}
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == <%=$parallelSQM%>) 
						{
							submit(I,OROP);
							count_write_prev = 0;
						}
					}else{
						submit(I,OROP);
					}			
				}
				else
				{
					if(I.cdrSchema.userLocationInformation!="")
					{
						if (I.cdrSchema.rATType == 2)
						{
							/* commentato il 27/02/18
							uint64 addr = hashCode((rstring)I.cdrSchema.userLocationInformation);
							uint32 modAddr = (uint32)(addr%(uint64)16);
							if(modAddr < 0u)
							{
								appTrc(Trace.error,"ERROR: the split returned a negative output port!");
							}
							else 
							{
								<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
									<%if($i > 0) { print "else ";}%>
									if (modAddr==(uint32)<%=$i%>)
									{
										submit(I, OUserBsc<%=$i%>);
									}
								<%}%>
							}
							* 
							*/
							if (countPort==0)
							{
								submit(I, OUserBsc0);
							}else if (countPort==1)
							{	
								submit(I, OUserBsc1);
							}else if (countPort==2)
							{
								submit(I, OUserBsc2);
							}else if (countPort==3)
							{
								submit(I, OUserBsc3);
							}else if (countPort==4)
							{
								submit(I, OUserBsc4);
							}else if (countPort==5)
							{
								submit(I, OUserBsc5);
							}else if (countPort==6)
							{
								submit(I, OUserBsc6);
							}else if (countPort==7)
							{
								submit(I, OUserBsc7);
							}else if (countPort==8)
							{
								submit(I, OUserBsc8);
							}else if (countPort==9)
							{
								submit(I, OUserBsc9);
							}else if (countPort==10)
							{
								submit(I, OUserBsc10);
							}else if (countPort==11)
							{
								submit(I, OUserBsc11);
							}else if (countPort==12)
							{
								submit(I, OUserBsc12);
							}else if (countPort==13)
							{
								submit(I, OUserBsc13);
							}else if (countPort==14)
							{
								submit(I, OUserBsc14);
							}
							else if (countPort==15)
							{
								submit(I, OUserBsc15);
							}
							countPort++;
							if (countPort == <%=$parallelSQMmod%>)
							{
								countPort = 0;
							}							
						}
						else if (I.cdrSchema.rATType == 1)
						{		
							/* commentato il 27/02/18
							uint64 addr = hashCode((rstring)I.cdrSchema.userLocationInformation);
							uint32 modAddr = (uint32)(addr%(uint64)16);
							if(modAddr < 0u) {
								appTrc(Trace.error,"ERROR: the split returned a negative output port!");
							}
							else 
							{
								<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
									<%if($i > 0) { print "else ";}%>
									if (modAddr==(uint32)<%=$i%>)
									{
										submit(I, OUserRnc<%=$i%>);
									}
								<%}%>
							}
							* 
							*/
							if (countPort==0)
							{
								submit(I, OUserRnc0);
							}else if (countPort==1)
							{	
								submit(I, OUserRnc1);
							}else if (countPort==2)
							{
								submit(I, OUserRnc2);
							}else if (countPort==3)
							{
								submit(I, OUserRnc3);
							}else if (countPort==4)
							{
								submit(I, OUserRnc4);
							}else if (countPort==5)
							{
								submit(I, OUserRnc5);
							}else if (countPort==6)
							{
								submit(I, OUserRnc6);
							}else if (countPort==7)
							{
								submit(I, OUserRnc7);
							}else if (countPort==8)
							{
								submit(I, OUserRnc8);
							}else if (countPort==9)
							{
								submit(I, OUserRnc9);
							}else if (countPort==10)
							{
								submit(I, OUserRnc10);
							}else if (countPort==11)
							{
								submit(I, OUserRnc11);
							}else if (countPort==12)
							{
								submit(I, OUserRnc12);
							}else if (countPort==13)
							{
								submit(I, OUserRnc13);
							}else if (countPort==14)
							{
								submit(I, OUserRnc14);
							}
							else if (countPort==15)
							{
								submit(I, OUserRnc15);
							}
							countPort++;
							if (countPort == <%=$parallelSQMmod%>)
							{
								countPort = 0;
							}
						}
					}
				}
			}
		}
}


public composite UserLocInfoSplitTav (input  stream<AggregateSqmSchema> IROP; 
	                                  output <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
								      stream<AggregateSqmSchema> OUserTav<%=$i%>
									  <%if($i != $parallelSQMmod - 1) {
									  print ",";
									  }
									  }%>,
									  stream<AggregateSqmSchema> OROP
									  )
{
	type AddrTable = map<rstring, uint32>;
	
	graph	
		
		(<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<AggregateSqmSchema> OUserTav<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%>;
		stream<AggregateSqmSchema> OROP 
		)
		= Custom(IROP as I)
		{
		
		logic state:
			{
				mutable int32 countPort = 0;
				mutable AddrTable addrTable;
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
			} 
		
			onTuple I : 
			{      	
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == <%=$parallelSQM%>) 
					{
						submit(I,OROP);
						count_endROP = 0;						
					}
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == <%=$parallelSQM%>) 
						{
							submit(I,OROP);
							count_write_prev = 0;
						}
					}
					else
					{
						submit(I,OROP);
					}			
				}
				else
				{
					if(I.cdrSchema.userLocationInformation!="")
					{			
						/*mutable rstring cgi = "";			
				    	if (length(I.cdrSchema.userLocationInformation)>16)
				    	{
				    		cgi = transformUserLocalInfo_4G(I.cdrSchema.userLocationInformation);
				    	}
				    	else
				    	{
				    		if (I.cdrSchema.rATType==6)
				    		{
				    			cgi = transformUserLocalInfo_4Gsmall(I.cdrSchema.userLocationInformation);
				    		}
				    		else
				    		{
				    			cgi = transformUserLocalInfo(I.cdrSchema.userLocationInformation);
				    		}
				    	}
						
						I.cdrSchema.userLocationInformation = cgi;*/
														
						/* commentato il 27/02/18 
						uint64 addr = hashCode(I.cdrSchema.userLocationInformation);
						uint32 modAddr = (uint32)(addr%(uint64)16);
						if(modAddr < 0u) 
						{
							appTrc(Trace.error,"ERROR: the split returned a negative output port!");
						}
						else 
						{
							<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
								<%if($i > 0) { print "else ";}%>
								if (modAddr==(uint32)<%=$i%>)
								{
									submit(I, OUserTav<%=$i%>);
								}
							<%}%>
						}						 
						*/
						if (countPort==0)
						{
							submit(I, OUserTav0);
						}else if (countPort==1)
						{	
							submit(I, OUserTav1);
						}else if (countPort==2)
						{
							submit(I, OUserTav2);
						}else if (countPort==3)
						{
							submit(I, OUserTav3);
						}else if (countPort==4)
						{
							submit(I, OUserTav4);
						}else if (countPort==5)
						{
							submit(I, OUserTav5);
						}else if (countPort==6)
						{
							submit(I, OUserTav6);
						}else if (countPort==7)
						{
							submit(I, OUserTav7);
						}else if (countPort==8)
						{
							submit(I, OUserTav8);
						}else if (countPort==9)
						{
							submit(I, OUserTav9);
						}else if (countPort==10)
						{
							submit(I, OUserTav10);
						}else if (countPort==11)
						{
							submit(I, OUserTav11);
						}else if (countPort==12)
						{
							submit(I, OUserTav12);
						}else if (countPort==13)
						{
							submit(I, OUserTav13);
						}else if (countPort==14)
						{
							submit(I, OUserTav14);
						}
						else if (countPort==15)
						{
							submit(I, OUserTav15);
						}
						countPort++;
						if (countPort == <%=$parallelSQMmod%>)
						{
							countPort = 0;
						}	
					}
				}
			}
		}
}