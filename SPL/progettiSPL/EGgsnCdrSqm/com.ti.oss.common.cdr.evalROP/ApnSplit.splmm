namespace com.ti.oss.common.cdr.evalROP;

use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.util.cfg::* ;

<%
	my $parallelSQM = 2;
	my $parallelSQMmod = 20;
%>


public composite ApnSplit (input stream<AggregateSqmSchema> IROP, stream<rstring centrale> E; 
                            output <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							  stream<AggregateSqmSchema> OApn<%=$i%>
							  <%if($i != $parallelSQMmod - 1) {
							  print ",";
							  }
							  }%>,
							  stream<AggregateSqmSchema> OROP,
							  <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							  stream<tuple<rstring centrale,rstring apn>> Ocentrale<%=$i%>
							  <%if($i != $parallelSQMmod - 1) {
							  print ",";
							  }
							  }%>
							)
{
	
	param	
		expression<rstring> $mediationName ;	
	
	graph
	
		(<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<AggregateSqmSchema> OApn<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%>;
		stream<AggregateSqmSchema> OROP;
		<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<rstring centrale,rstring apn> Ocentrale<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%> 
		)
		 = Custom(IROP as I; E)
		{
		
		logic state:
		{
			mutable int32 countPort = 0;
			mutable int32 countPortE = 0;
			mutable int32 count_endROP = 0;
			mutable int32 count_write_prev = 0;
			rstring mediationName = $mediationName;
			mutable rstring listApn = getCfgParam("COMMON_CFG_DIR",mediationName,"APN_LIST");
		} 
	
		onTuple E :
		{
			mutable list<rstring> operA = tokenize(listApn, ",", true);
			mutable list<rstring> rete = tokenize(E.centrale, ",", true);
			mutable rstring centrale = regexReplace(rete[1],"\n","",true);
			centrale = regexReplace(centrale,"\r","",true);
			
			if (rete[0] == "FOLDER")
			{
				<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
					submit({centrale=centrale, apn=""},Ocentrale<%=$i%>);
				<%}%>			
			}else{
				for (int32 k in range(operA))
				{
					/*uint64 addr = hashCode(operA[k]+centrale);
					uint32 modAddr = (uint32)(addr%(uint64)20);
					if(modAddr < 0u) {
						appTrc(Trace.error,"ERROR: the split returned a negative output port!");
					}
					else 
					{
						<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							<%if($i > 0) { print "else ";}%>
							if (modAddr==(uint32)<%=$i%>)
							{
								submit({centrale=centrale, apn=operA[k]},Ocentrale<%=$i%>);
							}
						<%}%>
					}*/
					
					if (countPortE==0)
					{
						submit({centrale=centrale, apn=operA[k]},Ocentrale0);
					}else if (countPortE==1)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale1);
					}else if (countPortE==2)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale2);
					}else if (countPortE==3)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale3);
					}else if (countPortE==4)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale4);
					}else if (countPortE==5)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale5);
					}else if (countPortE==6)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale6);
					}else if (countPortE==7)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale7);
					}else if (countPortE==8)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale8);
					}else if (countPortE==9)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale9);
					}else if (countPortE==10)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale10);
					}else if (countPortE==11)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale11);
					}else if (countPortE==12)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale12);
					}else if (countPortE==13)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale13);
					}else if (countPortE==14)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale14);
					}else if (countPortE==15)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale15);
					}else if (countPortE==16)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale16);
					}else if (countPortE==17)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale17);
					}else if (countPortE==18)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale18);
					}else if (countPortE==19)
					{	
						submit({centrale=centrale, apn=operA[k]},Ocentrale19);
					}
					countPortE++;
					if (countPortE == <%=$parallelSQMmod%>)
					{
						countPortE = 0;
					}
				}	
			}
		}
		
		
		onTuple I : 
		{      	
			if (I.endROP)
			{
				//count_endROP++;
				//if(count_endROP == <%=$parallelSQM%>) 
				//{
					submit(I,OROP);
				//	count_endROP = 0;
					
					listApn = checkConfiguration(mediationName, "APN_LIST", listApn);
				//}
			}
			else if (I.write_prev)
			{
				if (I.exclude_node == "")
				{
					//count_write_prev++;
					//if(count_write_prev == <%=$parallelSQM%>) 
					//{
						submit(I,OROP);
					//	count_write_prev = 0;
					//}
				}else{
					submit(I,OROP);
				}
							
			}
			else
			{
				/*uint64 addr = hashCode((rstring)I.cdrSchema.apn + (rstring)I.cdrSchema.nodeId);
				uint32 modAddr = (uint32)(addr%(uint64)20);
				if(modAddr < 0u) {
					appTrc(Trace.error,"ERROR: the split returned a negative output port!");
				}
				else {
					<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
						<%if($i > 0) { print "else ";}%>
						if (modAddr==(uint32)<%=$i%>)
						{
							submit(I,OApn<%=$i%>);
						}
					<%}%>
				}*/
				
				if (countPort==0)
				{
					submit(I, OApn0);
				}else if (countPort==1)
				{	
					submit(I, OApn1);
				}else if (countPort==2)
				{
					submit(I, OApn2);
				}else if (countPort==3)
				{
					submit(I, OApn3);
				}else if (countPort==4)
				{
					submit(I, OApn4);
				}else if (countPort==5)
				{
					submit(I, OApn5);
				}else if (countPort==6)
				{
					submit(I, OApn6);
				}else if (countPort==7)
				{
					submit(I, OApn7);
				}else if (countPort==8)
				{
					submit(I, OApn8);
				}else if (countPort==9)
				{
					submit(I, OApn9);
				}else if (countPort==10)
				{
					submit(I, OApn10);
				}else if (countPort==11)
				{
					submit(I, OApn11);
				}else if (countPort==12)
				{
					submit(I, OApn12);
				}else if (countPort==13)
				{
					submit(I, OApn13);
				}else if (countPort==14)
				{
					submit(I, OApn14);
				}
				else if (countPort==15)
				{
					submit(I, OApn15);
				}
				else if (countPort==16)
				{
					submit(I, OApn16);
				}
				else if (countPort==17)
				{
					submit(I, OApn17);
				}
				else if (countPort==18)
				{
					submit(I, OApn18);
				}
				else if (countPort==19)
				{
					submit(I, OApn19);
				}
				countPort++;
				if (countPort == <%=$parallelSQMmod%>)
				{
					countPort = 0;
				}
			}
        }
	}
}