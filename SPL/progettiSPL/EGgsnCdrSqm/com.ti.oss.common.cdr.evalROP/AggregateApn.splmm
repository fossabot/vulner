namespace com.ti.oss.common.cdr.evalROP;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

<%
	my $parallelSQM = 20;
%>

type BroadGgsnApnT = map<rstring, BroadGgsnApn>;
type BroadPgwApnT = map<rstring, BroadPgwApn>;


public composite AggregateApn (input stream<BroadGgsnApn> IApn; output stream<CsvWrite> OApn)
{
	param
		expression<rstring> $mediationName ;
			
	graph
	
		(stream<CsvWrite> OApn) = Custom(IApn as I)
		{
		logic state:
		{
			mutable int32 countAggr = 0;
			mutable BroadGgsnApnT ApnAggr ;
			rstring mediationName = $mediationName;
			mutable CsvWrite csv = {};
			mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
			mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
		} 
	
		onTuple I : 
		{   
			if (I.endROP)
			{	
				countAggr++;
				
				if (isCdrProvCfgChanged("NAMINGLOOKUP"))
				{
					reloadCdrProvCfg("NAMINGLOOKUP");
				}
			}
			else
			{
				mutable rstring key = I.ggsn_dn+I.apn_name;
				if(has(ApnAggr, key) == true)
				{
					if (I.downlink_post != (int64)-1)
					{
						if (ApnAggr[key].downlink_post != (int64)-1)
						{	
							ApnAggr[key].downlink_post = ApnAggr[key].downlink_post + I.downlink_post;
						}
						else
						{
							ApnAggr[key].downlink_post = I.downlink_post;
						}
					}						
					
					if (I.downlink_prep != (int64)-1)
					{
						if (ApnAggr[key].downlink_prep != (int64)-1)
						{	
							ApnAggr[key].downlink_prep = ApnAggr[key].downlink_prep + I.downlink_prep;
						}
						else
						{
							ApnAggr[key].downlink_prep = I.downlink_prep;
						}
					}
				}
				else
				{
					mutable BroadGgsnApn BroadGgsnApnTmp = {};
					swap(BroadGgsnApnTmp.ggsn_dn,I.ggsn_dn);
					swap(BroadGgsnApnTmp.apn_name,I.apn_name);
					swap(BroadGgsnApnTmp.start_time,I.start_time);
					swap(BroadGgsnApnTmp.end_time,I.end_time);
					swap(BroadGgsnApnTmp.downlink_post,I.downlink_post);
					swap(BroadGgsnApnTmp.downlink_prep,I.downlink_prep);
					swap(BroadGgsnApnTmp.nameOutputFile,I.nameOutputFile);
					swap(BroadGgsnApnTmp.endROP,I.endROP);
					swap(BroadGgsnApnTmp.filePrefix,I.filePrefix);
					swap(BroadGgsnApnTmp.suffix,I.suffix);
					swap(BroadGgsnApnTmp.endRopSecs,I.endRopSecs);
					swap(BroadGgsnApnTmp.startRopSecs,I.startRopSecs);
					
					insertM(ApnAggr, key, BroadGgsnApnTmp) ;							
				}
				
			}
			
			if(countAggr == <%=$parallelSQM%>)
			{
				for(rstring key in ApnAggr)
				{	
					csv.nameOutputFile = ApnAggr[key].nameOutputFile;
					csv.endROP = false;
					csv.filePrefix = ApnAggr[key].filePrefix;
					csv.suffix = ApnAggr[key].suffix;
					
					mutable rstring sqmDn = "";
					if (ApnAggr[key].ggsn_dn != "")
					{
						sqmDn = getSqmDn(ApnAggr[key].ggsn_dn,flagNamingLookup);
					}
					if (sqmDn != "")
					{
						csv.outputContent = sqmDn+";"+"APN-"+ApnAggr[key].apn_name+";"+ApnAggr[key].start_time+";"+ApnAggr[key].end_time+";"+(rstring)ApnAggr[key].downlink_post+";"+(rstring)ApnAggr[key].downlink_prep;
					}else{
						csv.outputContent = "";
					}
					
				
					submit(csv, OApn);
				}	
				
				countAggr = 0;
				clearM(ApnAggr);
				
				csv.nameOutputFile = I.nameOutputFile;
				csv.outputContent = "";
				csv.endROP = true;
				submit(csv, OApn);
			}		
        }	
     }	
}


public composite AggregatePgwApn (input stream<BroadPgwApn> IPgwApn; output stream<CsvWrite> OPgwApn)
{
	param
		expression<rstring> $mediationName ;
			
	graph
	
		(stream<CsvWrite> OPgwApn) = Custom(IPgwApn as I)
		{
		logic state:
		{
			mutable int32 countAggr = 0;
			mutable BroadPgwApnT ApnAggr ;
			rstring mediationName = $mediationName;
			mutable CsvWrite csv = {};
			mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
			mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
		} 
	
		onTuple I : 
		{   
			if (I.endROP)
			{	
				countAggr++;
				
				if (isCdrProvCfgChanged("NAMINGLOOKUP"))
				{
					reloadCdrProvCfg("NAMINGLOOKUP");
				}
			}
			else
			{
				mutable rstring key = I.ggsn_dn+I.apn_name;
				if(has(ApnAggr, key) == true)
				{
					if (I.downlink_4g != (int64)-1)
					{
						if (ApnAggr[key].downlink_4g != (int64)-1)
						{	
							ApnAggr[key].downlink_4g = ApnAggr[key].downlink_4g + I.downlink_4g;
						}
						else
						{
							ApnAggr[key].downlink_4g = I.downlink_4g;
						}
					}						
					
					if (I.uplink_4g != (int64)-1)
					{
						if (ApnAggr[key].uplink_4g != (int64)-1)
						{	
							ApnAggr[key].uplink_4g = ApnAggr[key].uplink_4g + I.uplink_4g;
						}
						else
						{
							ApnAggr[key].uplink_4g = I.uplink_4g;
						}
					}
				}
				else
				{
					mutable BroadPgwApn BroadPgwApnTmp = {};
					swap(BroadPgwApnTmp.ggsn_dn,I.ggsn_dn);
					swap(BroadPgwApnTmp.apn_name,I.apn_name);
					swap(BroadPgwApnTmp.start_time,I.start_time);
					swap(BroadPgwApnTmp.end_time,I.end_time);
					swap(BroadPgwApnTmp.downlink_4g,I.downlink_4g);
					swap(BroadPgwApnTmp.uplink_4g,I.uplink_4g);
					swap(BroadPgwApnTmp.nameOutputFile,I.nameOutputFile);
					swap(BroadPgwApnTmp.endROP,I.endROP);
					swap(BroadPgwApnTmp.filePrefix,I.filePrefix);
					swap(BroadPgwApnTmp.suffix,I.suffix);
					swap(BroadPgwApnTmp.endRopSecs,I.endRopSecs);
					swap(BroadPgwApnTmp.startRopSecs,I.startRopSecs);
					
					insertM(ApnAggr, key, BroadPgwApnTmp) ;							
				}
				
			}
			
			if(countAggr == <%=$parallelSQM%>)
			{
				for(rstring key in ApnAggr)
				{	
					csv.nameOutputFile = ApnAggr[key].nameOutputFile;
					csv.endROP = false;
					csv.filePrefix = ApnAggr[key].filePrefix;
					csv.suffix = ApnAggr[key].suffix;
					
					mutable rstring sqmDn = "";
					if (ApnAggr[key].ggsn_dn != "")
					{
						sqmDn = getSqmDn(ApnAggr[key].ggsn_dn,flagNamingLookup);
					}
					if (sqmDn != "")
					{
						csv.outputContent = sqmDn+";"+"APN-"+ApnAggr[key].apn_name+";"+ApnAggr[key].start_time+";"+ApnAggr[key].end_time+";"+(rstring)ApnAggr[key].downlink_4g+";"+(rstring)ApnAggr[key].uplink_4g;
					}else{
						csv.outputContent = "";
					}
					
				
					submit(csv, OPgwApn);
				}	
				
				countAggr = 0;
				clearM(ApnAggr);
				
				csv.nameOutputFile = I.nameOutputFile;
				csv.outputContent = "";
				csv.endROP = true;
				submit(csv, OPgwApn);
			}		
        }	
     }	
}