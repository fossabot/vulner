namespace com.ti.oss.common.cdr.evalROP;

use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ti.oss.common.cdr.types::*;




public composite TacSplit (input  stream<AggregateSqmSchema> IROP; 
                              output 
							  stream<AggregateSqmSchema> OTac0
							  ,
							  stream<AggregateSqmSchema> OTac1
							  ,
							  stream<AggregateSqmSchema> OTac2
							  ,
							  stream<AggregateSqmSchema> OTac3
							  ,
							  stream<AggregateSqmSchema> OTac4
							  ,
							  stream<AggregateSqmSchema> OTac5
							  ,
							  stream<AggregateSqmSchema> OTac6
							  ,
							  stream<AggregateSqmSchema> OTac7
							  ,
							  stream<AggregateSqmSchema> OTac8
							  ,
							  stream<AggregateSqmSchema> OTac9
							  ,
							  stream<AggregateSqmSchema> OTac10
							  ,
							  stream<AggregateSqmSchema> OTac11
							  ,
							  stream<AggregateSqmSchema> OTac12
							  ,
							  stream<AggregateSqmSchema> OTac13
							  ,
							  stream<AggregateSqmSchema> OTac14
							  ,
							  stream<AggregateSqmSchema> OTac15
							  ,
							  stream<AggregateSqmSchema> OROP
							)
{
	
	graph
	
		(
		stream<AggregateSqmSchema> OTac0
		;
		stream<AggregateSqmSchema> OTac1
		;
		stream<AggregateSqmSchema> OTac2
		;
		stream<AggregateSqmSchema> OTac3
		;
		stream<AggregateSqmSchema> OTac4
		;
		stream<AggregateSqmSchema> OTac5
		;
		stream<AggregateSqmSchema> OTac6
		;
		stream<AggregateSqmSchema> OTac7
		;
		stream<AggregateSqmSchema> OTac8
		;
		stream<AggregateSqmSchema> OTac9
		;
		stream<AggregateSqmSchema> OTac10
		;
		stream<AggregateSqmSchema> OTac11
		;
		stream<AggregateSqmSchema> OTac12
		;
		stream<AggregateSqmSchema> OTac13
		;
		stream<AggregateSqmSchema> OTac14
		;
		stream<AggregateSqmSchema> OTac15
		;
		stream<AggregateSqmSchema> OROP 
		)
		= Custom(IROP as I)
		{
		logic state:
			{
				mutable uint32 countPort = 0;
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
			} 
		
			onTuple I : 
			{      	
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == 4) 
					{
						
						submit(I,OROP);
						count_endROP = 0;
					}
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == 4) 
						{
							submit(I,OROP);
							count_write_prev = 0;
						}
					}else{
						submit(I,OROP);
					}			
				}
				else
				{
					if(I.cdrSchema.servedIMEISV!="")
					{
						mutable rstring tac = substring(I.cdrSchema.servedIMEISV,0,8);
						
						I.cdrSchema.servedIMEISV = tac;
						uint64 addr = hashCode(tac);
						uint32 modAddr = (uint32)(addr%(uint64)16);
						if(modAddr < 0u) {
							appTrc(Trace.error,"ERROR: the split returned a negative output port!");
						}
						else {
							if (modAddr==(uint32)0)
							{
								submit(I, OTac0);
							}else if (modAddr==(uint32)1)
							{
								submit(I, OTac1);
							}else if (modAddr==(uint32)2)
							{
								submit(I, OTac2);
							}else if (modAddr==(uint32)3)
							{
								submit(I, OTac3);
							}else if (modAddr==(uint32)4)
							{
								submit(I, OTac4);
							}else if (modAddr==(uint32)5)
							{
								submit(I, OTac5);
							}else if (modAddr==(uint32)6)
							{
								submit(I, OTac6);
							}else if (modAddr==(uint32)7)
							{
								submit(I, OTac7);
							}else if (modAddr==(uint32)8)
							{
								submit(I, OTac8);
							}else if (modAddr==(uint32)9)
							{
								submit(I, OTac9);
							}else if (modAddr==(uint32)10)
							{
								submit(I, OTac10);
							}else if (modAddr==(uint32)11)
							{
								submit(I, OTac11);
							}else if (modAddr==(uint32)12)
							{
								submit(I, OTac12);
							}else if (modAddr==(uint32)13)
							{
								submit(I, OTac13);
							}else if (modAddr==(uint32)14)
							{
								submit(I, OTac14);
							}
							else if (modAddr==(uint32)15)
							{
								submit(I, OTac15);
							}
						}
					}
					
				}
	        }
		}
}
