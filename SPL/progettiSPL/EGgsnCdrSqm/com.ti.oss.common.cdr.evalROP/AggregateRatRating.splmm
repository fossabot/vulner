namespace com.ti.oss.common.cdr.evalROP;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

<%
	my $parallelSQM = 16;
%>

type RatingGT = map<rstring, RatingG>;

public composite AggregateRatRating (input stream<RatingG> IRating; output stream<CsvWrite> ORatRating)
{
	graph
	
		(stream<CsvWrite> ORatRating) = Custom(IRating as I)
		{
		logic state:
			{
				mutable int32 countAggr = 0;
				mutable RatingGT ratingGT ;
				mutable CsvWrite csv = {};
			} 
		
			onTuple I : 
			{   
				if (I.endROP)
				{
					countAggr++;
				}
				else
				{				
					mutable rstring key = I.rat_type+I.rating_group;
					
					if(has(ratingGT, key) == true)
					{					
						ratingGT[key].volume_traffico_downlink = ratingGT[key].volume_traffico_downlink + I.volume_traffico_downlink;
						ratingGT[key].volume_traffico_uplink = ratingGT[key].volume_traffico_uplink + I.volume_traffico_uplink;
					}
					else
					{					
						mutable RatingG RatingGTmp = {};							
						swap(RatingGTmp.rat_type,I.rat_type);
						swap(RatingGTmp.rating_group,I.rating_group);
						swap(RatingGTmp.start_time,I.start_time);
						swap(RatingGTmp.end_time,I.end_time);
						swap(RatingGTmp.volume_traffico_downlink,I.volume_traffico_downlink);
						swap(RatingGTmp.volume_traffico_uplink,I.volume_traffico_uplink);
						swap(RatingGTmp.nameOutputFile,I.nameOutputFile);
						swap(RatingGTmp.endROP,I.endROP);
						swap(RatingGTmp.filePrefix,I.filePrefix);
						swap(RatingGTmp.suffix,I.suffix);
						swap(RatingGTmp.endRopSecs,I.endRopSecs);
						swap(RatingGTmp.startRopSecs,I.startRopSecs);
						
						insertM(ratingGT, key, RatingGTmp) ;
							
					}
				}
				
				if(countAggr == 16)
				{
					for(rstring key in ratingGT)
					{						
						csv.nameOutputFile = ratingGT[key].nameOutputFile;
						csv.endROP = false;
						csv.filePrefix = ratingGT[key].filePrefix;
						csv.suffix = ratingGT[key].suffix;
						
						if (ratingGT[key].rat_type != "")
						{
							csv.outputContent = ratingGT[key].rat_type+";"+ratingGT[key].rating_group+";"+ratingGT[key].start_time+";"+ratingGT[key].end_time+";"+(rstring)ratingGT[key].volume_traffico_downlink+";"+(rstring)ratingGT[key].volume_traffico_uplink;
						}else{
							csv.outputContent = "";
						}
						submit(csv, ORatRating);
					}
					
					countAggr = 0;
					clearM(ratingGT);
					
					csv.outputContent = "";
					csv.endROP = true;
					submit(csv, ORatRating);
				}		
	        }	
	     }	
}