namespace com.ti.oss.common.cdr.evalROP;

use com.ti.oss.common.cdr.parser.eggsn::*;
use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ibm.streamsx.file::*;
use com.ti.oss.common.event::*;
use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.util.cfg::*;
// from MediationUtils
use com.ti.oss.common.util.time::*;


public composite RopEvalSQMHour(output stream<RopHour> EvalROPHour)
{	
	param
		expression <rstring> $mediationName;
		
	graph
		stream<boolean checkROP> ControlROP = Beacon()
		{
			param
				period : 1.0;
			output
				ControlROP : checkROP = true;
		}
		
		stream<RopHour> EvalROPHour = Custom(ControlROP)
		{
			logic state :
			{
				rstring mediationNameParam = $mediationName;
				
				mutable rstring ropOld="";
				mutable RopHour ropChanged ={};
			} 
			onTuple ControlROP :
			{
				//201310100746
				mutable rstring date = getUtilTimeStampForRop()+"00";
	           	mutable rstring rop = substring(date,8,2); 
	           
	           	if(ropOld != rop) 
	           	{		
	           		timestamp ts = toTimestamp(Sys.YYYYMMDDhhmmss,date);
		            ropChanged.endRop = (float64)getSeconds(ts);
		            ropChanged.startRop = (float64)getSeconds(ts) - (float64)3600;		            
		            ropChanged.end = true;
		            
	            	if (ropOld !="")
	            	{
	            		submit(ropChanged, EvalROPHour);
	            	}
	            	ropOld = rop;
	           	}	
			}
		}
}