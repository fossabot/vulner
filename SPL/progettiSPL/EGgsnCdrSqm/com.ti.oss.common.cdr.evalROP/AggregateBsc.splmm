namespace com.ti.oss.common.cdr.evalROP;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

<%
	my $parallelSQM = 16;
%>

type BscBroadDownlinkT = map<rstring, BscBroadDownlink>;

public composite AggregateBsc (input stream<BscBroadDownlink> IBsc; output stream<CsvWrite> OBsc)
{
	param
		expression<rstring> $mediationName ;
			
	graph
	
		(stream<CsvWrite> OBsc) = Custom(IBsc as I)
		{
		logic state:
			{
				mutable int32 countAggr = 0;
				mutable BscBroadDownlinkT BscBroadDownlinkAggr ;
				rstring mediationName = $mediationName;
				mutable CsvWrite csv = {};
			} 
		
			onTuple I : 
			{   
				if (I.endROP)
				{	
					countAggr++;
				}
				else
				{
					mutable rstring key = I.bsc;
					if(has(BscBroadDownlinkAggr, key) == true)
					{
						BscBroadDownlinkAggr[key].bb_bsc_downlink = BscBroadDownlinkAggr[key].bb_bsc_downlink + I.bb_bsc_downlink;
					}
					else
					{
						mutable BscBroadDownlink BscBroadDownlinkTmp = {};
						swap(BscBroadDownlinkTmp.bsc,I.bsc);
						swap(BscBroadDownlinkTmp.start_time,I.start_time);
						swap(BscBroadDownlinkTmp.end_time,I.end_time);
						swap(BscBroadDownlinkTmp.bb_bsc_downlink,I.bb_bsc_downlink);
						swap(BscBroadDownlinkTmp.nameOutputFile,I.nameOutputFile);
						swap(BscBroadDownlinkTmp.endROP,I.endROP);
						swap(BscBroadDownlinkTmp.filePrefix,I.filePrefix);
						swap(BscBroadDownlinkTmp.suffix,I.suffix);
						swap(BscBroadDownlinkTmp.endRopSecs,I.endRopSecs);
						swap(BscBroadDownlinkTmp.startRopSecs,I.startRopSecs);
						
						insertM(BscBroadDownlinkAggr, key, BscBroadDownlinkTmp) ;								
					}
					
				}
				
				if(countAggr == 16)
				{
					for(rstring key in BscBroadDownlinkAggr)
					{
						csv.nameOutputFile = BscBroadDownlinkAggr[key].nameOutputFile;
						csv.endROP = false;
						csv.filePrefix = BscBroadDownlinkAggr[key].filePrefix;
						csv.suffix = BscBroadDownlinkAggr[key].suffix;
							
						csv.outputContent = BscBroadDownlinkAggr[key].bsc+";"+BscBroadDownlinkAggr[key].start_time+";"+BscBroadDownlinkAggr[key].end_time+";"+(rstring)BscBroadDownlinkAggr[key].bb_bsc_downlink;
						
						submit(csv, OBsc);
					}	
					
					countAggr = 0;
					clearM(BscBroadDownlinkAggr);
					
					csv.nameOutputFile = I.nameOutputFile;
					csv.outputContent = "";
					csv.endROP = true;
					submit(csv, OBsc);
				}		
	        }	
	     }	
}