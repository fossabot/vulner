namespace com.ti.oss.common.cdr.evalROP;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

<%
	my $parallelSQM = 16;
%>

type SqmRoamingBroadGgsn = map<rstring, RoamingBroadGgsn>;

public composite StorageRoamingBroadBandGgsn (input stream<RoamingBroadGgsn> IRoaming, stream<RopHour> EvalROPHour; output stream<CsvWrite> outCsvStorageRoamingBroadBandGgsn)
{
	param
		expression<rstring> $mediationName ;
	graph
	
		(stream<CsvWrite> outCsvStorageRoamingBroadBandGgsn) = Custom(IRoaming as I; EvalROPHour )
		{
		logic state:
			{
				rstring mediationName = $mediationName;
				mutable SqmRoamingBroadGgsn CDRforStorageRoamingBroadGgsn;
				mutable CsvWrite csv = {};
				mutable int32 countAggr = 0;
				mutable rstring nameOutputFileState = "";
				mutable rstring startRopState = "";
				mutable rstring endRopState = "";
				mutable rstring filePrefixState = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_PREFIX_ROAMING_BROAD_GGSN_HOUR") ;
				mutable rstring fileSuffixState = getCfgParam("COMMON_CFG_DIR", mediationName, "FILE_SUFFIX") ;
				mutable rstring path = getCfgParam("COMMON_CFG_DIR", mediationName, "SQM_ROAMING_GGSN_OUTPUT_PATH") ;
				mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
				mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
				mutable rstring numberofHours = getCfgParam("COMMON_CFG_DIR", $mediationName, "ROAMING_HOURS");
				mutable int32 countHour = 0;
			} 
		
			onTuple EvalROPHour:
			{
				if (EvalROPHour.end)
				{
					path = checkConfiguration(mediationName, "SQM_ROAMING_GGSN_OUTPUT_PATH", path) ;
					filePrefixState = checkConfiguration(mediationName, "FILE_PREFIX_ROAMING_BROAD_GGSN_HOUR", filePrefixState) ;
					fileSuffixState = checkConfiguration(mediationName, "FILE_SUFFIX", fileSuffixState) ;
					numberofHours = checkConfiguration(mediationName, "ROAMING_HOURS", numberofHours) ;
					
					if (isCdrProvCfgChanged("NAMINGLOOKUP"))
					{
						reloadCdrProvCfg("NAMINGLOOKUP");
					}
					
					mutable float64 time = EvalROPHour.endRop-((float64)(3600*(int32)numberofHours));					
					startRopState = getUtilConvert((rstring)time);
					endRopState = getUtilConvert((rstring)EvalROPHour.endRop);
					nameOutputFileState = path + "RoamingBroadGgsn60_"+ (rstring)EvalROPHour.endRop + ".tmp";
					countHour++;
				}
			}
			
			onTuple I : 
			{   
				if (I.endROP)
				{
					countAggr++;
				}
				else
				{
					mutable rstring key = I.ggsn_dn+I.country_roaming_operator;
					
					if(has(CDRforStorageRoamingBroadGgsn, key) == false) 
				    {   
				    	mutable RoamingBroadGgsn firstEntry = {};
						firstEntry.filePrefix = filePrefixState ;
						firstEntry.suffix = fileSuffixState ;
				    	firstEntry.ggsn_dn = I.ggsn_dn;
						firstEntry.country_roaming_operator = I.country_roaming_operator;
						firstEntry.cdr_foreign_downlink_control_ggsn = I.cdr_foreign_downlink_control_ggsn;
						insertM(CDRforStorageRoamingBroadGgsn, key, firstEntry) ;
				    } 
				    else
				    {
				    	CDRforStorageRoamingBroadGgsn[key].cdr_foreign_downlink_control_ggsn = CDRforStorageRoamingBroadGgsn[key].cdr_foreign_downlink_control_ggsn + I.cdr_foreign_downlink_control_ggsn;   
				    }
			    }
			    
			    if(countAggr == 16)
			    {
			    	if (startRopState!= "" && countHour == (int32)numberofHours)
			    	{
			    		for(rstring key in CDRforStorageRoamingBroadGgsn)
						{
				    		csv.nameOutputFile = nameOutputFileState;
							csv.endROP = false;
							csv.filePrefix = CDRforStorageRoamingBroadGgsn[key].filePrefix;
							csv.suffix = CDRforStorageRoamingBroadGgsn[key].suffix;					
							
							mutable rstring sqmDn = "";
							if (CDRforStorageRoamingBroadGgsn[key].ggsn_dn != "")
							{
								sqmDn = getSqmDn(CDRforStorageRoamingBroadGgsn[key].ggsn_dn,flagNamingLookup);	
							}
							if (sqmDn != "")
							{
								csv.outputContent = sqmDn+";"+CDRforStorageRoamingBroadGgsn[key].country_roaming_operator+";"+startRopState+";"+endRopState+";"+(rstring)CDRforStorageRoamingBroadGgsn[key].cdr_foreign_downlink_control_ggsn;
							}else{
								csv.outputContent = "";
							}
						
							submit(csv, outCsvStorageRoamingBroadBandGgsn);
						}
						
						csv.outputContent = "";
						csv.endROP = true;
						submit(csv, outCsvStorageRoamingBroadBandGgsn);
						
						startRopState = "";
						endRopState = "";
				    	nameOutputFileState = "";
				    	countHour = 0;
				    	clearM(CDRforStorageRoamingBroadGgsn);
			    	}
			    	
			    	countAggr = 0;
			    }			    
	        }	
	     }	
}

rstring getSqmDn(rstring nodeId, boolean flagNamingLookup)
{
	mutable list<rstring> tmpOutParamMapNAMINGLOOKUP = [];
	mutable rstring sqmDn = "";
	if (flagNamingLookup)
	{
		if ( getCdrProvRecord("NAMINGLOOKUP", nodeId, tmpOutParamMapNAMINGLOOKUP ) )
		{   
			sqmDn = tmpOutParamMapNAMINGLOOKUP[0];
		}
	}
	else
	{
		appTrc(Trace.error, "File NAMING_LOOKUP.csv non caricato correttamente ");
	}
	
	return sqmDn;
}