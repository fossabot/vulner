namespace com.ti.oss.common.cdr.evalROP;

use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ti.oss.common.cdr.types::*;




public composite NodeIdSplit (input  stream<AggregateSqmSchema> IROP; 
                              output 
							  stream<AggregateSqmSchema> ONode0
							  ,
							  stream<AggregateSqmSchema> ONode1
							  ,
							  stream<AggregateSqmSchema> ONode2
							  ,
							  stream<AggregateSqmSchema> ONode3
							  ,
							  stream<AggregateSqmSchema> ONode4
							  ,
							  stream<AggregateSqmSchema> ONode5
							  ,
							  stream<AggregateSqmSchema> ONode6
							  ,
							  stream<AggregateSqmSchema> ONode7
							  ,
							  stream<AggregateSqmSchema> ONode8
							  ,
							  stream<AggregateSqmSchema> ONode9
							  ,
							  stream<AggregateSqmSchema> ONode10
							  ,
							  stream<AggregateSqmSchema> ONode11
							  ,
							  stream<AggregateSqmSchema> ONode12
							  ,
							  stream<AggregateSqmSchema> ONode13
							  ,
							  stream<AggregateSqmSchema> ONode14
							  ,
							  stream<AggregateSqmSchema> ONode15
							  ,
							  stream<AggregateSqmSchema> OROP
							)
{	
	graph
	
		
		(
		stream<AggregateSqmSchema> ONode0
		;
		stream<AggregateSqmSchema> ONode1
		;
		stream<AggregateSqmSchema> ONode2
		;
		stream<AggregateSqmSchema> ONode3
		;
		stream<AggregateSqmSchema> ONode4
		;
		stream<AggregateSqmSchema> ONode5
		;
		stream<AggregateSqmSchema> ONode6
		;
		stream<AggregateSqmSchema> ONode7
		;
		stream<AggregateSqmSchema> ONode8
		;
		stream<AggregateSqmSchema> ONode9
		;
		stream<AggregateSqmSchema> ONode10
		;
		stream<AggregateSqmSchema> ONode11
		;
		stream<AggregateSqmSchema> ONode12
		;
		stream<AggregateSqmSchema> ONode13
		;
		stream<AggregateSqmSchema> ONode14
		;
		stream<AggregateSqmSchema> ONode15
		;
		stream<AggregateSqmSchema> OROP 
		)
		= Custom(IROP as I)
		{
		logic state:
			{
				mutable uint32 countPort = 0;				
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
			} 
		
			onTuple I : 
			{      	
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == 4) 
					{
						submit(I,OROP);				
						count_endROP = 0;
					}			
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == 4) 
						{
							submit(I,OROP);
							count_write_prev = 0;
						}
					}else{
						submit(I,OROP);
					}								
				}
				else
				{
					uint64 addr = hashCode((rstring)I.cdrSchema.nodeId);
					uint32 modAddr = (uint32)(addr%(uint64)16);
					if(modAddr < 0u) {
						appTrc(Trace.error,"ERROR: the split returned a negative output port!");
					}
					else {
						if (modAddr==(uint32)0)
						{
							submit(I, ONode0);
						}else if (modAddr==(uint32)1)
						{
							submit(I, ONode1);
						}else if (modAddr==(uint32)2)
						{
							submit(I, ONode2);
						}else if (modAddr==(uint32)3)
						{
							submit(I, ONode3);
						}else if (modAddr==(uint32)4)
						{
							submit(I, ONode4);
						}else if (modAddr==(uint32)5)
						{
							submit(I, ONode5);
						}else if (modAddr==(uint32)6)
						{
							submit(I, ONode6);
						}else if (modAddr==(uint32)7)
						{
							submit(I, ONode7);
						}else if (modAddr==(uint32)8)
						{
							submit(I, ONode8);
						}else if (modAddr==(uint32)9)
						{
							submit(I, ONode9);
						}else if (modAddr==(uint32)10)
						{
							submit(I, ONode10);
						}else if (modAddr==(uint32)11)
						{
							submit(I, ONode11);
						}else if (modAddr==(uint32)12)
						{
							submit(I, ONode12);
						}else if (modAddr==(uint32)13)
						{
							submit(I, ONode13);
						}else if (modAddr==(uint32)14)
						{
							submit(I, ONode14);
						}
						else if (modAddr==(uint32)15)
						{
							submit(I, ONode15);
						}						
					}					
				}
	        }
		}
}
