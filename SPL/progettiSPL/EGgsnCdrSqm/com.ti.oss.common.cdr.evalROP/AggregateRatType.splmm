namespace com.ti.oss.common.cdr.evalROP;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

<%
	my $parallelSQM = 16;
%>

type RatTT = map<rstring, RatT>;

public composite AggregateRatType (input stream<RatT> IRat; output stream<CsvWrite> ORat)
{
	graph
	
		(stream<CsvWrite> ORat) = Custom(IRat as I)
		{
		logic state:
			{
				mutable int32 countAggr = 0;
				mutable RatTT ratTT ;
				mutable CsvWrite csv = {};
			} 
		
			onTuple I : 
			{   
				if (I.endROP)
				{
					countAggr++;
				}
				else
				{
					mutable rstring key = I.rat_type;
					if(has(ratTT, key) == true)
					{
						ratTT[key].num_connection = ratTT[key].num_connection + I.num_connection;
						ratTT[key].tot_duration = ratTT[key].tot_duration + I.tot_duration;
					}
					else
					{
						mutable RatT RatTTmp = {};							
						swap(RatTTmp.rat_type,I.rat_type);
						swap(RatTTmp.start_time,I.start_time);
						swap(RatTTmp.end_time,I.end_time);
						swap(RatTTmp.num_connection,I.num_connection);
						swap(RatTTmp.tot_duration,I.tot_duration);
						swap(RatTTmp.nameOutputFile,I.nameOutputFile);
						swap(RatTTmp.endROP,I.endROP);
						swap(RatTTmp.filePrefix,I.filePrefix);
						swap(RatTTmp.suffix,I.suffix);
						swap(RatTTmp.endRopSecs,I.endRopSecs);
						swap(RatTTmp.startRopSecs,I.startRopSecs);
						
						insertM(ratTT, key, RatTTmp) ;
							
					}
				}
				
				if(countAggr == 16)
				{
					for(rstring key in ratTT)
					{
						csv.nameOutputFile = ratTT[key].nameOutputFile;
						csv.endROP = false;
						csv.filePrefix = ratTT[key].filePrefix;
						csv.suffix = ratTT[key].suffix;
						
						if (ratTT[key].rat_type != "")
						{
							csv.outputContent = ratTT[key].rat_type+";"+ratTT[key].start_time+";"+ratTT[key].end_time+";"+(rstring)ratTT[key].num_connection+";"+(rstring)ratTT[key].tot_duration;
						}else{
							csv.outputContent = "";
						}
						submit(csv, ORat);
					}
					
					countAggr = 0;
					clearM(ratTT);
					
					csv.outputContent = "";
					csv.endROP = true;
					submit(csv, ORat);
				}		
	        }	
	     }	
}