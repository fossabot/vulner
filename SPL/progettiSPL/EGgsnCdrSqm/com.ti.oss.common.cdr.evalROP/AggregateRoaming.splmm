namespace com.ti.oss.common.cdr.evalROP;

use com.ibm.streamsx.file::* ;
use com.ti.oss.common.cdr.parser.eggsn::* ;
use com.ti.oss.common.cdr.types::* ;
use com.ti.oss.common.cdr.util::* ;
use com.ti.oss.common.cdr.util.cfg::* ;
use com.ti.oss.common.event::* ;
use com.ti.oss.common.types::* ;
use com.ti.oss.common.util.cfg::* ;
use com.ti.oss.common.util.time::*;

<%
	my $parallelSQM = 16;
%>

type RoamingBroadGgsnT = map<rstring, RoamingBroadGgsn>;


public composite AggregateRoaming (input stream<RoamingBroadGgsn> IRoaming; output stream<CsvWrite> ORoaming)
{
	param
		expression<rstring> $mediationName ;
			
	graph
	
		(stream<CsvWrite> ORoaming) = Custom(IRoaming as I)
		{
		logic state:
		{
			mutable int32 countAggr = 0;
			mutable RoamingBroadGgsnT RoamingAggr ;
			rstring mediationName = $mediationName;
			mutable CsvWrite csv = {};
			mutable rstring naming_lookup = getCfgParam("COMMON_CFG_DIR", $mediationName, "NAMING_LOOKUP"); 
			mutable boolean flagNamingLookup = loadCdrProvCfg("NAMINGLOOKUP", naming_lookup,(uint32) 3, ";") ;
		} 
	
		onTuple I : 
		{   
			if (I.endROP)
			{	
				countAggr++;
				
				if (isCdrProvCfgChanged("NAMINGLOOKUP"))
				{
					reloadCdrProvCfg("NAMINGLOOKUP");
				}
			}
			else
			{
				mutable rstring key = I.ggsn_dn+I.country_roaming_operator;
				if(has(RoamingAggr, key) == true)
				{
					if (I.cdr_foreign_downlink_control_ggsn != (int64)-1)
					{
						if (RoamingAggr[key].cdr_foreign_downlink_control_ggsn != (int64)-1)
						{	
							RoamingAggr[key].cdr_foreign_downlink_control_ggsn = RoamingAggr[key].cdr_foreign_downlink_control_ggsn + I.cdr_foreign_downlink_control_ggsn;
						}
						else
						{
							RoamingAggr[key].cdr_foreign_downlink_control_ggsn = I.cdr_foreign_downlink_control_ggsn;
						}
					}
				}
				else
				{
					mutable RoamingBroadGgsn RoamingBroadGgsnTmp = {};
					swap(RoamingBroadGgsnTmp.ggsn_dn,I.ggsn_dn);
					swap(RoamingBroadGgsnTmp.country_roaming_operator,I.country_roaming_operator);
					swap(RoamingBroadGgsnTmp.start_time,I.start_time);
					swap(RoamingBroadGgsnTmp.end_time,I.end_time);
					swap(RoamingBroadGgsnTmp.cdr_foreign_downlink_control_ggsn,I.cdr_foreign_downlink_control_ggsn);
					swap(RoamingBroadGgsnTmp.nameOutputFile,I.nameOutputFile);
					swap(RoamingBroadGgsnTmp.endROP,I.endROP);
					swap(RoamingBroadGgsnTmp.filePrefix,I.filePrefix);
					swap(RoamingBroadGgsnTmp.suffix,I.suffix);
					swap(RoamingBroadGgsnTmp.endRopSecs,I.endRopSecs);
					swap(RoamingBroadGgsnTmp.startRopSecs,I.startRopSecs);
					
					insertM(RoamingAggr, key, RoamingBroadGgsnTmp) ;							
				}
				
			}
			
			if(countAggr == <%=$parallelSQM%>)
			{
				for(rstring key in RoamingAggr)
				{	
					csv.nameOutputFile = RoamingAggr[key].nameOutputFile;
					csv.endROP = false;
					csv.filePrefix = RoamingAggr[key].filePrefix;
					csv.suffix = RoamingAggr[key].suffix;
					
					mutable rstring sqmDn = "";
					if (RoamingAggr[key].ggsn_dn != "")
					{
						sqmDn = getSqmDn(RoamingAggr[key].ggsn_dn,flagNamingLookup);
					}
					if (sqmDn != "")
					{
						csv.outputContent = sqmDn+";"+RoamingAggr[key].country_roaming_operator+";"+RoamingAggr[key].start_time+";"+RoamingAggr[key].end_time+";"+(rstring)RoamingAggr[key].cdr_foreign_downlink_control_ggsn;
					}else{
						csv.outputContent = "";
					}
					submit(csv, ORoaming);
				}	
				
				countAggr = 0;
				clearM(RoamingAggr);
				
				csv.nameOutputFile = I.nameOutputFile;
				csv.outputContent = "";
				csv.endROP = true;
				submit(csv, ORoaming);
			}		
        }	
     }	
}