namespace com.ti.oss.common.cdr.evalROP;

use com.ti.oss.common.cdr.util::*;
use com.ti.oss.common.types::*;
use com.ti.oss.common.cdr.types::*;
use com.ti.oss.common.util.cfg::*;
use com.ti.oss.common.cdr.util.cfg::* ;

<%
	my $parallelSQM = 1;
	my $parallelSQMmod = 16;
%>


public composite RoamingSplit (input  stream<AggregateSqmSchema> IROP; 
                              output <%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
							  stream<AggregateSqmSchema> ORoaming<%=$i%>
							  <%if($i != $parallelSQMmod - 1) {
							  print ",";
							  }
							  }%>,
							  stream<AggregateSqmSchema> OROP
							
							)
{
	param
		expression <rstring> $mediationName;
	
	
	graph
	
		(<%for(my $i = 0; $i < $parallelSQMmod; $i++) {%>
		stream<AggregateSqmSchema> ORoaming<%=$i%>
		<%if($i != $parallelSQMmod - 1) {
			print ";";
		}
		}%>;
		stream<AggregateSqmSchema> OROP 
		)
		= Custom(IROP as I)
		{
		logic state:
			{
				mutable int32 countPort = 0;
				mutable int32 count_endROP = 0;
				mutable int32 count_write_prev = 0;
				rstring mediationName = $mediationName;
				
				mutable rstring packet_data = getCfgParam("COMMON_CFG_DIR", mediationName, "PACKET_DATA");
				mutable boolean flagPacketData = loadCdrProvCfg("PACKETDATA", packet_data,(uint32)1, ",");
			} 
		
			onTuple I : 
			{      	
				if (I.endROP)
				{
					count_endROP++;
					if(count_endROP == <%=$parallelSQM%>) 
					{
						submit(I,OROP);	
						count_endROP = 0;
						
						if (isCdrProvCfgChanged("PACKETDATA"))
						{
							reloadCdrProvCfg("PACKETDATA");
						}
					}			
				}
				else if (I.write_prev)
				{
					if (I.exclude_node == "")
					{
						count_write_prev++;
						if(count_write_prev == <%=$parallelSQM%>) 
						{
							submit(I,OROP);
							count_write_prev = 0;
						}
					}else{
						submit(I,OROP);
					}							
				}
				else
				{
					if (size(I.cdrSchema.servingNodeAddress)>0)
					{
						mutable rstring operatore = "";
						mutable list<rstring> tmpOutParamMap = [];
						if ( getCdrProvRecord("PACKETDATA", I.cdrSchema.servingNodeAddress[0], tmpOutParamMap ) )
						{   
							mutable int32 end;
							//len = length(tmpOutParamMap[0]) ;
							end = findFirst(tmpOutParamMap[0], "-", 0);
							if (end==-1)
							{
								operatore = tmpOutParamMap[0];//Operatore
							}else{
								operatore = substring(tmpOutParamMap[0],0,end);//Operatore
							}
						}
						
						I.cdrSchema.servingNodeAddress[0] = operatore;
						
						if (operatore != "")
						{
						
							if (countPort==0)
							{
								submit(I, ORoaming0);
							}else if (countPort==1)
							{	
								submit(I, ORoaming1);
							}else if (countPort==2)
							{
								submit(I, ORoaming2);
							}else if (countPort==3)
							{
								submit(I, ORoaming3);
							}else if (countPort==4)
							{
								submit(I, ORoaming4);
							}else if (countPort==5)
							{
								submit(I, ORoaming5);
							}else if (countPort==6)
							{
								submit(I, ORoaming6);
							}else if (countPort==7)
							{
								submit(I, ORoaming7);
							}else if (countPort==8)
							{
								submit(I, ORoaming8);
							}else if (countPort==9)
							{
								submit(I, ORoaming9);
							}else if (countPort==10)
							{
								submit(I, ORoaming10);
							}else if (countPort==11)
							{
								submit(I, ORoaming11);
							}else if (countPort==12)
							{
								submit(I, ORoaming12);
							}else if (countPort==13)
							{
								submit(I, ORoaming13);
							}else if (countPort==14)
							{
								submit(I, ORoaming14);
							}
							else if (countPort==15)
							{
								submit(I, ORoaming15);
							}
							countPort++;
							if (countPort == <%=$parallelSQM%>)
							{
								countPort = 0;
							}
						}
					}
				}
	        }
		}
}